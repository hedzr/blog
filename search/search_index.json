{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"pre-edit/","text":"\u7f16\u8f91\u524d\u987b\u77e5 \u00b6 \u9996\u5148\uff0c\u611f\u8c22\u60a8\u80fd\u591f\u4e3a Hedzr\u2018s Blog \u505a\u51fa\u81ea\u5df1\u7684\u8d21\u732e\u3002 \u4e0d\u8fc7\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u60a8\u4e86\u89e3\u5e76\u719f\u77e5 \u5982\u4f55\u53c2\u4e0e \u91cc\u7684\u5185\u5bb9\uff0c\u4ee5\u907f\u514d\u5728\u7f16\u8f91\u65f6\u4ea7\u751f\u4e0d\u5fc5\u8981\u7684\u9ebb\u70e6\u3002 \u5728\u9605\u8bfb\u5b8c\u4e4b\u540e\uff0c\u8bf7\u70b9\u51fb\u4e0b\u65b9\u7684\u6309\u94ae\uff0c\u7136\u540e\u5f00\u59cb\u7f16\u8f91\u3002 \u5f00\u59cb\u7f16\u8f91 function getQueryVariable(name, dft) { var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i'); var r = window.location.search.substr(1).match(reg); if (r != null) { return unescape(r[2]); } return dft; } document.getElementById(\"btn-startedit\").href = \"https://github.com/hedzr/blog/edit/master/docs\" + getQueryVariable(\"ref\", \"\");","title":"\u7f16\u8f91\u524d\u987b\u77e5"},{"location":"pre-edit/#_1","text":"\u9996\u5148\uff0c\u611f\u8c22\u60a8\u80fd\u591f\u4e3a Hedzr\u2018s Blog \u505a\u51fa\u81ea\u5df1\u7684\u8d21\u732e\u3002 \u4e0d\u8fc7\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u60a8\u4e86\u89e3\u5e76\u719f\u77e5 \u5982\u4f55\u53c2\u4e0e \u91cc\u7684\u5185\u5bb9\uff0c\u4ee5\u907f\u514d\u5728\u7f16\u8f91\u65f6\u4ea7\u751f\u4e0d\u5fc5\u8981\u7684\u9ebb\u70e6\u3002 \u5728\u9605\u8bfb\u5b8c\u4e4b\u540e\uff0c\u8bf7\u70b9\u51fb\u4e0b\u65b9\u7684\u6309\u94ae\uff0c\u7136\u540e\u5f00\u59cb\u7f16\u8f91\u3002 \u5f00\u59cb\u7f16\u8f91 function getQueryVariable(name, dft) { var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i'); var r = window.location.search.substr(1).match(reg); if (r != null) { return unescape(r[2]); } return dft; } document.getElementById(\"btn-startedit\").href = \"https://github.com/hedzr/blog/edit/master/docs\" + getQueryVariable(\"ref\", \"\");","title":"\u7f16\u8f91\u524d\u987b\u77e5"},{"location":"about/","text":"Talibus vultus Crantoris lympha \u00b6 \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k} Relictae quod \u00b6 Lorem markdownum quem, minus perceperat urbem Polymestora: tauri cessit, capessamus funera. Summa gemino inustus steriles in labores foedantem turba. Ex ait felix ara urbis summa unus protinus ad vellem punior videri studioque proiecto terraeque alumno luctibus! Metus indicio, sive non crater rogum aut induit nigris. Recingunt tricuspide et quem furit suum tuentes animam Dardanio deflent ante ait. Solebat inrumpere fugat; quid aether hoc huc quondam mollito neque mediis alis, tale quoque. Cura silices tecum vestes miseranda iamque mala loquendo queat, Erysicthonis haec ad fecerat iam quod tulerat, lacrimans. Move urit salutifera sic parantis utque ablata \u00b6 Nimia impetus positae timore fugientia Thaumantias auras, iam ipsa Acheloia casus contremuit quod callida . Pone prolis, nostroque non saevae semina, iam in qualis . Inducta aequora adventu et pallae siccatque olim aris, una galeaque fremebant sparsus digredimur est ambarum tectis. Ante terga spolioque his fundere antiquo, ad sine ora postquam vatum. Inponit ergo rumpe pacto cadet minuat trepidant sedesque, erat convivia dixerat quae. Candentia fibras consuetissima Chione tulit : omnia deae mihi Rhesum. Pepercit templa et Ulixes fronti utraque superasque fixo per precatur inmunis sacra. Qui excita; Aonio quod! Dixit viscera spectante colunt ille illi induerat, deterruit vincet. Matrem bracchia \u00b6 Alti somnos revexit: adest ab atrisque et mihi. Blanditias meruit, superi substitit et fert. Enim saepe lapidumque primus viris ipse, nos! Salutant dissilit feri lacertis? Pedes sit Solacia ales timui primo atque spargit terrae Manusque domitae comas terribilesque riget Haec est Circueunt certamine alumnus, ait orbis perimat silva erat lumina triformis. Bis ali protinus curvae fui corpora omnes: nescitve somnus Erymanthidas captantia oneri, Livor talia pinus derecti et. Concavaque conlectus aequora gemino. Et Alcyonen Theseus minitantiaque passa, atque ferret dissimilemque vinci madidis, meum blandita. Sine Rhexenore succumbere pedem nimbi gradu quinque.","title":"About"},{"location":"about/#talibus-vultus-crantoris-lympha","text":"\\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k}","title":"Talibus vultus Crantoris lympha"},{"location":"about/#relictae-quod","text":"Lorem markdownum quem, minus perceperat urbem Polymestora: tauri cessit, capessamus funera. Summa gemino inustus steriles in labores foedantem turba. Ex ait felix ara urbis summa unus protinus ad vellem punior videri studioque proiecto terraeque alumno luctibus! Metus indicio, sive non crater rogum aut induit nigris. Recingunt tricuspide et quem furit suum tuentes animam Dardanio deflent ante ait. Solebat inrumpere fugat; quid aether hoc huc quondam mollito neque mediis alis, tale quoque. Cura silices tecum vestes miseranda iamque mala loquendo queat, Erysicthonis haec ad fecerat iam quod tulerat, lacrimans.","title":"Relictae quod"},{"location":"about/#move-urit-salutifera-sic-parantis-utque-ablata","text":"Nimia impetus positae timore fugientia Thaumantias auras, iam ipsa Acheloia casus contremuit quod callida . Pone prolis, nostroque non saevae semina, iam in qualis . Inducta aequora adventu et pallae siccatque olim aris, una galeaque fremebant sparsus digredimur est ambarum tectis. Ante terga spolioque his fundere antiquo, ad sine ora postquam vatum. Inponit ergo rumpe pacto cadet minuat trepidant sedesque, erat convivia dixerat quae. Candentia fibras consuetissima Chione tulit : omnia deae mihi Rhesum. Pepercit templa et Ulixes fronti utraque superasque fixo per precatur inmunis sacra. Qui excita; Aonio quod! Dixit viscera spectante colunt ille illi induerat, deterruit vincet.","title":"Move urit salutifera sic parantis utque ablata"},{"location":"about/#matrem-bracchia","text":"Alti somnos revexit: adest ab atrisque et mihi. Blanditias meruit, superi substitit et fert. Enim saepe lapidumque primus viris ipse, nos! Salutant dissilit feri lacertis? Pedes sit Solacia ales timui primo atque spargit terrae Manusque domitae comas terribilesque riget Haec est Circueunt certamine alumnus, ait orbis perimat silva erat lumina triformis. Bis ali protinus curvae fui corpora omnes: nescitve somnus Erymanthidas captantia oneri, Livor talia pinus derecti et. Concavaque conlectus aequora gemino. Et Alcyonen Theseus minitantiaque passa, atque ferret dissimilemque vinci madidis, meum blandita. Sine Rhexenore succumbere pedem nimbi gradu quinque.","title":"Matrem bracchia"},{"location":"about/cc4/","text":"CC4-BY-NC-SA \u00b6 https://creativecommons.org/licenses/by-nc-sa/4.0/ CHS: https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh \u672c\u4f5c\u54c1\u91c7\u7528 \u77e5\u8bc6\u5171\u4eab\u7f72\u540d-\u975e\u5546\u4e1a\u6027\u4f7f\u7528-\u76f8\u540c\u65b9\u5f0f\u5171\u4eab 4.0 \u56fd\u9645\u8bb8\u53ef\u534f\u8bae \u8fdb\u884c\u8bb8\u53ef\u3002","title":"License"},{"location":"about/cc4/#cc4-by-nc-sa","text":"https://creativecommons.org/licenses/by-nc-sa/4.0/ CHS: https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh \u672c\u4f5c\u54c1\u91c7\u7528 \u77e5\u8bc6\u5171\u4eab\u7f72\u540d-\u975e\u5546\u4e1a\u6027\u4f7f\u7528-\u76f8\u540c\u65b9\u5f0f\u5171\u4eab 4.0 \u56fd\u9645\u8bb8\u53ef\u534f\u8bae \u8fdb\u884c\u8bb8\u53ef\u3002","title":"CC4-BY-NC-SA"},{"location":"about/htc/","text":"\u5982\u4f55\u8d21\u732e \u00b6","title":"Contrib"},{"location":"about/htc/#_1","text":"","title":"\u5982\u4f55\u8d21\u732e"},{"location":"algor/","text":"","title":"Overview"},{"location":"algor/ringbuf/","text":"\u9ad8\u6027\u80fd\u73af\u5f62\u961f\u5217\u53ca\u5176\u5b9e\u73b0 \u00b6 \u5728\u73b0\u4ee3\u7684\u5de5\u4e1a\u6027\u7684\u8f6f\u4ef6\u5f00\u53d1\u4e2d\uff0cSocket\u7f16\u7a0b\u53ef\u80fd\u662f\u4e0d\u53ef\u7f3a\u5c11\u7684\u901a\u4fe1\u65b9\u5f0f\u4e86\u3002\u65e0\u8bba\u4f60\u662f\u5728\u91c7\u7528\u4ec0\u4e48\u6837\u7684RPC\u901a\u4fe1\u673a\u5236\uff0c\u5f53\u5f00\u59cb\u8003\u8651\u6027\u80fd\u548c\u6548\u7387\u95ee\u9898\u65f6\uff0c\u4ed6\u4eec\u6700\u7ec8\u4f1a\u6f14\u53d8\u4e3a Socket \u7f16\u7a0b\u7684\u67d0\u79cd\u53d8\u4f53\u3002 \u800c\u9ad8\u541e\u5410\u91cf\u7684 TCP/UDP \u901a\u4fe1\u8bbe\u8ba1\u4e2d\uff0c\u6211\u4eec\u6700\u5e38\u4f1a\u7528\u5230\u7684\u5c31\u662f\u73af\u5f62\u961f\u5217\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u4e86\u3002 \u4e0b\u9762\u5206\u4e3a\u56db\u4e2a\u90e8\u5206\u4ecb\u7ecd\u4e00\u4e2a Golang \u7248\u672c\u7684\u73af\u5f62\u961f\u5217\u7684\u5b9e\u73b0\u7ec6\u8282\uff1a \u73af\u5f62\u961f\u5217\u7b80\u4ecb \u65e0\u9501\u7f16\u7a0b\u6982\u8981 \u5e76\u53d1\u7f16\u7a0b\u548c\u591a\u6838\u7f16\u7a0b\u6982\u8981 Golang\u73af\u5f62\u961f\u5217\u5b9e\u73b0 \u5177\u4f53\u7684\u5b9e\u73b0\u4ee3\u7801\u5728 https://github.com/hedzr/go-ringbuf \u4e2d\u53ef\u4ee5\u627e\u5230\u3002","title":"Overview"},{"location":"algor/ringbuf/#_1","text":"\u5728\u73b0\u4ee3\u7684\u5de5\u4e1a\u6027\u7684\u8f6f\u4ef6\u5f00\u53d1\u4e2d\uff0cSocket\u7f16\u7a0b\u53ef\u80fd\u662f\u4e0d\u53ef\u7f3a\u5c11\u7684\u901a\u4fe1\u65b9\u5f0f\u4e86\u3002\u65e0\u8bba\u4f60\u662f\u5728\u91c7\u7528\u4ec0\u4e48\u6837\u7684RPC\u901a\u4fe1\u673a\u5236\uff0c\u5f53\u5f00\u59cb\u8003\u8651\u6027\u80fd\u548c\u6548\u7387\u95ee\u9898\u65f6\uff0c\u4ed6\u4eec\u6700\u7ec8\u4f1a\u6f14\u53d8\u4e3a Socket \u7f16\u7a0b\u7684\u67d0\u79cd\u53d8\u4f53\u3002 \u800c\u9ad8\u541e\u5410\u91cf\u7684 TCP/UDP \u901a\u4fe1\u8bbe\u8ba1\u4e2d\uff0c\u6211\u4eec\u6700\u5e38\u4f1a\u7528\u5230\u7684\u5c31\u662f\u73af\u5f62\u961f\u5217\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u4e86\u3002 \u4e0b\u9762\u5206\u4e3a\u56db\u4e2a\u90e8\u5206\u4ecb\u7ecd\u4e00\u4e2a Golang \u7248\u672c\u7684\u73af\u5f62\u961f\u5217\u7684\u5b9e\u73b0\u7ec6\u8282\uff1a \u73af\u5f62\u961f\u5217\u7b80\u4ecb \u65e0\u9501\u7f16\u7a0b\u6982\u8981 \u5e76\u53d1\u7f16\u7a0b\u548c\u591a\u6838\u7f16\u7a0b\u6982\u8981 Golang\u73af\u5f62\u961f\u5217\u5b9e\u73b0 \u5177\u4f53\u7684\u5b9e\u73b0\u4ee3\u7801\u5728 https://github.com/hedzr/go-ringbuf \u4e2d\u53ef\u4ee5\u627e\u5230\u3002","title":"\u9ad8\u6027\u80fd\u73af\u5f62\u961f\u5217\u53ca\u5176\u5b9e\u73b0"},{"location":"algor/ringbuf/01.intro/","text":"\u7b80\u4ecb \u00b6 \u73af\u5f62\u961f\u5217\uff0cCircular Queue\uff0c\u6216\u8005\u4e5f\u88ab\u79f0\u4e3a Ring Buffer\uff0cCircular Buffer\uff0cCyclic Buffer \u7b49\u7b49\uff0c\u662f\u4e00\u79cd\u7528\u4e8e\u8868\u793a\u4e00\u4e2a\u56fa\u5b9a\u5c3a\u5bf8\u3001\u5934\u5c3e\u76f8\u8fde\u7684\u7f13\u51b2\u533a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u9002\u5408\u7f13\u5b58\u6570\u636e\u6d41\u3002\u5b83\u7684\u5b66\u672f\u4e0a\u7684\u7814\u8ba8\u4e0d\u5728\u672c\u6587\u7684\u5c55\u5f00\u8303\u56f4\u5185\uff0c\u7b80\u800c\u8a00\u4e4b\uff0c\u4e0d\u4f46\u662f\u901a\u4fe1\u5f00\u53d1\uff08Socket\uff0cTCP/IP\uff0cRPC\u5f00\u53d1\uff09\u4e2d\uff0c\u5728\u5185\u6838\u7684IPC\u4e2d\uff0c\u5728\u89c6\u9891\u97f3\u9891\u64ad\u653e\u4e2d\uff0c\u5728\u7c7b\u4f3c\u4e8e Map-Reduce \u7684\u5de5\u4f5c\u961f\u5217\u6392\u5217\u4e2d\uff0c\u5728\u5e7f\u6cdb\u7684\u5404\u79cd\u9700\u8981\u6570\u636e\u6d41\u6570\u636e\u7ed3\u6784\u8868\u793a\u7684\u573a\u666f\u4e2d\uff0c\u73af\u5f62\u961f\u5217\u5f80\u5f80\u662f\u4e00\u79cd\u6700\u4f73\u9009\u62e9\u3002 \u8868\u793a \u00b6 \u4e0b\u9762\u7684\u5185\u5bb9\u53c2\u8003\u4e86 Wiki \u76f8\u5173\u6761\u76ee 1 \uff0c\u5e76\u4e14\u6cbf\u7528\u4e86\u5176\u4e0a\u7684\u56fe\u793a\u3002 \u5728\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784\u8868\u793a\u4e2d\uff0c\u4e00\u4e2a\u73af\u5f62\u961f\u5217\u5f62\u5982\uff1a \u4f46\u5f88\u660e\u663e\uff0c\u8ba1\u7b97\u673a\u5185\u5b58\u662f\u7ebf\u6027\u800c\u975e\u662f\u73af\u72b6\u7684\uff0c\u56e0\u800c\u5f53\u73af\u5f62\u961f\u5217\u88ab\u5b9e\u73b0\u5230\u5185\u5b58\u4e2d\u65f6\uff0c\u901a\u5e38\u4f1a\u7528\u4e00\u4e2a\u8fde\u7eed\u7684\u5185\u5b58\u5757\u6765\u8868\u793a\uff0c\u540c\u65f6\u901a\u8fc7\u4f7f\u7528\u4e00\u5bf9\u989d\u5916\u7684\u6307\u9488\u6765\u6307\u793a\u9996\u3001\u5c3e\u4f4d\u7f6e\uff0c\u4ece\u800c\u5728\u903b\u8f91\u4e0a\u5c06\u5176\u5377\u66f2\u8d77\u6765\uff1a \u7279\u6027 \u00b6 \u9996\u5148\uff0c\u73af\u5f62\u961f\u5217\u662f\u6709\u754c\u7684\u3002\u73af\u5f62\u961f\u5217\u9002\u5408\u4e8e\u4e8b\u5148\u660e\u786e\u4e86\u7f13\u51b2\u533a\u7684\u6700\u5927\u5bb9\u91cf\u7684\u60c5\u5f62\u3002\u6269\u5c55\u4e00\u4e2a\u73af\u5f62\u961f\u5217\u7684\u5bb9\u91cf\uff0c\u9700\u8981\u642c\u79fb\u5176\u4e2d\u7684\u6570\u636e\u3002\u56e0\u6b64\u4e00\u4e2a\u7f13\u51b2\u533a\u5982\u679c\u9700\u8981\u7ecf\u5e38\u8c03\u6574\u5176\u5bb9\u91cf\uff0c\u7528\u94fe\u8868\u5b9e\u73b0\u66f4\u4e3a\u5408\u9002\u3002 \u5176\u6b21\uff0c\u73af\u5f62\u961f\u5217\u662f\u4e00\u79cd FIFO \u6570\u636e\u7ed3\u6784\u3002\u5b83\u548c\u666e\u901a FIFO \u961f\u5217\u6570\u636e\u7ed3\u6784\u7684\u4e0d\u540c\u5c31\u5728\u4e8e\u961f\u5c3e\u8fde\u63a5\u7740\u961f\u9996\uff0c\u5f53\u5165\u5217\u5143\u7d20\u4f4d\u4e8e\u961f\u5c3e\u65f6\uff0c\u8be5\u5143\u7d20\u5c06\u88ab\u56de\u7ed5\u5e76\u653e\u5728\u961f\u9996\u7684\u4f4d\u7f6e\uff0c\u4ece\u800c\u5b8c\u6210\u6709\u754c\u6027\u9650\u5b9a\u3002\u800c\u666e\u901a\u7684 FIFO \u961f\u5217\u603b\u662f\u589e\u957f\u961f\u5c3e\u4ee5\u5165\u5217\u65b0\u5143\u7d20\uff0c\u5e76\u4e0d\u9650\u5236\u961f\u5217\u7684\u6709\u6548\u957f\u5ea6\u3002 \u9ad8\u6027\u80fd \u00b6 \u73af\u5f62\u961f\u5217\u7684\u4e00\u4e2a\u6709\u7528\u7279\u6027\u662f\uff1a\u5f53\u4e00\u4e2a\u6570\u636e\u5143\u7d20\u88ab\u7528\u6389\u540e\uff0c\u5176\u4f59\u6570\u636e\u5143\u7d20\u4e0d\u9700\u8981\u79fb\u52a8\u5176\u5b58\u50a8\u4f4d\u7f6e\u3002 \u76f8\u53cd\uff0c\u4e00\u4e2a\u975e\u73af\u5f62\u961f\u5217\uff08\u4f8b\u5982\u4e00\u4e2a\u666e\u901a\u7684\u961f\u5217\uff09\u5728\u7528\u6389\u4e00\u4e2a\u6570\u636e\u5143\u7d20\u540e\uff0c\u5176\u4f59\u6570\u636e\u5143\u7d20\u9700\u8981\u5411\u524d\u642c\u79fb\uff08\u8fd9\u4e5f\u5e76\u975e\u5fc5\u987b\u5982\u6b64\uff0c\u94fe\u8868\u53ef\u4ee5\u907f\u514d\u6570\u636e\u642c\u79fb\u5e26\u6765\u7684\u8bfb\u5199\u6027\u80fd\u5dee\uff0c\u4f46\u4e5f\u4f1a\u8fdb\u4e00\u6b65\u884d\u751f\u51fa\u65b0\u7684\u95ee\u9898\u2014\u2014\u5176\u94fe\u8868\u6307\u9488\u64cd\u4f5c\u96be\u4ee5\u65e0\u9501\u5316\u5bfc\u81f4SMP\u573a\u666f\u4e2d\u8bfb\u5199\u6027\u80fd\u5dee\uff09\u3002 \u6b63\u662f\u56e0\u4e3a\u8fd9\u4e00\u7279\u6027\uff0c\u73af\u5f62\u961f\u5217\u5177\u6709\u5148\u5929\u4f18\u52bf\uff0c\u65e0\u9700\u6570\u636e\u642c\u79fb\uff08\u4e5f\u907f\u514d\u4e86\u52a8\u6001\u5185\u5b58\u5206\u914d\uff09\u3002\u800c\u7531\u4e8e\u73af\u5f62\u961f\u5217\u901a\u5e38\u4ec5\u4ec5\u9700\u8981\u56fa\u5b9a\u7684\u9996\u5c3e\u4e24\u4e2a\u6307\u9488\uff08\u4e00\u822c\u7684\u5b9e\u73b0\u4e2d\uff0c\u8fd9\u4e24\u4e2a\u6307\u9488\u5b9e\u9645\u4e0a\u90fd\u662f\u6570\u7ec4\u7684\u4e0b\u6807\u503c\uff09\u5373\u53ef\u8bbf\u95ee\uff0c\u56e0\u800c\u5f88\u5bb9\u6613\u89e3\u51b3 SMP \u573a\u666f\u4e2d\u7684\u65e0\u9501\u5316\u95ee\u9898\u3002 \u53ef\u8986\u76d6\u4e0e\u4e0d\u53ef\u8986\u76d6 \u00b6 \u73af\u5f62\u961f\u5217\u53ef\u4ee5\u662f\u53ef\u8986\u76d6\u7684\u3002 \u5199\u64cd\u4f5c\u8986\u76d6\u73af\u5f62\u961f\u5217\u4e2d\u672a\u88ab\u5904\u7406\u7684\u6570\u636e\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u662f\u5141\u8bb8\u7684\u3002\u7279\u522b\u662f\u5728\u591a\u5a92\u4f53\u5904\u7406\u65f6\u3002\u4f8b\u5982\uff0c\u97f3\u9891\u7684\u751f\u4ea7\u8005\u53ef\u4ee5\u8986\u76d6\u6389 \u58f0\u5361 \u5c1a\u672a\u6765\u5f97\u53ca\u5904\u7406\u7684\u97f3\u9891\u6570\u636e\u3002\u5f53\u7136\uff0c\u8fd9\u6837\u4e00\u6765\u7528\u6237\u542c\u89c9\u4e0a\u4f1a\u4e0d\u53ef\u907f\u514d\u5730\u611f\u53d7\u5230\u8df3\u5e27\u7684\u73b0\u8c61\uff0c\u5f77\u4f5b\u5728\u8bf4\uff0c\u8d44\u6e90\u4e0d\u591f\u7528\u554a\uff0c\u8981\u52a0\u5927\u554a\u3002 \u5982\u679c\u73af\u5f62\u961f\u5217\u4e0d\u88ab\u5141\u8bb8\u53ef\u8986\u76d6\uff0c\u5219\u5f53\u961f\u5217\u6ee1\u65f6\uff0c\u5165\u5217\u64cd\u4f5c\u53ef\u80fd\u5bfc\u81f4\u963b\u585e\u3002 \u7b97\u6cd5\u63cf\u8ff0 \u00b6 \u4e0b\u9762\u7684\u5185\u5bb9\u53c2\u8003\u4e86 Wiki \u76f8\u5173\u6761\u76ee 1 \uff0c\u5e76\u4e14\u6cbf\u7528\u4e86\u5176\u4e0a\u7684\u56fe\u793a\u3002 \u5de5\u4f5c\u8fc7\u7a0b \u00b6 \u4e00\u4e2a\u5706\u5f62\u7f13\u51b2\u533a\u6700\u521d\u4e3a\u7a7a\u5e76\u6709\u9884\u5b9a\u7684\u957f\u5ea6\u3002\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\u5177\u6709\u4e03\u4e2a\u5143\u7d20\u7a7a\u95f4\u7684\u5706\u5f62\u7f13\u51b2\u533a\uff0c\u5176\u4e2d\u5e95\u90e8\u7684\u5355\u7ebf\u4e0e\u7bad\u5934\u8868\u793a\u201c\u5934\u5c3e\u76f8\u63a5\u201d\u5f62\u6210\u4e00\u4e2a\u5706\u5f62\u5730\u5740\u7a7a\u95f4\uff1a \u5047\u5b9a1\u88ab\u5199\u5165\u7f13\u51b2\u533a\u4e2d\u90e8\uff08\u5bf9\u4e8e\u5706\u5f62\u7f13\u51b2\u533a\u6765\u8bf4\uff0c\u6700\u521d\u7684\u5199\u5165\u4f4d\u7f6e\u5728\u54ea\u91cc\u662f\u65e0\u5173\u7d27\u8981\u7684\uff09\uff1a \u518d\u5199\u51652\u4e2a\u5143\u7d20\uff0c\u5206\u522b\u662f2 & 3 \u2014 \u88ab\u8ffd\u52a0\u57281\u4e4b\u540e\uff1a \u5982\u679c\u4e24\u4e2a\u5143\u7d20\u88ab\u5904\u7406\uff0c\u90a3\u4e48\u662f\u7f13\u51b2\u533a\u4e2d\u6700\u8001\u7684\u4e24\u4e2a\u5143\u7d20\u88ab\u79fb\u9664\u3002\u5728\u672c\u4f8b\u4e2d\uff0c1 & 2\u88ab\u79fb\u9664\uff0c\u7f13\u51b2\u533a\u4e2d\u53ea\u5269\u4e0b3: \u5982\u679c\u7f13\u51b2\u533a\u4e2d\u67097\u4e2a\u5143\u7d20\uff0c\u5219\u662f\u6ee1\u7684\uff1a \u5982\u679c\u7f13\u51b2\u533a\u662f\u6ee1\u7684\uff0c\u53c8\u8981\u5199\u5165\u65b0\u7684\u6570\u636e\uff0c\u4e00\u79cd\u7b56\u7565\u662f\u8986\u76d6\u6389\u6700\u8001\u7684\u6570\u636e\u3002\u6b64\u4f8b\u4e2d\uff0c2\u4e2a\u65b0\u6570\u636e\u2014 A & B \u2014 \u5199\u5165\uff0c\u8986\u76d6\u4e863 & 4: \u4e5f\u53ef\u4ee5\u91c7\u53d6\u5176\u4ed6\u7b56\u7565\uff0c\u7981\u6b62\u8986\u76d6\u7f13\u51b2\u533a\u7684\u6570\u636e\uff0c\u91c7\u53d6\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u7801\u6216\u8005\u629b\u51fa \u5f02\u5e38 \u3002 \u6700\u7ec8\uff0c\u5982\u679c\u4ece\u7f13\u51b2\u533a\u4e2d\u79fb\u96642\u4e2a\u6570\u636e\uff0c\u4e0d\u662f3 & 4 \u800c\u662f 5 & 6 \u3002\u56e0\u4e3a A & B \u5df2\u7ecf\u8986\u76d6\u4e863 & 4\uff1a \u5b9e\u73b0\u65b9\u6848 \u00b6 \u7531\u4e8e\u8ba1\u7b97\u673a\u5185\u5b58\u662f\u7ebf\u6027\u5730\u5740\u7a7a\u95f4\uff0c\u56e0\u6b64\u5706\u5f62\u7f13\u51b2\u533a\u9700\u8981\u7279\u522b\u7684\u8bbe\u8ba1\u624d\u53ef\u4ee5\u4ece\u903b\u8f91\u4e0a\u5b9e\u73b0\u3002 \u8bfb\u6307\u9488\u4e0e\u5199\u6307\u9488 \u00b6 \u4e00\u822c\u7684\uff0c\u5706\u5f62\u7f13\u51b2\u533a\u9700\u89814\u4e2a\u6307\u9488\uff1a \u5728\u5185\u5b58\u4e2d\u5b9e\u9645\u5f00\u59cb\u4f4d\u7f6e\uff1b \u5728\u5185\u5b58\u4e2d\u5b9e\u9645\u7ed3\u675f\u4f4d\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u7528\u7f13\u51b2\u533a\u957f\u5ea6\u4ee3\u66ff\uff1b \u5b58\u50a8\u5728\u7f13\u51b2\u533a\u4e2d\u7684\u6709\u6548\u6570\u636e\u7684\u5f00\u59cb\u4f4d\u7f6e\uff08\u8bfb\u6307\u9488\uff09\uff1b \u5b58\u50a8\u5728\u7f13\u51b2\u533a\u4e2d\u7684\u6709\u6548\u6570\u636e\u7684\u7ed3\u5c3e\u4f4d\u7f6e\uff08\u5199\u6307\u9488\uff09\u3002 \u8bfb\u6307\u9488\u3001\u5199\u6307\u9488\u53ef\u4ee5\u7528\u6574\u578b\u503c\u6765\u8868\u793a\u3002 \u4e0b\u4f8b\u4e3a\u4e00\u4e2a\u672a\u6ee1\u7684\u7f13\u51b2\u533a\u7684\u8bfb\u5199\u6307\u9488\uff1a \u4e0b\u4f8b\u4e3a\u4e00\u4e2a\u6ee1\u7684\u7f13\u51b2\u533a\u7684\u8bfb\u5199\u6307\u9488\uff1a \u533a\u5206\u7f13\u51b2\u533a\u6ee1\u6216\u8005\u7a7a \u00b6 \u7f13\u51b2\u533a\u662f\u6ee1\u3001\u6216\u662f\u7a7a\uff0c\u90fd\u6709\u53ef\u80fd\u51fa\u73b0\u8bfb\u6307\u9488\u4e0e\u5199\u6307\u9488\u6307\u5411\u540c\u4e00\u4f4d\u7f6e\uff1a \u6709\u591a\u79cd\u7b56\u7565\u7528\u4e8e\u68c0\u6d4b\u7f13\u51b2\u533a\u662f\u6ee1\u3001\u6216\u662f\u7a7a. \u603b\u662f\u4fdd\u6301\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u4e3a\u7a7a \u00b6 \u7f13\u51b2\u533a\u4e2d\u603b\u662f\u6709\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u4fdd\u6301\u672a\u4f7f\u7528\u72b6\u6001\u3002\u7f13\u51b2\u533a\u6700\u591a\u5b58\u5165 (size-1) \u4e2a\u6570\u636e\u3002\u5982\u679c\u8bfb\u5199\u6307\u9488\u6307\u5411\u540c\u4e00\u4f4d\u7f6e\uff0c\u5219\u7f13\u51b2\u533a\u4e3a\u7a7a\u3002\u5982\u679c\u5199\u6307\u9488\u4f4d\u4e8e\u8bfb\u6307\u9488\u7684\u76f8\u90bb\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u7f13\u51b2\u533a\u4e3a\u6ee1\u3002\u8fd9\u79cd\u7b56\u7565\u7684\u4f18\u70b9\u662f\u7b80\u5355\u3001\u7c97\u66b4\uff1b\u7f3a\u70b9\u662f\u8bed\u4e49\u4e0a\u5b9e\u9645\u53ef\u5b58\u6570\u636e\u91cf\u4e0e\u7f13\u51b2\u533a\u5bb9\u91cf\u4e0d\u4e00\u81f4\uff0c\u6d4b\u8bd5\u7f13\u51b2\u533a\u662f\u5426\u6ee1\u9700\u8981\u505a\u53d6\u4f59\u6570\u8ba1\u7b97\u3002 \u4f7f\u7528\u6570\u636e\u8ba1\u6570 \u00b6 \u8fd9\u79cd\u7b56\u7565\u4e0d\u4f7f\u7528\u663e\u5f0f\u7684\u5199\u6307\u9488\uff0c\u800c\u662f\u4fdd\u6301\u7740\u7f13\u51b2\u533a\u5185\u5b58\u50a8\u7684\u6570\u636e\u7684\u8ba1\u6570\u3002\u56e0\u6b64\u6d4b\u8bd5\u7f13\u51b2\u533a\u662f\u7a7a\u662f\u6ee1\u975e\u5e38\u7b80\u5355\uff1b\u5bf9\u6027\u80fd\u5f71\u54cd\u53ef\u4ee5\u5ffd\u7565\u3002\u7f3a\u70b9\u662f\u8bfb\u5199\u64cd\u4f5c\u90fd\u9700\u8981\u4fee\u6539\u8fd9\u4e2a\u5b58\u50a8\u6570\u636e\u8ba1\u6570\uff0c\u5bf9\u4e8e \u591a\u7ebf\u7a0b \u8bbf\u95ee\u7f13\u51b2\u533a\u9700\u8981 \u5e76\u53d1\u63a7\u5236 \u3002 \u955c\u50cf\u6307\u793a\u4f4d \u00b6 \u7f13\u51b2\u533a\u7684\u957f\u5ea6\u5982\u679c\u662fn\uff0c\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u5219\u4e3a0\u81f3n-1\uff1b\u90a3\u4e48\uff0c\u89c4\u5b9an\u81f32n-1\u4e3a\u955c\u50cf\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u3002\u672c\u7b56\u7565\u89c4\u5b9a\u8bfb\u5199\u6307\u9488\u7684\u5730\u5740\u7a7a\u95f4\u4e3a0\u81f32n-1\uff0c\u5176\u4e2d\u4f4e\u534a\u90e8\u5206\u5bf9\u5e94\u4e8e\u5e38\u89c4\u7684\u903b\u8f91\u5730\u5740\u7a7a\u95f4\uff0c\u9ad8\u534a\u90e8\u5206\u5bf9\u5e94\u4e8e\u955c\u50cf\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u3002\u5f53\u6307\u9488\u503c\u5927\u4e8e\u7b49\u4e8e2n\u65f6\uff0c\u4f7f\u5176\u6298\u8fd4\uff08wrapped\uff09\u5230ptr-2n\u3002\u4f7f\u7528\u4e00\u4f4d\u8868\u793a\u5199\u6307\u9488\u6216\u8bfb\u6307\u9488\u662f\u5426\u8fdb\u5165\u4e86\u865a\u62df\u7684\u955c\u50cf\u5b58\u50a8\u533a\uff1a\u7f6e\u4f4d\u8868\u793a\u8fdb\u5165\uff0c\u4e0d\u7f6e\u4f4d\u8868\u793a\u6ca1\u8fdb\u5165\u8fd8\u5728\u57fa\u672c\u5b58\u50a8\u533a\u3002 \u5728\u8bfb\u5199\u6307\u9488\u7684\u503c\u76f8\u540c\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4e8c\u8005\u7684\u6307\u793a\u4f4d\u76f8\u540c\uff0c\u8bf4\u660e\u7f13\u51b2\u533a\u4e3a\u7a7a\uff1b\u5982\u679c\u4e8c\u8005\u7684\u6307\u793a\u4f4d\u4e0d\u540c\uff0c\u8bf4\u660e\u7f13\u51b2\u533a\u4e3a\u6ee1\u3002\u8fd9\u79cd\u65b9\u6cd5\u4f18\u70b9\u662f\u6d4b\u8bd5\u7f13\u51b2\u533a\u6ee1/\u7a7a\u5f88\u7b80\u5355\uff1b\u4e0d\u9700\u8981\u505a\u53d6\u4f59\u6570\u64cd\u4f5c\uff1b\u8bfb\u5199\u7ebf\u7a0b\u53ef\u4ee5\u5206\u522b\u8bbe\u8ba1\u4e13\u7528\u7b97\u6cd5\u7b56\u7565\uff0c\u80fd\u5b9e\u73b0\u7cbe\u81f4\u7684\u5e76\u53d1\u63a7\u5236\u3002 \u7f3a\u70b9\u662f\u8bfb\u5199\u6307\u9488\u5404\u9700\u8981\u989d\u5916\u7684\u4e00\u4f4d\u4f5c\u4e3a\u6307\u793a\u4f4d\u3002 \u5982\u679c\u7f13\u51b2\u533a\u957f\u5ea6\u662f2\u7684 \u5e42 \uff0c\u5219\u672c\u65b9\u6cd5\u53ef\u4ee5\u7701\u7565\u955c\u50cf\u6307\u793a\u4f4d\u3002\u5982\u679c\u8bfb\u5199\u6307\u9488\u7684\u503c\u76f8\u7b49\uff0c\u5219\u7f13\u51b2\u533a\u4e3a\u7a7a\uff1b\u5982\u679c\u8bfb\u5199\u6307\u9488\u76f8\u5deen\uff0c\u5219\u7f13\u51b2\u533a\u4e3a\u6ee1\uff0c\u8fd9\u53ef\u4ee5\u7528\u6761\u4ef6\u8868\u8fbe\u5f0f\uff08\u5199\u6307\u9488 == (\u8bfb\u6307\u9488 \u5f02\u6216 \u7f13\u51b2\u533a\u957f\u5ea6)\uff09\u6765\u5224\u65ad\u3002 // This approach adds one bit to end and start pointers // Circular buffer object typedef struct { int size ; // maximum number of elements int start ; // index of oldest element int end ; // index at which to write new element ElemType * elems ; // vector of elements } CircularBuffer ; void cbInit ( CircularBuffer * cb , int size ) { cb -> size = size ; cb -> start = 0 ; cb -> end = 0 ; cb -> elems = ( ElemType * ) calloc ( cb -> size , sizeof ( ElemType )); } void cbPrint ( CircularBuffer * cb ) { printf ( \"size = 0x%x, start = %d, end = %d \\n \" , cb -> size , cb -> start , cb -> end ); } int cbIsFull ( CircularBuffer * cb ) { return cb -> end == ( cb -> start ^ cb -> size ); // This inverts the most significant bit of start before comparison } int cbIsEmpty ( CircularBuffer * cb ) { return cb -> end == cb -> start ; } int cbIncr ( CircularBuffer * cb , int p ) { return ( p + 1 ) & ( 2 * cb -> size - 1 ); // start and end pointers incrementation is done modulo 2*size } void cbWrite ( CircularBuffer * cb , ElemType * elem ) { cb -> elems [ cb -> end & ( cb -> size - 1 )] = * elem ; if ( cbIsFull ( cb )) // full, overwrite moves start pointer cb -> start = cbIncr ( cb , cb -> start ); cb -> end = cbIncr ( cb , cb -> end ); } void cbRead ( CircularBuffer * cb , ElemType * elem ) { * elem = cb -> elems [ cb -> start & ( cb -> size - 1 )]; cb -> start = cbIncr ( cb , cb -> start ); } \u8bfb/\u5199 \u8ba1\u6570 \u00b6 \u7528\u4e24\u4e2a\u6709\u7b26\u53f7\u6574\u578b\u53d8\u91cf\u5206\u522b\u4fdd\u5b58\u5199\u5165\u3001\u8bfb\u51fa\u7f13\u51b2\u533a\u7684\u6570\u636e\u6570\u91cf\u3002\u5176\u5dee\u503c\u5c31\u662f\u7f13\u51b2\u533a\u4e2d\u5c1a\u672a\u88ab\u5904\u7406\u7684\u6709\u6548\u6570\u636e\u7684\u6570\u91cf\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u4f18\u70b9\u662f\u8bfb\u7ebf\u7a0b\u3001\u5199\u7ebf\u7a0b\u4e92\u4e0d\u5e72\u6270\uff1b\u7f3a\u70b9\u662f\u9700\u8981\u989d\u5916\u4e24\u4e2a\u53d8\u91cf\u3002 \u8bb0\u5f55\u6700\u540e\u7684\u64cd\u4f5c \u00b6 \u4f7f\u7528\u4e00\u4f4d\u8bb0\u5f55\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u662f\u8bfb\u8fd8\u662f\u5199\u3002\u8bfb\u5199\u6307\u9488\u503c\u76f8\u7b49\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u4e3a\u5199\u5165\uff0c\u90a3\u4e48\u7f13\u51b2\u533a\u662f\u6ee1\u7684\uff1b\u5982\u679c\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u4e3a\u8bfb\u51fa\uff0c\u90a3\u4e48\u7f13\u51b2\u533a\u662f\u7a7a\u3002 \u8fd9\u79cd\u7b56\u7565\u7684\u7f3a\u70b9\u662f\u8bfb\u5199\u64cd\u4f5c\u5171\u4eab\u4e00\u4e2a\u6807\u5fd7\u4f4d\uff0c\u591a\u7ebf\u7a0b\u65f6\u9700\u8981\u5e76\u53d1\u63a7\u5236\u3002 \u76f8\u5173\u5b9e\u73b0 \u00b6 POSIX\u4f18\u5316\u5b9e\u73b0 \u00b6 \u4e0b\u9762\u662f\u4e00\u4e2a\u9002\u5408\u4e8e Linux \u7684\u5b9e\u73b0\uff0c\u540c\u65f6\u4e5f\u5177\u5907 POSIX \u53ef\u79fb\u690d\u6027\uff1a #include <sys/mman.h> #include <stdlib.h> #include <unistd.h> #define report_exceptional_condition() abort () struct ring_buffer { void * address ; unsigned long count_bytes ; unsigned long write_offset_bytes ; unsigned long read_offset_bytes ; }; // Warning order should be at least 12 for Linux void ring_buffer_create ( struct ring_buffer * buffer , unsigned long order ) { char path [] = \"/dev/shm/ring-buffer-XXXXXX\" ; int file_descriptor ; void * address ; int status ; file_descriptor = mkstemp ( path ); if ( file_descriptor < 0 ) report_exceptional_condition (); status = unlink ( path ); if ( status ) report_exceptional_condition (); buffer -> count_bytes = 1UL << order ; buffer -> write_offset_bytes = 0 ; buffer -> read_offset_bytes = 0 ; status = ftruncate ( file_descriptor , buffer -> count_bytes ); if ( status ) report_exceptional_condition (); buffer -> address = mmap ( NULL , buffer -> count_bytes << 1 , PROT_NONE , MAP_ANONYMOUS | MAP_PRIVATE , - 1 , 0 ); if ( buffer -> address == MAP_FAILED ) report_exceptional_condition (); address = mmap ( buffer -> address , buffer -> count_bytes , PROT_READ | PROT_WRITE , MAP_FIXED | MAP_SHARED , file_descriptor , 0 ); if ( address != buffer -> address ) report_exceptional_condition (); address = mmap ( buffer -> address + buffer -> count_bytes , buffer -> count_bytes , PROT_READ | PROT_WRITE , MAP_FIXED | MAP_SHARED , file_descriptor , 0 ); if ( address != buffer -> address + buffer -> count_bytes ) report_exceptional_condition (); status = close ( file_descriptor ); if ( status ) report_exceptional_condition (); } void ring_buffer_free ( struct ring_buffer * buffer ) { int status ; status = munmap ( buffer -> address , buffer -> count_bytes << 1 ); if ( status ) report_exceptional_condition (); } void * ring_buffer_write_address ( struct ring_buffer * buffer ) { // void pointer arithmetic is a constraint violation. return buffer -> address + buffer -> write_offset_bytes ; } void ring_buffer_write_advance ( struct ring_buffer * buffer , unsigned long count_bytes ) { buffer -> write_offset_bytes += count_bytes ; } void * ring_buffer_read_address ( struct ring_buffer * buffer ) { return buffer -> address + buffer -> read_offset_bytes ; } void ring_buffer_read_advance ( struct ring_buffer * buffer , unsigned long count_bytes ) { buffer -> read_offset_bytes += count_bytes ; if ( buffer -> read_offset_bytes >= buffer -> count_bytes ) { // \u5982\u679c\u8bfb\u6307\u9488\u5927\u4e8e\u7b49\u4e8e\u7f13\u51b2\u533a\u957f\u5ea6\uff0c\u90a3\u4e9b\u8bfb\u5199\u6307\u9488\u540c\u65f6\u6298\u8fd4\u56de[0, buffer_size]\u8303\u56f4\u5185 buffer -> read_offset_bytes -= buffer -> count_bytes ; buffer -> write_offset_bytes -= buffer -> count_bytes ; } } unsigned long ring_buffer_count_bytes ( struct ring_buffer * buffer ) { return buffer -> write_offset_bytes - buffer -> read_offset_bytes ; } unsigned long ring_buffer_count_free_bytes ( struct ring_buffer * buffer ) { return buffer -> count_bytes - ring_buffer_count_bytes ( buffer ); } void ring_buffer_clear ( struct ring_buffer * buffer ) { buffer -> write_offset_bytes = 0 ; buffer -> read_offset_bytes = 0 ; } /* Note, that initial anonymous mmap() can be avoided - after initial mmap() for descriptor fd, you can try mmap() with hinted address as (buffer->address + buffer->count_bytes) and if it fails - another one with hinted address as (buffer->address - buffer->count_bytes). Make sure MAP_FIXED is not used in such case, as under certain situations it could end with segfault. The advantage of such approach is, that it avoids requirement to map twice the amount you need initially (especially useful e.g. if you want to use hugetlbfs and the allowed amount is limited) and in context of gcc/glibc - you can avoid certain feature macros (MAP_ANONYMOUS usually requires one of: _BSD_SOURCE, _SVID_SOURCE or _GNU_SOURCE). */ \u8fd9\u4e00\u5b9e\u73b0\u5c5e\u4e8e\u6559\u79d1\u4e66\u5f0f\u6837\uff0c\u4f46\u4e0d\u5e94\u88ab\u7528\u4e8e\u5b9e\u9645\u5de5\u4f5c\u573a\u666f\u4e2d\uff0c\u539f\u56e0\u5728\u4e8e\u4ee5\u4e0b\u51e0\u70b9\uff1a \u4f7f\u7528 mmap \u7279\u6027\uff0c\u8fd9\u53ef\u80fd\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u65b9\u5f0f\uff1ammap \u5e26\u6709\u989d\u5916\u7684 kernel api \u8c03\u7528\u5f00\u9500\uff0c\u53ef\u80fd\u4e0d\u662f\u6700\u4f73\u9009\u62e9\uff0c\u9664\u975e\u4f60\u9700\u8981\u8fdb\u7a0b\u95f4\u901a\u4fe1\u8fd9\u4e00\u73af\u5f62\u961f\u5217\u3002 \u64cd\u4f5c\u53ea\u80fd\u5728\u5355\u7ebf\u7a0b\u4e2d\uff0c\u5426\u5219\u53ef\u80fd\u6709\u6570\u636e\u7ade\u4e89\u95ee\u9898\u3002 \u00b6 Linux\u5185\u6838\u7684kfifo \u00b6 \u5728Linux\u5185\u6838\u6587\u4ef6 kfifo.h \u548c kfifo.c \u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa\u5706\u5f62\u7f13\u51b2\u533a\u5b9e\u73b0\u3002\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8bfb\u7ebf\u7a0b\u3001\u4e00\u4e2a\u5199\u7ebf\u7a0b\uff0c\u4e8c\u8005\u6ca1\u6709\u5171\u4eab\u7684\u88ab\u4fee\u6539\u7684\u63a7\u5236\u53d8\u91cf\uff0c\u90a3\u4e48\u53ef\u4ee5\u8bc1\u660e\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981 \u5e76\u53d1\u63a7\u5236 \u3002kfifo\u5c31\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u3002kfifo\u8981\u6c42\u7f13\u51b2\u533a\u957f\u5ea6\u5fc5\u987b\u4e3a2\u7684\u5e42\u3002\u8bfb\u3001\u5199\u6307\u9488\u5206\u522b\u662f\u65e0\u7b26\u53f7\u6574\u578b\u53d8\u91cf\u3002\u628a\u8bfb\u5199\u6307\u9488\u53d8\u6362\u4e3a\u7f13\u51b2\u533a\u5185\u7684\u7d22\u5f15\u503c\uff0c\u4ec5\u9700\u8981\u201c\u6309\u4f4d\u4e0e\u201d\u64cd\u4f5c\uff1a\uff08\u6307\u9488\u503c \u6309\u4f4d\u4e0e \uff08\u7f13\u51b2\u533a\u957f\u5ea6-1\uff09\uff09\u3002\u8fd9\u907f\u514d\u4e86\u8ba1\u7b97\u4ee3\u4ef7\u9ad8\u6602\u7684\u201c\u6c42\u4f59\u201d\u64cd\u4f5c\u3002\u4e14\u4e0b\u8ff0\u5173\u7cfb\u603b\u662f\u6210\u7acb\uff1a \u8bfb\u6307\u9488 + \u7f13\u51b2\u533a\u5b58\u50a8\u7684\u6570\u636e\u957f\u5ea6 == \u5199\u6307\u9488 \u5373\u4f7f\u5728\u5199\u6307\u9488\u8fbe\u5230\u4e86\u65e0\u7b26\u53f7\u6574\u578b\u7684\u4e0a\u754c\uff0c\u4e0a\u6ea2\u51fa\u540e\u5199\u6307\u9488\u7684\u503c\u5c0f\u4e8e\u8bfb\u6307\u9488\u7684\u503c\uff0c\u4e0a\u8ff0\u5173\u7cfb\u4ecd\u7136\u4fdd\u6301\u6210\u7acb\uff08\u8fd9\u662f\u56e0\u4e3a\u65e0\u7b26\u53f7\u6574\u578b\u52a0\u6cd5\u7684\u6027\u8d28\uff09\u3002 kfifo\u7684\u5199\u64cd\u4f5c\uff0c\u9996\u5148\u8ba1\u7b97\u7f13\u51b2\u533a\u4e2d\u5f53\u524d\u53ef\u5199\u5165\u5b58\u50a8\u7a7a\u95f4\u7684\u6570\u636e\u957f\u5ea6\uff1a len = min{\u5f85\u5199\u5165\u6570\u636e\u957f\u5ea6, \u7f13\u51b2\u533a\u957f\u5ea6 - \uff08\u5199\u6307\u9488 - \u8bfb\u6307\u9488\uff09} \u7136\u540e\uff0c\u5206\u4e24\u6bb5\u5199\u5165\u6570\u636e\u3002\u7b2c\u4e00\u6bb5\u662f\u4ece\u5199\u6307\u9488\u5f00\u59cb\u5411\u7f13\u51b2\u533a\u672b\u5c3e\u65b9\u5411\uff1b\u7b2c\u4e8c\u6bb5\u662f\u4ece\u7f13\u51b2\u533a\u8d77\u59cb\u5904\u5199\u5165\u4f59\u4e0b\u7684\u53ef\u5199\u5165\u6570\u636e\uff0c\u8fd9\u90e8\u5206\u53ef\u80fd\u6570\u636e\u957f\u5ea6\u4e3a0\u5373\u5e76\u65e0\u5b9e\u9645\u6570\u636e\u5199\u5165\u3002 \u74b0\u5f62\u7de9\u885d\u5340 - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66 \u21a9 \u21a9","title":"RingBuf \u7b80\u4ecb"},{"location":"algor/ringbuf/01.intro/#_1","text":"\u73af\u5f62\u961f\u5217\uff0cCircular Queue\uff0c\u6216\u8005\u4e5f\u88ab\u79f0\u4e3a Ring Buffer\uff0cCircular Buffer\uff0cCyclic Buffer \u7b49\u7b49\uff0c\u662f\u4e00\u79cd\u7528\u4e8e\u8868\u793a\u4e00\u4e2a\u56fa\u5b9a\u5c3a\u5bf8\u3001\u5934\u5c3e\u76f8\u8fde\u7684\u7f13\u51b2\u533a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u9002\u5408\u7f13\u5b58\u6570\u636e\u6d41\u3002\u5b83\u7684\u5b66\u672f\u4e0a\u7684\u7814\u8ba8\u4e0d\u5728\u672c\u6587\u7684\u5c55\u5f00\u8303\u56f4\u5185\uff0c\u7b80\u800c\u8a00\u4e4b\uff0c\u4e0d\u4f46\u662f\u901a\u4fe1\u5f00\u53d1\uff08Socket\uff0cTCP/IP\uff0cRPC\u5f00\u53d1\uff09\u4e2d\uff0c\u5728\u5185\u6838\u7684IPC\u4e2d\uff0c\u5728\u89c6\u9891\u97f3\u9891\u64ad\u653e\u4e2d\uff0c\u5728\u7c7b\u4f3c\u4e8e Map-Reduce \u7684\u5de5\u4f5c\u961f\u5217\u6392\u5217\u4e2d\uff0c\u5728\u5e7f\u6cdb\u7684\u5404\u79cd\u9700\u8981\u6570\u636e\u6d41\u6570\u636e\u7ed3\u6784\u8868\u793a\u7684\u573a\u666f\u4e2d\uff0c\u73af\u5f62\u961f\u5217\u5f80\u5f80\u662f\u4e00\u79cd\u6700\u4f73\u9009\u62e9\u3002","title":"\u7b80\u4ecb"},{"location":"algor/ringbuf/01.intro/#_2","text":"\u4e0b\u9762\u7684\u5185\u5bb9\u53c2\u8003\u4e86 Wiki \u76f8\u5173\u6761\u76ee 1 \uff0c\u5e76\u4e14\u6cbf\u7528\u4e86\u5176\u4e0a\u7684\u56fe\u793a\u3002 \u5728\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784\u8868\u793a\u4e2d\uff0c\u4e00\u4e2a\u73af\u5f62\u961f\u5217\u5f62\u5982\uff1a \u4f46\u5f88\u660e\u663e\uff0c\u8ba1\u7b97\u673a\u5185\u5b58\u662f\u7ebf\u6027\u800c\u975e\u662f\u73af\u72b6\u7684\uff0c\u56e0\u800c\u5f53\u73af\u5f62\u961f\u5217\u88ab\u5b9e\u73b0\u5230\u5185\u5b58\u4e2d\u65f6\uff0c\u901a\u5e38\u4f1a\u7528\u4e00\u4e2a\u8fde\u7eed\u7684\u5185\u5b58\u5757\u6765\u8868\u793a\uff0c\u540c\u65f6\u901a\u8fc7\u4f7f\u7528\u4e00\u5bf9\u989d\u5916\u7684\u6307\u9488\u6765\u6307\u793a\u9996\u3001\u5c3e\u4f4d\u7f6e\uff0c\u4ece\u800c\u5728\u903b\u8f91\u4e0a\u5c06\u5176\u5377\u66f2\u8d77\u6765\uff1a","title":"\u8868\u793a"},{"location":"algor/ringbuf/01.intro/#_3","text":"\u9996\u5148\uff0c\u73af\u5f62\u961f\u5217\u662f\u6709\u754c\u7684\u3002\u73af\u5f62\u961f\u5217\u9002\u5408\u4e8e\u4e8b\u5148\u660e\u786e\u4e86\u7f13\u51b2\u533a\u7684\u6700\u5927\u5bb9\u91cf\u7684\u60c5\u5f62\u3002\u6269\u5c55\u4e00\u4e2a\u73af\u5f62\u961f\u5217\u7684\u5bb9\u91cf\uff0c\u9700\u8981\u642c\u79fb\u5176\u4e2d\u7684\u6570\u636e\u3002\u56e0\u6b64\u4e00\u4e2a\u7f13\u51b2\u533a\u5982\u679c\u9700\u8981\u7ecf\u5e38\u8c03\u6574\u5176\u5bb9\u91cf\uff0c\u7528\u94fe\u8868\u5b9e\u73b0\u66f4\u4e3a\u5408\u9002\u3002 \u5176\u6b21\uff0c\u73af\u5f62\u961f\u5217\u662f\u4e00\u79cd FIFO \u6570\u636e\u7ed3\u6784\u3002\u5b83\u548c\u666e\u901a FIFO \u961f\u5217\u6570\u636e\u7ed3\u6784\u7684\u4e0d\u540c\u5c31\u5728\u4e8e\u961f\u5c3e\u8fde\u63a5\u7740\u961f\u9996\uff0c\u5f53\u5165\u5217\u5143\u7d20\u4f4d\u4e8e\u961f\u5c3e\u65f6\uff0c\u8be5\u5143\u7d20\u5c06\u88ab\u56de\u7ed5\u5e76\u653e\u5728\u961f\u9996\u7684\u4f4d\u7f6e\uff0c\u4ece\u800c\u5b8c\u6210\u6709\u754c\u6027\u9650\u5b9a\u3002\u800c\u666e\u901a\u7684 FIFO \u961f\u5217\u603b\u662f\u589e\u957f\u961f\u5c3e\u4ee5\u5165\u5217\u65b0\u5143\u7d20\uff0c\u5e76\u4e0d\u9650\u5236\u961f\u5217\u7684\u6709\u6548\u957f\u5ea6\u3002","title":"\u7279\u6027"},{"location":"algor/ringbuf/01.intro/#_4","text":"\u73af\u5f62\u961f\u5217\u7684\u4e00\u4e2a\u6709\u7528\u7279\u6027\u662f\uff1a\u5f53\u4e00\u4e2a\u6570\u636e\u5143\u7d20\u88ab\u7528\u6389\u540e\uff0c\u5176\u4f59\u6570\u636e\u5143\u7d20\u4e0d\u9700\u8981\u79fb\u52a8\u5176\u5b58\u50a8\u4f4d\u7f6e\u3002 \u76f8\u53cd\uff0c\u4e00\u4e2a\u975e\u73af\u5f62\u961f\u5217\uff08\u4f8b\u5982\u4e00\u4e2a\u666e\u901a\u7684\u961f\u5217\uff09\u5728\u7528\u6389\u4e00\u4e2a\u6570\u636e\u5143\u7d20\u540e\uff0c\u5176\u4f59\u6570\u636e\u5143\u7d20\u9700\u8981\u5411\u524d\u642c\u79fb\uff08\u8fd9\u4e5f\u5e76\u975e\u5fc5\u987b\u5982\u6b64\uff0c\u94fe\u8868\u53ef\u4ee5\u907f\u514d\u6570\u636e\u642c\u79fb\u5e26\u6765\u7684\u8bfb\u5199\u6027\u80fd\u5dee\uff0c\u4f46\u4e5f\u4f1a\u8fdb\u4e00\u6b65\u884d\u751f\u51fa\u65b0\u7684\u95ee\u9898\u2014\u2014\u5176\u94fe\u8868\u6307\u9488\u64cd\u4f5c\u96be\u4ee5\u65e0\u9501\u5316\u5bfc\u81f4SMP\u573a\u666f\u4e2d\u8bfb\u5199\u6027\u80fd\u5dee\uff09\u3002 \u6b63\u662f\u56e0\u4e3a\u8fd9\u4e00\u7279\u6027\uff0c\u73af\u5f62\u961f\u5217\u5177\u6709\u5148\u5929\u4f18\u52bf\uff0c\u65e0\u9700\u6570\u636e\u642c\u79fb\uff08\u4e5f\u907f\u514d\u4e86\u52a8\u6001\u5185\u5b58\u5206\u914d\uff09\u3002\u800c\u7531\u4e8e\u73af\u5f62\u961f\u5217\u901a\u5e38\u4ec5\u4ec5\u9700\u8981\u56fa\u5b9a\u7684\u9996\u5c3e\u4e24\u4e2a\u6307\u9488\uff08\u4e00\u822c\u7684\u5b9e\u73b0\u4e2d\uff0c\u8fd9\u4e24\u4e2a\u6307\u9488\u5b9e\u9645\u4e0a\u90fd\u662f\u6570\u7ec4\u7684\u4e0b\u6807\u503c\uff09\u5373\u53ef\u8bbf\u95ee\uff0c\u56e0\u800c\u5f88\u5bb9\u6613\u89e3\u51b3 SMP \u573a\u666f\u4e2d\u7684\u65e0\u9501\u5316\u95ee\u9898\u3002","title":"\u9ad8\u6027\u80fd"},{"location":"algor/ringbuf/01.intro/#_5","text":"\u73af\u5f62\u961f\u5217\u53ef\u4ee5\u662f\u53ef\u8986\u76d6\u7684\u3002 \u5199\u64cd\u4f5c\u8986\u76d6\u73af\u5f62\u961f\u5217\u4e2d\u672a\u88ab\u5904\u7406\u7684\u6570\u636e\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u662f\u5141\u8bb8\u7684\u3002\u7279\u522b\u662f\u5728\u591a\u5a92\u4f53\u5904\u7406\u65f6\u3002\u4f8b\u5982\uff0c\u97f3\u9891\u7684\u751f\u4ea7\u8005\u53ef\u4ee5\u8986\u76d6\u6389 \u58f0\u5361 \u5c1a\u672a\u6765\u5f97\u53ca\u5904\u7406\u7684\u97f3\u9891\u6570\u636e\u3002\u5f53\u7136\uff0c\u8fd9\u6837\u4e00\u6765\u7528\u6237\u542c\u89c9\u4e0a\u4f1a\u4e0d\u53ef\u907f\u514d\u5730\u611f\u53d7\u5230\u8df3\u5e27\u7684\u73b0\u8c61\uff0c\u5f77\u4f5b\u5728\u8bf4\uff0c\u8d44\u6e90\u4e0d\u591f\u7528\u554a\uff0c\u8981\u52a0\u5927\u554a\u3002 \u5982\u679c\u73af\u5f62\u961f\u5217\u4e0d\u88ab\u5141\u8bb8\u53ef\u8986\u76d6\uff0c\u5219\u5f53\u961f\u5217\u6ee1\u65f6\uff0c\u5165\u5217\u64cd\u4f5c\u53ef\u80fd\u5bfc\u81f4\u963b\u585e\u3002","title":"\u53ef\u8986\u76d6\u4e0e\u4e0d\u53ef\u8986\u76d6"},{"location":"algor/ringbuf/01.intro/#_6","text":"\u4e0b\u9762\u7684\u5185\u5bb9\u53c2\u8003\u4e86 Wiki \u76f8\u5173\u6761\u76ee 1 \uff0c\u5e76\u4e14\u6cbf\u7528\u4e86\u5176\u4e0a\u7684\u56fe\u793a\u3002","title":"\u7b97\u6cd5\u63cf\u8ff0"},{"location":"algor/ringbuf/01.intro/#_7","text":"\u4e00\u4e2a\u5706\u5f62\u7f13\u51b2\u533a\u6700\u521d\u4e3a\u7a7a\u5e76\u6709\u9884\u5b9a\u7684\u957f\u5ea6\u3002\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\u5177\u6709\u4e03\u4e2a\u5143\u7d20\u7a7a\u95f4\u7684\u5706\u5f62\u7f13\u51b2\u533a\uff0c\u5176\u4e2d\u5e95\u90e8\u7684\u5355\u7ebf\u4e0e\u7bad\u5934\u8868\u793a\u201c\u5934\u5c3e\u76f8\u63a5\u201d\u5f62\u6210\u4e00\u4e2a\u5706\u5f62\u5730\u5740\u7a7a\u95f4\uff1a \u5047\u5b9a1\u88ab\u5199\u5165\u7f13\u51b2\u533a\u4e2d\u90e8\uff08\u5bf9\u4e8e\u5706\u5f62\u7f13\u51b2\u533a\u6765\u8bf4\uff0c\u6700\u521d\u7684\u5199\u5165\u4f4d\u7f6e\u5728\u54ea\u91cc\u662f\u65e0\u5173\u7d27\u8981\u7684\uff09\uff1a \u518d\u5199\u51652\u4e2a\u5143\u7d20\uff0c\u5206\u522b\u662f2 & 3 \u2014 \u88ab\u8ffd\u52a0\u57281\u4e4b\u540e\uff1a \u5982\u679c\u4e24\u4e2a\u5143\u7d20\u88ab\u5904\u7406\uff0c\u90a3\u4e48\u662f\u7f13\u51b2\u533a\u4e2d\u6700\u8001\u7684\u4e24\u4e2a\u5143\u7d20\u88ab\u79fb\u9664\u3002\u5728\u672c\u4f8b\u4e2d\uff0c1 & 2\u88ab\u79fb\u9664\uff0c\u7f13\u51b2\u533a\u4e2d\u53ea\u5269\u4e0b3: \u5982\u679c\u7f13\u51b2\u533a\u4e2d\u67097\u4e2a\u5143\u7d20\uff0c\u5219\u662f\u6ee1\u7684\uff1a \u5982\u679c\u7f13\u51b2\u533a\u662f\u6ee1\u7684\uff0c\u53c8\u8981\u5199\u5165\u65b0\u7684\u6570\u636e\uff0c\u4e00\u79cd\u7b56\u7565\u662f\u8986\u76d6\u6389\u6700\u8001\u7684\u6570\u636e\u3002\u6b64\u4f8b\u4e2d\uff0c2\u4e2a\u65b0\u6570\u636e\u2014 A & B \u2014 \u5199\u5165\uff0c\u8986\u76d6\u4e863 & 4: \u4e5f\u53ef\u4ee5\u91c7\u53d6\u5176\u4ed6\u7b56\u7565\uff0c\u7981\u6b62\u8986\u76d6\u7f13\u51b2\u533a\u7684\u6570\u636e\uff0c\u91c7\u53d6\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u7801\u6216\u8005\u629b\u51fa \u5f02\u5e38 \u3002 \u6700\u7ec8\uff0c\u5982\u679c\u4ece\u7f13\u51b2\u533a\u4e2d\u79fb\u96642\u4e2a\u6570\u636e\uff0c\u4e0d\u662f3 & 4 \u800c\u662f 5 & 6 \u3002\u56e0\u4e3a A & B \u5df2\u7ecf\u8986\u76d6\u4e863 & 4\uff1a","title":"\u5de5\u4f5c\u8fc7\u7a0b"},{"location":"algor/ringbuf/01.intro/#_8","text":"\u7531\u4e8e\u8ba1\u7b97\u673a\u5185\u5b58\u662f\u7ebf\u6027\u5730\u5740\u7a7a\u95f4\uff0c\u56e0\u6b64\u5706\u5f62\u7f13\u51b2\u533a\u9700\u8981\u7279\u522b\u7684\u8bbe\u8ba1\u624d\u53ef\u4ee5\u4ece\u903b\u8f91\u4e0a\u5b9e\u73b0\u3002","title":"\u5b9e\u73b0\u65b9\u6848"},{"location":"algor/ringbuf/01.intro/#_9","text":"\u4e00\u822c\u7684\uff0c\u5706\u5f62\u7f13\u51b2\u533a\u9700\u89814\u4e2a\u6307\u9488\uff1a \u5728\u5185\u5b58\u4e2d\u5b9e\u9645\u5f00\u59cb\u4f4d\u7f6e\uff1b \u5728\u5185\u5b58\u4e2d\u5b9e\u9645\u7ed3\u675f\u4f4d\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u7528\u7f13\u51b2\u533a\u957f\u5ea6\u4ee3\u66ff\uff1b \u5b58\u50a8\u5728\u7f13\u51b2\u533a\u4e2d\u7684\u6709\u6548\u6570\u636e\u7684\u5f00\u59cb\u4f4d\u7f6e\uff08\u8bfb\u6307\u9488\uff09\uff1b \u5b58\u50a8\u5728\u7f13\u51b2\u533a\u4e2d\u7684\u6709\u6548\u6570\u636e\u7684\u7ed3\u5c3e\u4f4d\u7f6e\uff08\u5199\u6307\u9488\uff09\u3002 \u8bfb\u6307\u9488\u3001\u5199\u6307\u9488\u53ef\u4ee5\u7528\u6574\u578b\u503c\u6765\u8868\u793a\u3002 \u4e0b\u4f8b\u4e3a\u4e00\u4e2a\u672a\u6ee1\u7684\u7f13\u51b2\u533a\u7684\u8bfb\u5199\u6307\u9488\uff1a \u4e0b\u4f8b\u4e3a\u4e00\u4e2a\u6ee1\u7684\u7f13\u51b2\u533a\u7684\u8bfb\u5199\u6307\u9488\uff1a","title":"\u8bfb\u6307\u9488\u4e0e\u5199\u6307\u9488"},{"location":"algor/ringbuf/01.intro/#_10","text":"\u7f13\u51b2\u533a\u662f\u6ee1\u3001\u6216\u662f\u7a7a\uff0c\u90fd\u6709\u53ef\u80fd\u51fa\u73b0\u8bfb\u6307\u9488\u4e0e\u5199\u6307\u9488\u6307\u5411\u540c\u4e00\u4f4d\u7f6e\uff1a \u6709\u591a\u79cd\u7b56\u7565\u7528\u4e8e\u68c0\u6d4b\u7f13\u51b2\u533a\u662f\u6ee1\u3001\u6216\u662f\u7a7a.","title":"\u533a\u5206\u7f13\u51b2\u533a\u6ee1\u6216\u8005\u7a7a"},{"location":"algor/ringbuf/01.intro/#_11","text":"\u7f13\u51b2\u533a\u4e2d\u603b\u662f\u6709\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u4fdd\u6301\u672a\u4f7f\u7528\u72b6\u6001\u3002\u7f13\u51b2\u533a\u6700\u591a\u5b58\u5165 (size-1) \u4e2a\u6570\u636e\u3002\u5982\u679c\u8bfb\u5199\u6307\u9488\u6307\u5411\u540c\u4e00\u4f4d\u7f6e\uff0c\u5219\u7f13\u51b2\u533a\u4e3a\u7a7a\u3002\u5982\u679c\u5199\u6307\u9488\u4f4d\u4e8e\u8bfb\u6307\u9488\u7684\u76f8\u90bb\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u7f13\u51b2\u533a\u4e3a\u6ee1\u3002\u8fd9\u79cd\u7b56\u7565\u7684\u4f18\u70b9\u662f\u7b80\u5355\u3001\u7c97\u66b4\uff1b\u7f3a\u70b9\u662f\u8bed\u4e49\u4e0a\u5b9e\u9645\u53ef\u5b58\u6570\u636e\u91cf\u4e0e\u7f13\u51b2\u533a\u5bb9\u91cf\u4e0d\u4e00\u81f4\uff0c\u6d4b\u8bd5\u7f13\u51b2\u533a\u662f\u5426\u6ee1\u9700\u8981\u505a\u53d6\u4f59\u6570\u8ba1\u7b97\u3002","title":"\u603b\u662f\u4fdd\u6301\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u4e3a\u7a7a"},{"location":"algor/ringbuf/01.intro/#_12","text":"\u8fd9\u79cd\u7b56\u7565\u4e0d\u4f7f\u7528\u663e\u5f0f\u7684\u5199\u6307\u9488\uff0c\u800c\u662f\u4fdd\u6301\u7740\u7f13\u51b2\u533a\u5185\u5b58\u50a8\u7684\u6570\u636e\u7684\u8ba1\u6570\u3002\u56e0\u6b64\u6d4b\u8bd5\u7f13\u51b2\u533a\u662f\u7a7a\u662f\u6ee1\u975e\u5e38\u7b80\u5355\uff1b\u5bf9\u6027\u80fd\u5f71\u54cd\u53ef\u4ee5\u5ffd\u7565\u3002\u7f3a\u70b9\u662f\u8bfb\u5199\u64cd\u4f5c\u90fd\u9700\u8981\u4fee\u6539\u8fd9\u4e2a\u5b58\u50a8\u6570\u636e\u8ba1\u6570\uff0c\u5bf9\u4e8e \u591a\u7ebf\u7a0b \u8bbf\u95ee\u7f13\u51b2\u533a\u9700\u8981 \u5e76\u53d1\u63a7\u5236 \u3002","title":"\u4f7f\u7528\u6570\u636e\u8ba1\u6570"},{"location":"algor/ringbuf/01.intro/#_13","text":"\u7f13\u51b2\u533a\u7684\u957f\u5ea6\u5982\u679c\u662fn\uff0c\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u5219\u4e3a0\u81f3n-1\uff1b\u90a3\u4e48\uff0c\u89c4\u5b9an\u81f32n-1\u4e3a\u955c\u50cf\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u3002\u672c\u7b56\u7565\u89c4\u5b9a\u8bfb\u5199\u6307\u9488\u7684\u5730\u5740\u7a7a\u95f4\u4e3a0\u81f32n-1\uff0c\u5176\u4e2d\u4f4e\u534a\u90e8\u5206\u5bf9\u5e94\u4e8e\u5e38\u89c4\u7684\u903b\u8f91\u5730\u5740\u7a7a\u95f4\uff0c\u9ad8\u534a\u90e8\u5206\u5bf9\u5e94\u4e8e\u955c\u50cf\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u3002\u5f53\u6307\u9488\u503c\u5927\u4e8e\u7b49\u4e8e2n\u65f6\uff0c\u4f7f\u5176\u6298\u8fd4\uff08wrapped\uff09\u5230ptr-2n\u3002\u4f7f\u7528\u4e00\u4f4d\u8868\u793a\u5199\u6307\u9488\u6216\u8bfb\u6307\u9488\u662f\u5426\u8fdb\u5165\u4e86\u865a\u62df\u7684\u955c\u50cf\u5b58\u50a8\u533a\uff1a\u7f6e\u4f4d\u8868\u793a\u8fdb\u5165\uff0c\u4e0d\u7f6e\u4f4d\u8868\u793a\u6ca1\u8fdb\u5165\u8fd8\u5728\u57fa\u672c\u5b58\u50a8\u533a\u3002 \u5728\u8bfb\u5199\u6307\u9488\u7684\u503c\u76f8\u540c\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4e8c\u8005\u7684\u6307\u793a\u4f4d\u76f8\u540c\uff0c\u8bf4\u660e\u7f13\u51b2\u533a\u4e3a\u7a7a\uff1b\u5982\u679c\u4e8c\u8005\u7684\u6307\u793a\u4f4d\u4e0d\u540c\uff0c\u8bf4\u660e\u7f13\u51b2\u533a\u4e3a\u6ee1\u3002\u8fd9\u79cd\u65b9\u6cd5\u4f18\u70b9\u662f\u6d4b\u8bd5\u7f13\u51b2\u533a\u6ee1/\u7a7a\u5f88\u7b80\u5355\uff1b\u4e0d\u9700\u8981\u505a\u53d6\u4f59\u6570\u64cd\u4f5c\uff1b\u8bfb\u5199\u7ebf\u7a0b\u53ef\u4ee5\u5206\u522b\u8bbe\u8ba1\u4e13\u7528\u7b97\u6cd5\u7b56\u7565\uff0c\u80fd\u5b9e\u73b0\u7cbe\u81f4\u7684\u5e76\u53d1\u63a7\u5236\u3002 \u7f3a\u70b9\u662f\u8bfb\u5199\u6307\u9488\u5404\u9700\u8981\u989d\u5916\u7684\u4e00\u4f4d\u4f5c\u4e3a\u6307\u793a\u4f4d\u3002 \u5982\u679c\u7f13\u51b2\u533a\u957f\u5ea6\u662f2\u7684 \u5e42 \uff0c\u5219\u672c\u65b9\u6cd5\u53ef\u4ee5\u7701\u7565\u955c\u50cf\u6307\u793a\u4f4d\u3002\u5982\u679c\u8bfb\u5199\u6307\u9488\u7684\u503c\u76f8\u7b49\uff0c\u5219\u7f13\u51b2\u533a\u4e3a\u7a7a\uff1b\u5982\u679c\u8bfb\u5199\u6307\u9488\u76f8\u5deen\uff0c\u5219\u7f13\u51b2\u533a\u4e3a\u6ee1\uff0c\u8fd9\u53ef\u4ee5\u7528\u6761\u4ef6\u8868\u8fbe\u5f0f\uff08\u5199\u6307\u9488 == (\u8bfb\u6307\u9488 \u5f02\u6216 \u7f13\u51b2\u533a\u957f\u5ea6)\uff09\u6765\u5224\u65ad\u3002 // This approach adds one bit to end and start pointers // Circular buffer object typedef struct { int size ; // maximum number of elements int start ; // index of oldest element int end ; // index at which to write new element ElemType * elems ; // vector of elements } CircularBuffer ; void cbInit ( CircularBuffer * cb , int size ) { cb -> size = size ; cb -> start = 0 ; cb -> end = 0 ; cb -> elems = ( ElemType * ) calloc ( cb -> size , sizeof ( ElemType )); } void cbPrint ( CircularBuffer * cb ) { printf ( \"size = 0x%x, start = %d, end = %d \\n \" , cb -> size , cb -> start , cb -> end ); } int cbIsFull ( CircularBuffer * cb ) { return cb -> end == ( cb -> start ^ cb -> size ); // This inverts the most significant bit of start before comparison } int cbIsEmpty ( CircularBuffer * cb ) { return cb -> end == cb -> start ; } int cbIncr ( CircularBuffer * cb , int p ) { return ( p + 1 ) & ( 2 * cb -> size - 1 ); // start and end pointers incrementation is done modulo 2*size } void cbWrite ( CircularBuffer * cb , ElemType * elem ) { cb -> elems [ cb -> end & ( cb -> size - 1 )] = * elem ; if ( cbIsFull ( cb )) // full, overwrite moves start pointer cb -> start = cbIncr ( cb , cb -> start ); cb -> end = cbIncr ( cb , cb -> end ); } void cbRead ( CircularBuffer * cb , ElemType * elem ) { * elem = cb -> elems [ cb -> start & ( cb -> size - 1 )]; cb -> start = cbIncr ( cb , cb -> start ); }","title":"\u955c\u50cf\u6307\u793a\u4f4d"},{"location":"algor/ringbuf/01.intro/#_14","text":"\u7528\u4e24\u4e2a\u6709\u7b26\u53f7\u6574\u578b\u53d8\u91cf\u5206\u522b\u4fdd\u5b58\u5199\u5165\u3001\u8bfb\u51fa\u7f13\u51b2\u533a\u7684\u6570\u636e\u6570\u91cf\u3002\u5176\u5dee\u503c\u5c31\u662f\u7f13\u51b2\u533a\u4e2d\u5c1a\u672a\u88ab\u5904\u7406\u7684\u6709\u6548\u6570\u636e\u7684\u6570\u91cf\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u4f18\u70b9\u662f\u8bfb\u7ebf\u7a0b\u3001\u5199\u7ebf\u7a0b\u4e92\u4e0d\u5e72\u6270\uff1b\u7f3a\u70b9\u662f\u9700\u8981\u989d\u5916\u4e24\u4e2a\u53d8\u91cf\u3002","title":"\u8bfb/\u5199 \u8ba1\u6570"},{"location":"algor/ringbuf/01.intro/#_15","text":"\u4f7f\u7528\u4e00\u4f4d\u8bb0\u5f55\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u662f\u8bfb\u8fd8\u662f\u5199\u3002\u8bfb\u5199\u6307\u9488\u503c\u76f8\u7b49\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u4e3a\u5199\u5165\uff0c\u90a3\u4e48\u7f13\u51b2\u533a\u662f\u6ee1\u7684\uff1b\u5982\u679c\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u4e3a\u8bfb\u51fa\uff0c\u90a3\u4e48\u7f13\u51b2\u533a\u662f\u7a7a\u3002 \u8fd9\u79cd\u7b56\u7565\u7684\u7f3a\u70b9\u662f\u8bfb\u5199\u64cd\u4f5c\u5171\u4eab\u4e00\u4e2a\u6807\u5fd7\u4f4d\uff0c\u591a\u7ebf\u7a0b\u65f6\u9700\u8981\u5e76\u53d1\u63a7\u5236\u3002","title":"\u8bb0\u5f55\u6700\u540e\u7684\u64cd\u4f5c"},{"location":"algor/ringbuf/01.intro/#_16","text":"","title":"\u76f8\u5173\u5b9e\u73b0"},{"location":"algor/ringbuf/01.intro/#posix","text":"\u4e0b\u9762\u662f\u4e00\u4e2a\u9002\u5408\u4e8e Linux \u7684\u5b9e\u73b0\uff0c\u540c\u65f6\u4e5f\u5177\u5907 POSIX \u53ef\u79fb\u690d\u6027\uff1a #include <sys/mman.h> #include <stdlib.h> #include <unistd.h> #define report_exceptional_condition() abort () struct ring_buffer { void * address ; unsigned long count_bytes ; unsigned long write_offset_bytes ; unsigned long read_offset_bytes ; }; // Warning order should be at least 12 for Linux void ring_buffer_create ( struct ring_buffer * buffer , unsigned long order ) { char path [] = \"/dev/shm/ring-buffer-XXXXXX\" ; int file_descriptor ; void * address ; int status ; file_descriptor = mkstemp ( path ); if ( file_descriptor < 0 ) report_exceptional_condition (); status = unlink ( path ); if ( status ) report_exceptional_condition (); buffer -> count_bytes = 1UL << order ; buffer -> write_offset_bytes = 0 ; buffer -> read_offset_bytes = 0 ; status = ftruncate ( file_descriptor , buffer -> count_bytes ); if ( status ) report_exceptional_condition (); buffer -> address = mmap ( NULL , buffer -> count_bytes << 1 , PROT_NONE , MAP_ANONYMOUS | MAP_PRIVATE , - 1 , 0 ); if ( buffer -> address == MAP_FAILED ) report_exceptional_condition (); address = mmap ( buffer -> address , buffer -> count_bytes , PROT_READ | PROT_WRITE , MAP_FIXED | MAP_SHARED , file_descriptor , 0 ); if ( address != buffer -> address ) report_exceptional_condition (); address = mmap ( buffer -> address + buffer -> count_bytes , buffer -> count_bytes , PROT_READ | PROT_WRITE , MAP_FIXED | MAP_SHARED , file_descriptor , 0 ); if ( address != buffer -> address + buffer -> count_bytes ) report_exceptional_condition (); status = close ( file_descriptor ); if ( status ) report_exceptional_condition (); } void ring_buffer_free ( struct ring_buffer * buffer ) { int status ; status = munmap ( buffer -> address , buffer -> count_bytes << 1 ); if ( status ) report_exceptional_condition (); } void * ring_buffer_write_address ( struct ring_buffer * buffer ) { // void pointer arithmetic is a constraint violation. return buffer -> address + buffer -> write_offset_bytes ; } void ring_buffer_write_advance ( struct ring_buffer * buffer , unsigned long count_bytes ) { buffer -> write_offset_bytes += count_bytes ; } void * ring_buffer_read_address ( struct ring_buffer * buffer ) { return buffer -> address + buffer -> read_offset_bytes ; } void ring_buffer_read_advance ( struct ring_buffer * buffer , unsigned long count_bytes ) { buffer -> read_offset_bytes += count_bytes ; if ( buffer -> read_offset_bytes >= buffer -> count_bytes ) { // \u5982\u679c\u8bfb\u6307\u9488\u5927\u4e8e\u7b49\u4e8e\u7f13\u51b2\u533a\u957f\u5ea6\uff0c\u90a3\u4e9b\u8bfb\u5199\u6307\u9488\u540c\u65f6\u6298\u8fd4\u56de[0, buffer_size]\u8303\u56f4\u5185 buffer -> read_offset_bytes -= buffer -> count_bytes ; buffer -> write_offset_bytes -= buffer -> count_bytes ; } } unsigned long ring_buffer_count_bytes ( struct ring_buffer * buffer ) { return buffer -> write_offset_bytes - buffer -> read_offset_bytes ; } unsigned long ring_buffer_count_free_bytes ( struct ring_buffer * buffer ) { return buffer -> count_bytes - ring_buffer_count_bytes ( buffer ); } void ring_buffer_clear ( struct ring_buffer * buffer ) { buffer -> write_offset_bytes = 0 ; buffer -> read_offset_bytes = 0 ; } /* Note, that initial anonymous mmap() can be avoided - after initial mmap() for descriptor fd, you can try mmap() with hinted address as (buffer->address + buffer->count_bytes) and if it fails - another one with hinted address as (buffer->address - buffer->count_bytes). Make sure MAP_FIXED is not used in such case, as under certain situations it could end with segfault. The advantage of such approach is, that it avoids requirement to map twice the amount you need initially (especially useful e.g. if you want to use hugetlbfs and the allowed amount is limited) and in context of gcc/glibc - you can avoid certain feature macros (MAP_ANONYMOUS usually requires one of: _BSD_SOURCE, _SVID_SOURCE or _GNU_SOURCE). */ \u8fd9\u4e00\u5b9e\u73b0\u5c5e\u4e8e\u6559\u79d1\u4e66\u5f0f\u6837\uff0c\u4f46\u4e0d\u5e94\u88ab\u7528\u4e8e\u5b9e\u9645\u5de5\u4f5c\u573a\u666f\u4e2d\uff0c\u539f\u56e0\u5728\u4e8e\u4ee5\u4e0b\u51e0\u70b9\uff1a \u4f7f\u7528 mmap \u7279\u6027\uff0c\u8fd9\u53ef\u80fd\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u65b9\u5f0f\uff1ammap \u5e26\u6709\u989d\u5916\u7684 kernel api \u8c03\u7528\u5f00\u9500\uff0c\u53ef\u80fd\u4e0d\u662f\u6700\u4f73\u9009\u62e9\uff0c\u9664\u975e\u4f60\u9700\u8981\u8fdb\u7a0b\u95f4\u901a\u4fe1\u8fd9\u4e00\u73af\u5f62\u961f\u5217\u3002 \u64cd\u4f5c\u53ea\u80fd\u5728\u5355\u7ebf\u7a0b\u4e2d\uff0c\u5426\u5219\u53ef\u80fd\u6709\u6570\u636e\u7ade\u4e89\u95ee\u9898\u3002","title":"POSIX\u4f18\u5316\u5b9e\u73b0"},{"location":"algor/ringbuf/01.intro/#_17","text":"","title":""},{"location":"algor/ringbuf/01.intro/#linuxkfifo","text":"\u5728Linux\u5185\u6838\u6587\u4ef6 kfifo.h \u548c kfifo.c \u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa\u5706\u5f62\u7f13\u51b2\u533a\u5b9e\u73b0\u3002\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8bfb\u7ebf\u7a0b\u3001\u4e00\u4e2a\u5199\u7ebf\u7a0b\uff0c\u4e8c\u8005\u6ca1\u6709\u5171\u4eab\u7684\u88ab\u4fee\u6539\u7684\u63a7\u5236\u53d8\u91cf\uff0c\u90a3\u4e48\u53ef\u4ee5\u8bc1\u660e\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981 \u5e76\u53d1\u63a7\u5236 \u3002kfifo\u5c31\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u3002kfifo\u8981\u6c42\u7f13\u51b2\u533a\u957f\u5ea6\u5fc5\u987b\u4e3a2\u7684\u5e42\u3002\u8bfb\u3001\u5199\u6307\u9488\u5206\u522b\u662f\u65e0\u7b26\u53f7\u6574\u578b\u53d8\u91cf\u3002\u628a\u8bfb\u5199\u6307\u9488\u53d8\u6362\u4e3a\u7f13\u51b2\u533a\u5185\u7684\u7d22\u5f15\u503c\uff0c\u4ec5\u9700\u8981\u201c\u6309\u4f4d\u4e0e\u201d\u64cd\u4f5c\uff1a\uff08\u6307\u9488\u503c \u6309\u4f4d\u4e0e \uff08\u7f13\u51b2\u533a\u957f\u5ea6-1\uff09\uff09\u3002\u8fd9\u907f\u514d\u4e86\u8ba1\u7b97\u4ee3\u4ef7\u9ad8\u6602\u7684\u201c\u6c42\u4f59\u201d\u64cd\u4f5c\u3002\u4e14\u4e0b\u8ff0\u5173\u7cfb\u603b\u662f\u6210\u7acb\uff1a \u8bfb\u6307\u9488 + \u7f13\u51b2\u533a\u5b58\u50a8\u7684\u6570\u636e\u957f\u5ea6 == \u5199\u6307\u9488 \u5373\u4f7f\u5728\u5199\u6307\u9488\u8fbe\u5230\u4e86\u65e0\u7b26\u53f7\u6574\u578b\u7684\u4e0a\u754c\uff0c\u4e0a\u6ea2\u51fa\u540e\u5199\u6307\u9488\u7684\u503c\u5c0f\u4e8e\u8bfb\u6307\u9488\u7684\u503c\uff0c\u4e0a\u8ff0\u5173\u7cfb\u4ecd\u7136\u4fdd\u6301\u6210\u7acb\uff08\u8fd9\u662f\u56e0\u4e3a\u65e0\u7b26\u53f7\u6574\u578b\u52a0\u6cd5\u7684\u6027\u8d28\uff09\u3002 kfifo\u7684\u5199\u64cd\u4f5c\uff0c\u9996\u5148\u8ba1\u7b97\u7f13\u51b2\u533a\u4e2d\u5f53\u524d\u53ef\u5199\u5165\u5b58\u50a8\u7a7a\u95f4\u7684\u6570\u636e\u957f\u5ea6\uff1a len = min{\u5f85\u5199\u5165\u6570\u636e\u957f\u5ea6, \u7f13\u51b2\u533a\u957f\u5ea6 - \uff08\u5199\u6307\u9488 - \u8bfb\u6307\u9488\uff09} \u7136\u540e\uff0c\u5206\u4e24\u6bb5\u5199\u5165\u6570\u636e\u3002\u7b2c\u4e00\u6bb5\u662f\u4ece\u5199\u6307\u9488\u5f00\u59cb\u5411\u7f13\u51b2\u533a\u672b\u5c3e\u65b9\u5411\uff1b\u7b2c\u4e8c\u6bb5\u662f\u4ece\u7f13\u51b2\u533a\u8d77\u59cb\u5904\u5199\u5165\u4f59\u4e0b\u7684\u53ef\u5199\u5165\u6570\u636e\uff0c\u8fd9\u90e8\u5206\u53ef\u80fd\u6570\u636e\u957f\u5ea6\u4e3a0\u5373\u5e76\u65e0\u5b9e\u9645\u6570\u636e\u5199\u5165\u3002 \u74b0\u5f62\u7de9\u885d\u5340 - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66 \u21a9 \u21a9","title":"Linux\u5185\u6838\u7684kfifo"},{"location":"algor/ringbuf/02.lock-free/","text":"\u65e0\u9501\u7f16\u7a0b\u6982\u8981 \u00b6 \u9ad8\u6027\u80fd\u7684\u65e0\u9501\u7f16\u7a0b\u6d89\u53ca\u5230\u4e24\u4e2a\u5173\u952e\u70b9\uff0c\u9996\u5148\u662fCAS\u7c92\u5ea6\u7f29\u5c0f\u95ee\u9898\uff0c\u518d\u4e00\u662f\u5229\u7528CPU\u7684\u6d41\u6c34\u7ebf\u9884\u53d6\uff0c\u4e5f\u5c31\u662f\u4e00\u7ea7\u548c\u4e8c\u7ea7\u7f13\u5b58 L1 \u548c L2\u3002 \u9501\u7c92\u5ea6\u63a7\u5236 \u00b6 \u7f29\u5c0fCAS\u7c92\u5ea6\uff0c\u4e3b\u8981\u5728\u4e8e\u5229\u7528 atomic.CompareAndSwapUint32 \u51fd\u6570\u3002\u8fd9\u6837\u7684CPU\u673a\u5668\u6307\u4ee4\u80fd\u591f\u5728\u5355\u6761\u6307\u4ee4\u4e2d\u5b8c\u6210\u6570\u636e\u7684\u6bd4\u8f83\u548c\u66f4\u6539\u4e14\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002\u8fd9\u662f\u5df2\u77e5\u7684\u552f\u4e00\u7684\u4fdd\u8bc1\u4e00\u81f4\u6027\u524d\u63d0\u4e0b\u7684\u6700\u5c0f\u4ee3\u4ef7\u7684CAS\u3002\u6240\u4ee5\u6240\u6709\u7684\u6709\u610f\u4e49\u7684\u65e0\u9501\u7f16\u7a0b\u7684\u6838\u5fc3\u4e4b\u4e00\uff0c\u5c31\u662f\u5145\u5206\u5229\u7528\u8fd9\u4e00CPU\u652f\u6301\u6765\u8fbe\u5230\u6700\u5c0f\u4ee3\u4ef7\u7684\u9501\uff0c\u6216\u8005\u8bf4\uff0c\u5728CAS\u7406\u8bba\u7684\u9886\u5bfc\u4e0b\uff0c\u4e0d\u53ef\u80fd\u6709\u4e0d\u52a0\u9501\u800c\u4fdd\u8bc1\u6570\u636e\u4e00\u81f4\u6027\u7684\u529e\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u6709\u4e86 atomic.CompareAndSwapUint32 \u51fd\u6570\uff08\u4ee5\u53ca\u5176\u5b83\u76f8\u5173\u6307\u4ee4\uff09\u7684\u652f\u6301\u4e0b\uff0c\u9501\u5b9a\u7684\u7c92\u5ea6\u88ab\u9650\u5236\u5230\u4e86\u4e00\u6761\u673a\u5668\u6307\u4ee4\u91cc\uff0c\u8fd9\u5c31\u4f7f\u5f97\u9501\u5230\u4ee3\u4ef7\u88ab\u89c6\u4e3a\u4e86\u96f6\u3002 \u5bf9\u4e8e Windows API \u6765\u8bf4\uff0c InterlockedIncrement() \u53ca\u5176\u76f8\u5173\u539f\u578b\u57fa\u672c\u7b49\u4ef7\u4e8e atomic \u7684 CompareAndSwapUint32 \u7b49\u4e00\u7cfb\u5217\u539f\u8bed\u3002\u5b83\u4eec\u4e5f\u5bf9\u5e94\u7740 Intel CPU \u7684 lock cmpxchg \u9884\u53d6\u673a\u5236 \u00b6 CPU\u7684\u6d41\u6c34\u7ebf\u9884\u53d6\uff0c\u8fd9\u539f\u672c\u662f x86 \u7cfb\u5217CPU\u7684\u7279\u6027\uff081982\uff0c1985\uff09\uff0c\u4f46\u5728 ARM\uff0cMIPS \u7b49\u67b6\u6784\u4e2d\u4e5f\u88ab\u826f\u597d\u7684\u652f\u6301\uff0c\u6240\u4ee5\u5728\u591a\u6570\u60c5\u51b5\u4e0b\u6211\u4eec\u4e0d\u8003\u8651\u65e0\u9884\u53d6\u673a\u5236\u4e0d\u80fd\u5e26\u6765\u6027\u80fd\u63d0\u5347\u7684\u95ee\u9898\uff0c\u8f6c\u800c\u8003\u8651\u600e\u4e48\u624d\u80fd\u771f\u6b63\u6b63\u786e\u5730\u5229\u7528CPU\u9884\u53d6\u7279\u6027\u3002 CPU\u9884\u53d6\u5b9e\u9645\u4e0a\u6307\u7684\u662f\u4e24\u4e2a\u65b9\u9762\uff0c\u4e00\u662f\u673a\u5668\u6307\u4ee4\u7684\u9884\u53d6\uff0c\u800c\u662f\u5185\u5b58\u7684\u76f8\u90bb\u533a\u57df\u88ab\u81ea\u52a8\u9884\u53d6\u5230 L1 \u548c L2 \u7684\u884c\u4e3a\u3002 \u6307\u4ee4\u9884\u53d6 \u00b6 \u673a\u5668\u6307\u4ee4\u7684\u9884\u53d6\u4f1a\u88ab\u8df3\u8f6c\u6307\u4ee4\u6240\u6253\u65ad\uff0c\u5426\u5219\u7684\u8bdd\u5f53\u524d\u6307\u4ee4\u7684\u540e\u7ee7\u6570\u6761\u6307\u4ee4\u5c06\u88ab\u81ea\u52a8\u5730\u63d0\u53d6\u5230\u6267\u884c\u673a\u6784\u7684\u7b49\u5f85\u7ba1\u7ebf\uff08Pipeline\uff09\u4e2d\uff0c\u56e0\u6b64\u5f53\u524d\u6307\u4ee4\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u4e0b\u4e00\u6761\u6307\u4ee4\u65e0\u9700\u5185\u5b58\u548c\u603b\u7ebf\u7b49\u5f85\u5c31\u4f1a\u88ab\u7acb\u5373\u6267\u884c\u3002\u5f53\u7136\u8fd9\u662f\u4e00\u4e2a\u76f8\u5f53\u590d\u6742\u7684\u903b\u8f91\uff0c\u5c24\u5176\u5728\u591a\u6838\u60c5\u51b5\u4e0b\u66f4\u662f\u590d\u6742\u3002\u6b64\u5916\uff0c\u6700\u65b0\u7684CPU\u5df2\u7ecf\u80fd\u591f\u8f83\u667a\u80fd\u5730\u8bc6\u522b\u8df3\u8f6c\u6307\u4ee4\u6240\u5e26\u6765\u7684\u5f71\u54cd\u5e76\u6b63\u786e\u5730\u9884\u53d6\u8df3\u8f6c\u76ee\u6807\u4f4d\u7f6e\u7684\u65b0\u6307\u4ee4\uff0c\u8fd9\u4ecd\u7136\u662f\u6709\u9650\u7684\uff0c\u4e0d\u8fc7\u901a\u8fc7\u66f4\u5927\u7684\u7247\u4e0a\u7f13\u5b58\uff08L2\uff09\u4e5f\u5e76\u975e\u4e0d\u80fd\u6539\u5584\uff08 \u5206\u652f\u9884\u6d4b \uff09\u3002\u7531\u4e8e\u9ad8\u7ea7\u8bed\u8a00\u7684\u7f16\u8bd1\u5668\u4f18\u5316\u7b49\u539f\u56e0\uff0c\u7a0b\u5e8f\u5458\u5bf9\u4e8e\u6307\u4ee4\u9884\u53d6\u7684\u64cd\u63a7\u529b\u8f83\u4e3a\u6709\u9650\uff0c\u56e0\u6b64\u5728\u65e0\u9501\u7f16\u7a0b\u4e2d\u8fd9\u4e2a\u65b9\u9762\u8f83\u5c11\u88ab\u8003\u8651\uff0c\u4f46\u5982\u679c\u4f60\u5728\u5b9e\u73b0 C/C++ \u7b97\u6cd5\u7684\u8bdd\uff0c\u8fd9\u4e00\u5757\u4e5f\u9700\u8981\u88ab\u7eb3\u5165\u6027\u80fd\u5316\u7f16\u7a0b\u7684\u8003\u8651\u8303\u56f4\u3002 \u6570\u636e\u9884\u53d6/\u5185\u5b58\u9884\u53d6 \u00b6 L1 Cache \u548c L2 Cache \u7684\u9884\u53d6\u7279\u6027\uff0c\u662f\u6307\u5f53 CPU \u6267\u884c\u6307\u4ee4\u662f\u5982\u679c\u6b63\u5728\u8bbf\u95ee\u5185\u5b58\u4f4d\u7f6e A\uff0c\u90a3\u4e48 A \u5730\u5740\u4e4b\u540e\u7684\u4e00\u5757\u5185\u5b58\u5c06\u4f1a\u88ab\u81ea\u52a8\u88c5\u5165L1\u7f13\u5b58\u4e2d\uff0c\u5982\u679c\u4e0b\u4e00\u6761\u6307\u4ee4\u6ca1\u6709\u64cd\u4f5c\u8fd9\u5757\u5185\u5b58\u7684\u8bdd\uff0c\u5219 L1 \u4e2d\u7684\u5185\u5b58\u5757\u5931\u6548\u5e76\u88ab\u9000\u5316\u5230 L2 \u4e2d\uff0c\u5982\u679c\u547d\u4e2d\u7684\u8bdd\u5219\u65e0\u9700\u5ef6\u8fdf\u76f4\u63a5\u88ab\u4f7f\u7528\uff1b\u5982\u679c\u5f53\u524d\u6307\u4ee4\u662f\u5728\u4fee\u6539 A \u5730\u5740\u4e2d\u7684\u6570\u636e\u7684\u8bdd\uff0c\u5219\u7f13\u5b58\u5b8c\u5168\u5931\u6548\uff0c\u8fd9\u5757\u5185\u5b58\u5982\u679c\u8fd8\u8981\u88ab\u7ee7\u7eed\u4f7f\u7528\u7684\u8bdd\u5c06\u9700\u8981\u91cd\u65b0\u9884\u53d6\u3002\u4f46 atomic.CompareAndSwapUint32 \u51fd\u6570\u53ef\u4ee5\u7b97\u662f\u4f8b\u5916\uff0cL1\u7f13\u5b58\u5e76\u4e0d\u9700\u8981\u56e0\u4e3a\u88ab\u4fee\u6539\u800c\u5931\u6548\u3002","title":"\u65e0\u9501\u7f16\u7a0b\u6982\u8981"},{"location":"algor/ringbuf/02.lock-free/#_1","text":"\u9ad8\u6027\u80fd\u7684\u65e0\u9501\u7f16\u7a0b\u6d89\u53ca\u5230\u4e24\u4e2a\u5173\u952e\u70b9\uff0c\u9996\u5148\u662fCAS\u7c92\u5ea6\u7f29\u5c0f\u95ee\u9898\uff0c\u518d\u4e00\u662f\u5229\u7528CPU\u7684\u6d41\u6c34\u7ebf\u9884\u53d6\uff0c\u4e5f\u5c31\u662f\u4e00\u7ea7\u548c\u4e8c\u7ea7\u7f13\u5b58 L1 \u548c L2\u3002","title":"\u65e0\u9501\u7f16\u7a0b\u6982\u8981"},{"location":"algor/ringbuf/02.lock-free/#_2","text":"\u7f29\u5c0fCAS\u7c92\u5ea6\uff0c\u4e3b\u8981\u5728\u4e8e\u5229\u7528 atomic.CompareAndSwapUint32 \u51fd\u6570\u3002\u8fd9\u6837\u7684CPU\u673a\u5668\u6307\u4ee4\u80fd\u591f\u5728\u5355\u6761\u6307\u4ee4\u4e2d\u5b8c\u6210\u6570\u636e\u7684\u6bd4\u8f83\u548c\u66f4\u6539\u4e14\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002\u8fd9\u662f\u5df2\u77e5\u7684\u552f\u4e00\u7684\u4fdd\u8bc1\u4e00\u81f4\u6027\u524d\u63d0\u4e0b\u7684\u6700\u5c0f\u4ee3\u4ef7\u7684CAS\u3002\u6240\u4ee5\u6240\u6709\u7684\u6709\u610f\u4e49\u7684\u65e0\u9501\u7f16\u7a0b\u7684\u6838\u5fc3\u4e4b\u4e00\uff0c\u5c31\u662f\u5145\u5206\u5229\u7528\u8fd9\u4e00CPU\u652f\u6301\u6765\u8fbe\u5230\u6700\u5c0f\u4ee3\u4ef7\u7684\u9501\uff0c\u6216\u8005\u8bf4\uff0c\u5728CAS\u7406\u8bba\u7684\u9886\u5bfc\u4e0b\uff0c\u4e0d\u53ef\u80fd\u6709\u4e0d\u52a0\u9501\u800c\u4fdd\u8bc1\u6570\u636e\u4e00\u81f4\u6027\u7684\u529e\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u6709\u4e86 atomic.CompareAndSwapUint32 \u51fd\u6570\uff08\u4ee5\u53ca\u5176\u5b83\u76f8\u5173\u6307\u4ee4\uff09\u7684\u652f\u6301\u4e0b\uff0c\u9501\u5b9a\u7684\u7c92\u5ea6\u88ab\u9650\u5236\u5230\u4e86\u4e00\u6761\u673a\u5668\u6307\u4ee4\u91cc\uff0c\u8fd9\u5c31\u4f7f\u5f97\u9501\u5230\u4ee3\u4ef7\u88ab\u89c6\u4e3a\u4e86\u96f6\u3002 \u5bf9\u4e8e Windows API \u6765\u8bf4\uff0c InterlockedIncrement() \u53ca\u5176\u76f8\u5173\u539f\u578b\u57fa\u672c\u7b49\u4ef7\u4e8e atomic \u7684 CompareAndSwapUint32 \u7b49\u4e00\u7cfb\u5217\u539f\u8bed\u3002\u5b83\u4eec\u4e5f\u5bf9\u5e94\u7740 Intel CPU \u7684 lock cmpxchg","title":"\u9501\u7c92\u5ea6\u63a7\u5236"},{"location":"algor/ringbuf/02.lock-free/#_3","text":"CPU\u7684\u6d41\u6c34\u7ebf\u9884\u53d6\uff0c\u8fd9\u539f\u672c\u662f x86 \u7cfb\u5217CPU\u7684\u7279\u6027\uff081982\uff0c1985\uff09\uff0c\u4f46\u5728 ARM\uff0cMIPS \u7b49\u67b6\u6784\u4e2d\u4e5f\u88ab\u826f\u597d\u7684\u652f\u6301\uff0c\u6240\u4ee5\u5728\u591a\u6570\u60c5\u51b5\u4e0b\u6211\u4eec\u4e0d\u8003\u8651\u65e0\u9884\u53d6\u673a\u5236\u4e0d\u80fd\u5e26\u6765\u6027\u80fd\u63d0\u5347\u7684\u95ee\u9898\uff0c\u8f6c\u800c\u8003\u8651\u600e\u4e48\u624d\u80fd\u771f\u6b63\u6b63\u786e\u5730\u5229\u7528CPU\u9884\u53d6\u7279\u6027\u3002 CPU\u9884\u53d6\u5b9e\u9645\u4e0a\u6307\u7684\u662f\u4e24\u4e2a\u65b9\u9762\uff0c\u4e00\u662f\u673a\u5668\u6307\u4ee4\u7684\u9884\u53d6\uff0c\u800c\u662f\u5185\u5b58\u7684\u76f8\u90bb\u533a\u57df\u88ab\u81ea\u52a8\u9884\u53d6\u5230 L1 \u548c L2 \u7684\u884c\u4e3a\u3002","title":"\u9884\u53d6\u673a\u5236"},{"location":"algor/ringbuf/02.lock-free/#_4","text":"\u673a\u5668\u6307\u4ee4\u7684\u9884\u53d6\u4f1a\u88ab\u8df3\u8f6c\u6307\u4ee4\u6240\u6253\u65ad\uff0c\u5426\u5219\u7684\u8bdd\u5f53\u524d\u6307\u4ee4\u7684\u540e\u7ee7\u6570\u6761\u6307\u4ee4\u5c06\u88ab\u81ea\u52a8\u5730\u63d0\u53d6\u5230\u6267\u884c\u673a\u6784\u7684\u7b49\u5f85\u7ba1\u7ebf\uff08Pipeline\uff09\u4e2d\uff0c\u56e0\u6b64\u5f53\u524d\u6307\u4ee4\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u4e0b\u4e00\u6761\u6307\u4ee4\u65e0\u9700\u5185\u5b58\u548c\u603b\u7ebf\u7b49\u5f85\u5c31\u4f1a\u88ab\u7acb\u5373\u6267\u884c\u3002\u5f53\u7136\u8fd9\u662f\u4e00\u4e2a\u76f8\u5f53\u590d\u6742\u7684\u903b\u8f91\uff0c\u5c24\u5176\u5728\u591a\u6838\u60c5\u51b5\u4e0b\u66f4\u662f\u590d\u6742\u3002\u6b64\u5916\uff0c\u6700\u65b0\u7684CPU\u5df2\u7ecf\u80fd\u591f\u8f83\u667a\u80fd\u5730\u8bc6\u522b\u8df3\u8f6c\u6307\u4ee4\u6240\u5e26\u6765\u7684\u5f71\u54cd\u5e76\u6b63\u786e\u5730\u9884\u53d6\u8df3\u8f6c\u76ee\u6807\u4f4d\u7f6e\u7684\u65b0\u6307\u4ee4\uff0c\u8fd9\u4ecd\u7136\u662f\u6709\u9650\u7684\uff0c\u4e0d\u8fc7\u901a\u8fc7\u66f4\u5927\u7684\u7247\u4e0a\u7f13\u5b58\uff08L2\uff09\u4e5f\u5e76\u975e\u4e0d\u80fd\u6539\u5584\uff08 \u5206\u652f\u9884\u6d4b \uff09\u3002\u7531\u4e8e\u9ad8\u7ea7\u8bed\u8a00\u7684\u7f16\u8bd1\u5668\u4f18\u5316\u7b49\u539f\u56e0\uff0c\u7a0b\u5e8f\u5458\u5bf9\u4e8e\u6307\u4ee4\u9884\u53d6\u7684\u64cd\u63a7\u529b\u8f83\u4e3a\u6709\u9650\uff0c\u56e0\u6b64\u5728\u65e0\u9501\u7f16\u7a0b\u4e2d\u8fd9\u4e2a\u65b9\u9762\u8f83\u5c11\u88ab\u8003\u8651\uff0c\u4f46\u5982\u679c\u4f60\u5728\u5b9e\u73b0 C/C++ \u7b97\u6cd5\u7684\u8bdd\uff0c\u8fd9\u4e00\u5757\u4e5f\u9700\u8981\u88ab\u7eb3\u5165\u6027\u80fd\u5316\u7f16\u7a0b\u7684\u8003\u8651\u8303\u56f4\u3002","title":"\u6307\u4ee4\u9884\u53d6"},{"location":"algor/ringbuf/02.lock-free/#_5","text":"L1 Cache \u548c L2 Cache \u7684\u9884\u53d6\u7279\u6027\uff0c\u662f\u6307\u5f53 CPU \u6267\u884c\u6307\u4ee4\u662f\u5982\u679c\u6b63\u5728\u8bbf\u95ee\u5185\u5b58\u4f4d\u7f6e A\uff0c\u90a3\u4e48 A \u5730\u5740\u4e4b\u540e\u7684\u4e00\u5757\u5185\u5b58\u5c06\u4f1a\u88ab\u81ea\u52a8\u88c5\u5165L1\u7f13\u5b58\u4e2d\uff0c\u5982\u679c\u4e0b\u4e00\u6761\u6307\u4ee4\u6ca1\u6709\u64cd\u4f5c\u8fd9\u5757\u5185\u5b58\u7684\u8bdd\uff0c\u5219 L1 \u4e2d\u7684\u5185\u5b58\u5757\u5931\u6548\u5e76\u88ab\u9000\u5316\u5230 L2 \u4e2d\uff0c\u5982\u679c\u547d\u4e2d\u7684\u8bdd\u5219\u65e0\u9700\u5ef6\u8fdf\u76f4\u63a5\u88ab\u4f7f\u7528\uff1b\u5982\u679c\u5f53\u524d\u6307\u4ee4\u662f\u5728\u4fee\u6539 A \u5730\u5740\u4e2d\u7684\u6570\u636e\u7684\u8bdd\uff0c\u5219\u7f13\u5b58\u5b8c\u5168\u5931\u6548\uff0c\u8fd9\u5757\u5185\u5b58\u5982\u679c\u8fd8\u8981\u88ab\u7ee7\u7eed\u4f7f\u7528\u7684\u8bdd\u5c06\u9700\u8981\u91cd\u65b0\u9884\u53d6\u3002\u4f46 atomic.CompareAndSwapUint32 \u51fd\u6570\u53ef\u4ee5\u7b97\u662f\u4f8b\u5916\uff0cL1\u7f13\u5b58\u5e76\u4e0d\u9700\u8981\u56e0\u4e3a\u88ab\u4fee\u6539\u800c\u5931\u6548\u3002","title":"\u6570\u636e\u9884\u53d6/\u5185\u5b58\u9884\u53d6"},{"location":"algor/ringbuf/03.smp/","text":"\u5e76\u53d1\u7f16\u7a0b\u548c\u591a\u6838\u7f16\u7a0b\u6982\u8981 \u00b6 \u5185\u5b58\u5c4f\u969c \u00b6 \u5185\u5b58\u5c4f\u969c\u662f\u4e00\u4e2a\u5927\u578b\u7684\u8bdd\u9898\u3002\u4e0b\u9762\u6211\u4eec\u6d53\u7f29\u4e00\u4e9b\u8981\u70b9\u3002 \u5185\u5b58\u5c4f\u969c\u8981\u8fbe\u5230\u7684\u76ee\u7684\uff0c\u662f\u4fdd\u8bc1\u5728 SMP \u67b6\u6784\u4e2d\uff0cCPU \u6838\u5fc3 A \u5bf9\u5185\u5b58\u7684\u5199\u5165\u52a8\u4f5c\u662f\u53ef\u88ab\u63a7\u5236\u7684\u6709\u5e8f\u7684\uff0c\u800c\u4e14\u5199\u5165\u7684\u6570\u636e\u80fd\u591f\u53cd\u6620\u5230\u5176\u5b83\u6838\u5fc3\u7684\u9ad8\u901f\u7f13\u5b58\u4e2d\uff08\u5982\u679c\u6709\u5fc5\u8981\u7684\u8bdd\uff09\u3002 \u5185\u5b58\u5c4f\u969c\u7684\u6839\u672c\u6027\u673a\u7406\uff0c\u5c31\u5728\u4e8e\u5bf9\u603b\u7ebf\u52a0\u9501\u3002 \u8fd9\u5f53\u7136\u662f\u7269\u7406\u7535\u8def\u4e0a\u5b9e\u73b0\u7684\uff0c\u4f46\u4e5f\u662f\u901a\u8fc7\u8bf8\u5982 lfense/sfence/mfense \u673a\u5668\u6307\u4ee4\u6765\u89e6\u53d1\u7684\uff08\u5bf9\u4e8e x86 \u6765\u8bf4\uff09\u3002\u901a\u8fc7\u603b\u7ebf\u9501\u5b9a\uff0cCPU \u591a\u4e2a\u6838\u5fc3\u7684\u5199\u5165\u52a8\u4f5c\u80fd\u591f\u4f9d\u636e\u4f8b\u5982 sfense \u7684\u5ba3\u544a\u6765\u987a\u6b21\u63d0\u4ea4\u5230\u5185\u5b58\u5730\u5740 M \u4e0a\uff0c\u5e76\u4e14\u80fd\u591f\u901a\u8fc7\u603b\u7ebf\u89e3\u9501\u7684\u4fe1\u53f7\u6765\u901a\u77e5\u5230 CPU \u7684\u6bcf\u4e2a\u6838\u5fc3\u80fd\u591f\u5c06\u76f8\u5e94\u7684\u9ad8\u901f\u7f13\u5b58\u6761\u76ee\u65e0\u6548\u5316\uff0c\u65e0\u6548\u5316\u7684\u540e\u679c\u5c31\u662f\u5f53\u6838\u5fc3 N \u6267\u884c\u4e0b\u4e00\u6307\u4ee4\u8bbf\u95ee M \u7684\u6570\u636e\u65f6\uff0c\u65b0\u9c9c\u7684\u6570\u636e\u7248\u672c\u80fd\u591f\u88ab\u91cd\u65b0\u8f7d\u5165\u5230\u6838\u5fc3 N \u7684\u9ad8\u901f\u7f13\u5b58\uff0c\u8fd9\u5c31\u89e3\u51b3\u4e86\u8fc7\u65f6\u7684\u810f\u6570\u636e\u95ee\u9898\uff0c\u4fdd\u8bc1\u4e86\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 \u5185\u5b58\u6a21\u578b\u548c\u5185\u5b58\u987a\u5e8f \u00b6 \u7565 \u6570\u636e\u4e00\u81f4\u6027 \u00b6 Gcc \u00b6 \u5728 Linux \u4e2d\uff0cgcc \u63d0\u4f9b\u7f16\u8bd1\u5668\u5c4f\u969c barrier() \u548c ACESS_ONCE()\uff0c\u6b64\u5916\u8fd8\u6709CPU\u5185\u5b58\u5c4f\u969c\uff1a \u901a\u7528\u5c4f\u969c\uff0c\u4fdd\u8bc1\u8bfb\u5199\u64cd\u4f5c\u6709\u5e8f\uff0c\u5305\u62ecmb()\u548csmp_mb(); \u5199\u64cd\u4f5c\u5c4f\u969c\uff0c\u4ec5\u4fdd\u8bc1\u5199\u64cd\u4f5c\u6709\u5e8f\uff0c\u5305\u62ecwmb()\u548csmp_wmb(); \u8bfb\u64cd\u4f5c\u5c4f\u969c\uff0c\u4ec5\u4fdd\u8bc1\u8bfb\u64cd\u4f5c\u6709\u5e8f\uff0c\u5305\u62ecrmb()\u548csmp_rmb(); \u6b64\u5916\uff0c\u4f7f\u7528 gcc \u5185\u5efa\u7684\u539f\u5b50\u64cd\u4f5c \uff0c\u5305\u62ec \u5bf9 int32\uff0cint64 \u7684 cmpxchg \u7b49\u7279\u6027\uff0c\u4e5f\u90fd\u5bf9\u6570\u636e\u4e00\u81f4\u6027\u63d0\u4f9b\u4e86\u76f8\u5e94\u7684\u652f\u6301\u3002\u6ce8\u610f C++11 \u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684 atomic\u5e93 \u6765\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\u3002 Golang \u4e2d\u7684\u6570\u636e\u4e00\u81f4\u6027 \u00b6 \u5728 Golang \u4e2d\uff0c\u5185\u5b58\u5c4f\u969c\u3001\u5185\u5b58\u987a\u5e8f\u7b49\u6280\u672f\u70b9\u662f\u88ab\u9690\u542b\u5728 Go \u8bed\u8a00\u7f16\u7801\u7ea6\u5b9a\u4e2d\u7684\u3002\u8fd9\u4e9b\u7ea6\u5b9a\u5927\u4f53\u4e0a\u4f53\u73b0\u5728 \u5305\u521d\u59cb\u5316\u987a\u5e8f\uff0cGoroutine\u521b\u5efa\u3001\u9500\u6bc1\u3001\u4ee5\u53ca\u5171\u4eab\u53d8\u91cf\u5728\u4e3b\u7ebf\u7a0b\u4ee5\u53ca Goroutines \u4e4b\u95f4\u7684\u540c\u6b65\uff0cChannel\u901a\u8baf\uff0c\u9501\uff08sync\u5305\uff09\u7b49\u65b9\u9762[^4]\u3002 \u6ce8\u610f\u5230\u9664\u4e86\u9690\u542b\u7ea6\u5b9a\u4e4b\u5916\uff0c\u4f60\u7684\u786e\u53ef\u4ee5\u4f7f\u7528 sync \u5305\u63d0\u4f9b\u7684\u9501\u6765\u8fbe\u5230\u540c\u6b65\u76ee\u7684\u3002\u6b64\u5916\uff0cGo \u4e5f\u63d0\u4f9b\u6807\u51c6\u7684 atomic \u5305\u6765\u652f\u6301\u539f\u5b50\u64cd\u4f5c\uff08\u8bf8\u5982 int32, uint64 \u7b49\uff09 \u5168\u9762\u8ba8\u8bba \u591a\u6838\u3001\u5e76\u53d1\u7f16\u7a0b\uff0c\u5df2\u7ecf\u662f\u4e00\u6574\u672c\u4e66\u7684\u95ee\u9898\uff0c\u56e0\u6b64\u8fd9\u91cc\u53ea\u80fd\u62e9\u5176\u6982\u8981\u8fdb\u884c\u7b80\u8ff0\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u73b0\u5728\u5c31\u8981\u7efc\u5408\u4e0a\u8ff0\u7684\u5404\u79cd\u77e5\u8bc6\u70b9\u6765\u5177\u4f53\u5b9e\u73b0\u4e00\u4e2a\u65e0\u9501\u7684\u73af\u5f62\u961f\u5217\uff0c\u8fd9\u4e2a\u961f\u5217\u662f\u6709\u754c\u7684\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5728\u62b5\u8fbe\u8fb9\u754c\u65f6\u7684\u884c\u4e3a\u662f\u9501\u5b9a\u8fd8\u662f\u8986\u76d6\u3002\u4e0b\u9762\u6211\u4eec\u5177\u4f53\u6765\u7814\u7a76\u7ec6\u8282\u3002 false sharing \u00b6 \u5047\u5171\u4eab false sharing \u662f\u4e00\u79cd\u5728 SMP \u4e0a\u7279\u6709\u7684\u6027\u80fd\u95ee\u9898\u3002 \u8fd9\u4e2a\u95ee\u9898\u6e90\u4e8e SMP \u7cfb\u7edf\u4e2d\u6bcf\u4e2a CPU \u6838\u5fc3\u5747\u914d\u6709\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\uff08\u4ee5\u4e0b\u7528 L1 \u6307\u4ee3\u5b83\uff09\u3002\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\u901a\u5e38\u5305\u542b\u4e86\u4e00\u7ec4 Cache Line\uff08\u4e5f\u79f0\u4f5c Cache Block\uff09\uff0c\u5f53 CPU \u6838\u5fc3\u8bbf\u95ee\u5185\u5b58\u6570\u636e\u65f6\uff0c\u5b83\u4f1a\u4ece\u5185\u5b58\u5730\u5740 Addr \u5904\u5f00\u59cb\uff0c\u8fde\u7eed\u8bfb\u53d6\u591a\u4e2a\u5b57\u8282\u5230\u4e00\u4e2a Cache Line \u4e2d\uff08\u6211\u4eec\u77e5\u9053\u591a\u6570 CPU \u7684 Cache Line \u7684\u5927\u5c0f\u90fd\u662f 64 \u5b57\u8282\uff09\u3002\u8fd9\u6837\uff0c\u5f53\u4e0b\u4e00\u6761\u6307\u4ee4\u5728\u64cd\u4f5c\u76f8\u5173\u7684\u5185\u5b58\u65f6\u5c31\u65e0\u9700\u901a\u8fc7\u603b\u7ebf\u53bb\u8bfb\u53d6\u5185\u5b58\u6570\u636e\u4e86\uff0c\u6b64\u65f6\u5c31\u8868\u793a\u4e00\u4e2a Cache Line \u88ab\u547d\u4e2d\u4e86\u3002 CPU \u9ad8\u901f\u7f13\u5b58\u4ee5\u53ca\u5185\u5b58\u7684\u8bbf\u95ee\u5ef6\u8fdf\uff1a \u53ef\u60f3\u800c\u77e5\uff0c\u5982\u679c\u591a\u9897 CPU \u6838\u5fc3\u7684 L1 \u4eec\u540c\u65f6\u90fd\u6709\u5185\u5b58\u5730\u5740 Addr \u5904\u7684\u6570\u636e\u5757\u5728\u5b83\u4eec\u5404\u81ea\u7684 Cache Lines \u4e2d\u7684\u8bdd\uff0c\u67d0\u4e2a\u6838\u5fc3\u5982\u679c\u4fee\u6539\u4e86\u8be5\u6570\u636e\u5757\uff0c\u5219\u5176\u5b83\u6838\u5fc3\u7684\u76f8\u5e94\u7684 Cache Lines \u90fd\u4f1a\u88ab\u65e0\u6548\u6389\uff0c\u7136\u540e\u90a3\u4e9b\u6838\u5fc3\u7684\u6307\u4ee4\u64cd\u4f5c\u5c06\u4f1a\u4e0d\u5f97\u4e0d\u91cd\u65b0\u901a\u8fc7\u603b\u7ebf\u8bbf\u95ee\u5185\u5b58\u6570\u636e\u3002 \u8fd9\u6837\u7684\u9891\u7e41\u7684 L1 \u5931\u6548\u5c06\u4f1a\u5bfc\u81f4\u9891\u7e41\u7684\u603b\u7ebf\u9501\uff0c\u8fdb\u4e00\u6b65\u5e26\u6765\u7684\u662f\u6027\u80fd\u4e25\u91cd\u4e0b\u964d\u7684\u540e\u679c\u3002 \u5728\u4e0b\u56fe\u4e2d\uff0c\u8bbe\u8ba1\u7684\u4e0d\u826f\u7684\u6570\u636e\u7ed3\u6784\u53ca\u5176\u7b97\u6cd5\uff0c\u7ebf\u7a0b 0 \u548c\u7ebf\u7a0b 1 \u7ea7\u65f6\u4fee\u6539\u7684\u662f\u4e0d\u540c\u7684\u53d8\u91cf\uff0c\u4e5f\u4f1a\u5f15\u53d1 Cache Line \u5931\u6548\uff0c\u5bfc\u81f4 false sharing \u95ee\u9898\u3002 False sharing occurs when threads on different processors modify variables that reside on the same cache line. This invalidates the cache line and forces a memory update to maintain cache coherency. Threads 0 and 1 require variables that are adjacent in memory and reside on the same cache line. The cache line is loaded into the caches of CPU 0 and CPU 1 (gray arrows). Even though the threads modify different variables (red and blue arrows), the cache line is invalidated, forcing a memory update to maintain cache coherency. \u6765\u81ea\u4e8e[^100] \u501f\u52a9 false sharing \u7279\u6027\u5f3a\u5236\u4ee4 L\u00bd \u5931\u6548\u4ee5\u4fbf\u4ece\u5185\u5b58\u603b\u7ebf\u4ece\u65b0\u8f7d\u5165\u6570\u636e\u3002 \u8bbe\u8ba1\u826f\u597d\u7684\u6570\u636e\u7ed3\u6784\u3001\u6216\u8005\u5229\u7528\u586b\u5145\u5b57\u8282\u6765\u907f\u514d false sharing \u7279\u6027\u5f15\u8d77\u7684\u9ad8\u901f\u7f13\u5b58\u5931\u6548\u95ee\u9898\uff0c\u4ece\u800c\u907f\u514d\u5f71\u54cd\u5230\u7cfb\u7edf\u6027\u80fd\u3002 \u540c\u6837\u5730\uff0c\u907f\u514d\u9ad8\u901f\u7f13\u5b58\u5931\u6548\uff0c\u4e5f\u80fd\u907f\u514d\u5fae\u6307\u4ee4\u7ea7\u522b\u7684\u9501\u5b9a\uff08\u901a\u5e38\u610f\u5473\u7740\u4e3b\u677f\u603b\u7ebf\u9501\uff09\uff0c\u9632\u6b62\u53d6\u5f97\u8fc7\u65f6\u7684\uff08\u810f\u7684\uff09\u6570\u636e\u3002 \u56e0\u4e3a\u7edd\u5927\u591a\u6570CPU\u90fd\u9002\u7528\u4e8e64\u5b57\u8282\u7684 Cache Line\uff0c\u6240\u4ee5\u5185\u5b58\u586b\u5145\u80fd\u591f\u6709\u6548\u5730\u907f\u514d\u6570\u636e\u88ab\u540c\u65f6\u8f7d\u5165\u4e0d\u540c\u7684CPU\u6838\u5fc3\u7684\u9ad8\u901f\u7f13\u5b58\u4e2d\u3002\u8fd9\u91cc\u7684\u610f\u601d\u662f\uff0c\u5047\u8bbe\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e2d\u7684\u4e24\u4e2a\u76f8\u90bb\u7684\u53d8\u91cf V1 \u548c V2 \u88ab\u586b\u5145\u5b57\u8282\u5206\u5f00\u4e86\uff0c\u90a3\u4e48\u6838\u5fc3 A \u5728\u8bbf\u95ee\u524d\u4e00\u4e2a\u53d8\u91cf V1 \u65f6\uff0c\u5c06\u65e0\u6cd5\u201c\u987a\u4fbf\u201d\u5730\u8fde\u540c\u540e\u4e00\u4e2a\u53d8\u91cf V2 \u4e00\u8d77\u52a0\u8f7d\u5230 A \u7684 Cache Line \u4e2d\uff0c\u56e0\u800c\u5176\u5b83\u6838\u5fc3\u5728\u8bbf\u95ee\u540e\u4e00\u4e2a\u53d8\u91cf V2 \u65f6\uff0c\u5c31\u4e0d\u4f1a\u56e0\u4e3a V2 \u5728\u6838\u5fc3 A \u7684 Cache Line \u4e2d\u800c\u5bfc\u81f4 false sharing\u3002 \u5728 Golang \u4e2d\uff0c\u53ef\u4ee5\u8fd9\u6837\u5f97\u77e5 Cache Line \u7684\u5927\u5c0f\uff1a const CacheLinePadSize = unsafe . Sizeof ( cpu . CacheLinePad {}) \u4e5f\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\u4e00\u4e2a\u201c\u6574\u201d\u7684\u586b\u5145\u5757\uff1a type ringBuf struct { _ cpu . CacheLinePad cap uint32 _ cpu . CacheLinePad capMod uint32 } \u6216\u8005\u901a\u8fc7\u8ba1\u7b97\u6765\u586b\u5145\uff1a type ringBuf struct { cap uint32 _ [ CacheLinePadSize - sizeof ( uint32 )] byte } Intel \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u7f13\u5b58\u95f4\u7684\u540c\u6b65\u95ee\u9898\uff0c\u5728 cache \u4e0a\u5b9e\u73b0\u4e86 MESIF \u534f\u8bae \uff0c\u6765\u4fdd\u8bc1\u7f13\u5b58\u7684\u540c\u6b65\uff0c\u5373\uff1a\u5728\u4e00\u5904\u4fee\u6539\u7f13\u5b58\u540e\uff0c\u5176\u5b83\u7f13\u5b58\u7684\u72b6\u6001\u4f1a\u8ddf\u7740\u6539\u53d8\u3002 \u4e00\u81f4\u6027\u539f\u8bed\u5728\u652f\u6301\u5e76\u884c\u7684\u8bed\u8a00\u91cc\u90fd\u6709\u652f\u6301\uff0cgolang \u4e5f\u4e0d\u4f8b\u5916\u3002golang \u5b98\u65b9\u5df2\u7ecf\u63d0\u4f9b\u7ed9\u6211\u4eec\u4e0d\u5c11\u8d44\u6599\u6765\u63cf\u8ff0\u8fd9\u4e2a\u95ee\u9898\uff0c\u9996\u5148\u5c31\u662f github \u4e0a\u7684 LearnConcurrency \uff0c\u91cc\u9762\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u4e00\u81f4\u6027\u539f\u8bed\u7684\u8bbe\u8ba1\u3001\u4f7f\u7528\u4e2d\u7684\u7ec6\u8282\u3002\u5176\u4e2d\u6700\u63a8\u8350\u770b\u7684\u662f\u8fd9\u7bc7 The Go Memory Model \uff0c\u4e0d\u4ec5\u5217\u4e3e\u4e86\u4e0d\u5c11\u4e00\u81f4\u6027\u539f\u8bed\u7684\u6b63\u786e\u6253\u5f00\u65b9\u5f0f\uff0c\u66f4\u662f\u5f15\u5165\u4e86 Happens Before \u8fd9\u4e00\u91cd\u8981\u6982\u5ff5\u3002 Golang \u4e00\u81f4\u6027\u539f\u8bed\u53ca\u5185\u5b58\u6a21\u578b \u00b6 \u7565 Go \u548c \u4e71\u5e8f\u6267\u884c \u00b6 atomic \u5305 \u00b6 \u6240\u6709 Store \u5185\u5b58\u7684\u64cd\u4f5c\uff0c\u5b9e\u9645\u4e0a\u90fd\u5e26\u4e86 LOCK \u524d\u7f00\uff0c\u4e5f\u5c31\u662f\u8bf4\u90fd\u6709 Happens Before \u7684\u8bed\u4e49\u3002\u800c golang \u5728\u5206\u914d\u5185\u5b58\u7684\u65f6\u5019\uff0c\u662f\u5b9e\u73b0\u4e86\u5185\u5b58\u5bf9\u9f50\u7684\uff0c\u6240\u4ee5\u5355\u7eaf\u5730 Load \u5185\u5b58\u7684\u64cd\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u64cd\u4f5c\u539f\u5b50\u6027\uff0c\u4f46\u4e0d\u4fdd\u8bc1 Happens Before \u7684\u8bed\u4e49\u3002\u8fd9\u4e5f\u521a\u597d\u89e3\u91ca\u4e86\u4e3a\u4f55\u5728 The Go Memory Model \u53ea\u5b57\u4e0d\u63d0 atomic \u548c Happens Before \u7684\u5173\u7cfb\u3002","title":"\u5e76\u53d1\u7f16\u7a0b\u548c\u591a\u6838\u7f16\u7a0b\u6982\u8981"},{"location":"algor/ringbuf/03.smp/#_1","text":"","title":"\u5e76\u53d1\u7f16\u7a0b\u548c\u591a\u6838\u7f16\u7a0b\u6982\u8981"},{"location":"algor/ringbuf/03.smp/#_2","text":"\u5185\u5b58\u5c4f\u969c\u662f\u4e00\u4e2a\u5927\u578b\u7684\u8bdd\u9898\u3002\u4e0b\u9762\u6211\u4eec\u6d53\u7f29\u4e00\u4e9b\u8981\u70b9\u3002 \u5185\u5b58\u5c4f\u969c\u8981\u8fbe\u5230\u7684\u76ee\u7684\uff0c\u662f\u4fdd\u8bc1\u5728 SMP \u67b6\u6784\u4e2d\uff0cCPU \u6838\u5fc3 A \u5bf9\u5185\u5b58\u7684\u5199\u5165\u52a8\u4f5c\u662f\u53ef\u88ab\u63a7\u5236\u7684\u6709\u5e8f\u7684\uff0c\u800c\u4e14\u5199\u5165\u7684\u6570\u636e\u80fd\u591f\u53cd\u6620\u5230\u5176\u5b83\u6838\u5fc3\u7684\u9ad8\u901f\u7f13\u5b58\u4e2d\uff08\u5982\u679c\u6709\u5fc5\u8981\u7684\u8bdd\uff09\u3002 \u5185\u5b58\u5c4f\u969c\u7684\u6839\u672c\u6027\u673a\u7406\uff0c\u5c31\u5728\u4e8e\u5bf9\u603b\u7ebf\u52a0\u9501\u3002 \u8fd9\u5f53\u7136\u662f\u7269\u7406\u7535\u8def\u4e0a\u5b9e\u73b0\u7684\uff0c\u4f46\u4e5f\u662f\u901a\u8fc7\u8bf8\u5982 lfense/sfence/mfense \u673a\u5668\u6307\u4ee4\u6765\u89e6\u53d1\u7684\uff08\u5bf9\u4e8e x86 \u6765\u8bf4\uff09\u3002\u901a\u8fc7\u603b\u7ebf\u9501\u5b9a\uff0cCPU \u591a\u4e2a\u6838\u5fc3\u7684\u5199\u5165\u52a8\u4f5c\u80fd\u591f\u4f9d\u636e\u4f8b\u5982 sfense \u7684\u5ba3\u544a\u6765\u987a\u6b21\u63d0\u4ea4\u5230\u5185\u5b58\u5730\u5740 M \u4e0a\uff0c\u5e76\u4e14\u80fd\u591f\u901a\u8fc7\u603b\u7ebf\u89e3\u9501\u7684\u4fe1\u53f7\u6765\u901a\u77e5\u5230 CPU \u7684\u6bcf\u4e2a\u6838\u5fc3\u80fd\u591f\u5c06\u76f8\u5e94\u7684\u9ad8\u901f\u7f13\u5b58\u6761\u76ee\u65e0\u6548\u5316\uff0c\u65e0\u6548\u5316\u7684\u540e\u679c\u5c31\u662f\u5f53\u6838\u5fc3 N \u6267\u884c\u4e0b\u4e00\u6307\u4ee4\u8bbf\u95ee M \u7684\u6570\u636e\u65f6\uff0c\u65b0\u9c9c\u7684\u6570\u636e\u7248\u672c\u80fd\u591f\u88ab\u91cd\u65b0\u8f7d\u5165\u5230\u6838\u5fc3 N \u7684\u9ad8\u901f\u7f13\u5b58\uff0c\u8fd9\u5c31\u89e3\u51b3\u4e86\u8fc7\u65f6\u7684\u810f\u6570\u636e\u95ee\u9898\uff0c\u4fdd\u8bc1\u4e86\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002","title":"\u5185\u5b58\u5c4f\u969c"},{"location":"algor/ringbuf/03.smp/#_3","text":"\u7565","title":"\u5185\u5b58\u6a21\u578b\u548c\u5185\u5b58\u987a\u5e8f"},{"location":"algor/ringbuf/03.smp/#_4","text":"","title":"\u6570\u636e\u4e00\u81f4\u6027"},{"location":"algor/ringbuf/03.smp/#gcc","text":"\u5728 Linux \u4e2d\uff0cgcc \u63d0\u4f9b\u7f16\u8bd1\u5668\u5c4f\u969c barrier() \u548c ACESS_ONCE()\uff0c\u6b64\u5916\u8fd8\u6709CPU\u5185\u5b58\u5c4f\u969c\uff1a \u901a\u7528\u5c4f\u969c\uff0c\u4fdd\u8bc1\u8bfb\u5199\u64cd\u4f5c\u6709\u5e8f\uff0c\u5305\u62ecmb()\u548csmp_mb(); \u5199\u64cd\u4f5c\u5c4f\u969c\uff0c\u4ec5\u4fdd\u8bc1\u5199\u64cd\u4f5c\u6709\u5e8f\uff0c\u5305\u62ecwmb()\u548csmp_wmb(); \u8bfb\u64cd\u4f5c\u5c4f\u969c\uff0c\u4ec5\u4fdd\u8bc1\u8bfb\u64cd\u4f5c\u6709\u5e8f\uff0c\u5305\u62ecrmb()\u548csmp_rmb(); \u6b64\u5916\uff0c\u4f7f\u7528 gcc \u5185\u5efa\u7684\u539f\u5b50\u64cd\u4f5c \uff0c\u5305\u62ec \u5bf9 int32\uff0cint64 \u7684 cmpxchg \u7b49\u7279\u6027\uff0c\u4e5f\u90fd\u5bf9\u6570\u636e\u4e00\u81f4\u6027\u63d0\u4f9b\u4e86\u76f8\u5e94\u7684\u652f\u6301\u3002\u6ce8\u610f C++11 \u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684 atomic\u5e93 \u6765\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\u3002","title":"Gcc"},{"location":"algor/ringbuf/03.smp/#golang","text":"\u5728 Golang \u4e2d\uff0c\u5185\u5b58\u5c4f\u969c\u3001\u5185\u5b58\u987a\u5e8f\u7b49\u6280\u672f\u70b9\u662f\u88ab\u9690\u542b\u5728 Go \u8bed\u8a00\u7f16\u7801\u7ea6\u5b9a\u4e2d\u7684\u3002\u8fd9\u4e9b\u7ea6\u5b9a\u5927\u4f53\u4e0a\u4f53\u73b0\u5728 \u5305\u521d\u59cb\u5316\u987a\u5e8f\uff0cGoroutine\u521b\u5efa\u3001\u9500\u6bc1\u3001\u4ee5\u53ca\u5171\u4eab\u53d8\u91cf\u5728\u4e3b\u7ebf\u7a0b\u4ee5\u53ca Goroutines \u4e4b\u95f4\u7684\u540c\u6b65\uff0cChannel\u901a\u8baf\uff0c\u9501\uff08sync\u5305\uff09\u7b49\u65b9\u9762[^4]\u3002 \u6ce8\u610f\u5230\u9664\u4e86\u9690\u542b\u7ea6\u5b9a\u4e4b\u5916\uff0c\u4f60\u7684\u786e\u53ef\u4ee5\u4f7f\u7528 sync \u5305\u63d0\u4f9b\u7684\u9501\u6765\u8fbe\u5230\u540c\u6b65\u76ee\u7684\u3002\u6b64\u5916\uff0cGo \u4e5f\u63d0\u4f9b\u6807\u51c6\u7684 atomic \u5305\u6765\u652f\u6301\u539f\u5b50\u64cd\u4f5c\uff08\u8bf8\u5982 int32, uint64 \u7b49\uff09 \u5168\u9762\u8ba8\u8bba \u591a\u6838\u3001\u5e76\u53d1\u7f16\u7a0b\uff0c\u5df2\u7ecf\u662f\u4e00\u6574\u672c\u4e66\u7684\u95ee\u9898\uff0c\u56e0\u6b64\u8fd9\u91cc\u53ea\u80fd\u62e9\u5176\u6982\u8981\u8fdb\u884c\u7b80\u8ff0\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u73b0\u5728\u5c31\u8981\u7efc\u5408\u4e0a\u8ff0\u7684\u5404\u79cd\u77e5\u8bc6\u70b9\u6765\u5177\u4f53\u5b9e\u73b0\u4e00\u4e2a\u65e0\u9501\u7684\u73af\u5f62\u961f\u5217\uff0c\u8fd9\u4e2a\u961f\u5217\u662f\u6709\u754c\u7684\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5728\u62b5\u8fbe\u8fb9\u754c\u65f6\u7684\u884c\u4e3a\u662f\u9501\u5b9a\u8fd8\u662f\u8986\u76d6\u3002\u4e0b\u9762\u6211\u4eec\u5177\u4f53\u6765\u7814\u7a76\u7ec6\u8282\u3002","title":"Golang \u4e2d\u7684\u6570\u636e\u4e00\u81f4\u6027"},{"location":"algor/ringbuf/03.smp/#false-sharing","text":"\u5047\u5171\u4eab false sharing \u662f\u4e00\u79cd\u5728 SMP \u4e0a\u7279\u6709\u7684\u6027\u80fd\u95ee\u9898\u3002 \u8fd9\u4e2a\u95ee\u9898\u6e90\u4e8e SMP \u7cfb\u7edf\u4e2d\u6bcf\u4e2a CPU \u6838\u5fc3\u5747\u914d\u6709\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\uff08\u4ee5\u4e0b\u7528 L1 \u6307\u4ee3\u5b83\uff09\u3002\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\u901a\u5e38\u5305\u542b\u4e86\u4e00\u7ec4 Cache Line\uff08\u4e5f\u79f0\u4f5c Cache Block\uff09\uff0c\u5f53 CPU \u6838\u5fc3\u8bbf\u95ee\u5185\u5b58\u6570\u636e\u65f6\uff0c\u5b83\u4f1a\u4ece\u5185\u5b58\u5730\u5740 Addr \u5904\u5f00\u59cb\uff0c\u8fde\u7eed\u8bfb\u53d6\u591a\u4e2a\u5b57\u8282\u5230\u4e00\u4e2a Cache Line \u4e2d\uff08\u6211\u4eec\u77e5\u9053\u591a\u6570 CPU \u7684 Cache Line \u7684\u5927\u5c0f\u90fd\u662f 64 \u5b57\u8282\uff09\u3002\u8fd9\u6837\uff0c\u5f53\u4e0b\u4e00\u6761\u6307\u4ee4\u5728\u64cd\u4f5c\u76f8\u5173\u7684\u5185\u5b58\u65f6\u5c31\u65e0\u9700\u901a\u8fc7\u603b\u7ebf\u53bb\u8bfb\u53d6\u5185\u5b58\u6570\u636e\u4e86\uff0c\u6b64\u65f6\u5c31\u8868\u793a\u4e00\u4e2a Cache Line \u88ab\u547d\u4e2d\u4e86\u3002 CPU \u9ad8\u901f\u7f13\u5b58\u4ee5\u53ca\u5185\u5b58\u7684\u8bbf\u95ee\u5ef6\u8fdf\uff1a \u53ef\u60f3\u800c\u77e5\uff0c\u5982\u679c\u591a\u9897 CPU \u6838\u5fc3\u7684 L1 \u4eec\u540c\u65f6\u90fd\u6709\u5185\u5b58\u5730\u5740 Addr \u5904\u7684\u6570\u636e\u5757\u5728\u5b83\u4eec\u5404\u81ea\u7684 Cache Lines \u4e2d\u7684\u8bdd\uff0c\u67d0\u4e2a\u6838\u5fc3\u5982\u679c\u4fee\u6539\u4e86\u8be5\u6570\u636e\u5757\uff0c\u5219\u5176\u5b83\u6838\u5fc3\u7684\u76f8\u5e94\u7684 Cache Lines \u90fd\u4f1a\u88ab\u65e0\u6548\u6389\uff0c\u7136\u540e\u90a3\u4e9b\u6838\u5fc3\u7684\u6307\u4ee4\u64cd\u4f5c\u5c06\u4f1a\u4e0d\u5f97\u4e0d\u91cd\u65b0\u901a\u8fc7\u603b\u7ebf\u8bbf\u95ee\u5185\u5b58\u6570\u636e\u3002 \u8fd9\u6837\u7684\u9891\u7e41\u7684 L1 \u5931\u6548\u5c06\u4f1a\u5bfc\u81f4\u9891\u7e41\u7684\u603b\u7ebf\u9501\uff0c\u8fdb\u4e00\u6b65\u5e26\u6765\u7684\u662f\u6027\u80fd\u4e25\u91cd\u4e0b\u964d\u7684\u540e\u679c\u3002 \u5728\u4e0b\u56fe\u4e2d\uff0c\u8bbe\u8ba1\u7684\u4e0d\u826f\u7684\u6570\u636e\u7ed3\u6784\u53ca\u5176\u7b97\u6cd5\uff0c\u7ebf\u7a0b 0 \u548c\u7ebf\u7a0b 1 \u7ea7\u65f6\u4fee\u6539\u7684\u662f\u4e0d\u540c\u7684\u53d8\u91cf\uff0c\u4e5f\u4f1a\u5f15\u53d1 Cache Line \u5931\u6548\uff0c\u5bfc\u81f4 false sharing \u95ee\u9898\u3002 False sharing occurs when threads on different processors modify variables that reside on the same cache line. This invalidates the cache line and forces a memory update to maintain cache coherency. Threads 0 and 1 require variables that are adjacent in memory and reside on the same cache line. The cache line is loaded into the caches of CPU 0 and CPU 1 (gray arrows). Even though the threads modify different variables (red and blue arrows), the cache line is invalidated, forcing a memory update to maintain cache coherency. \u6765\u81ea\u4e8e[^100] \u501f\u52a9 false sharing \u7279\u6027\u5f3a\u5236\u4ee4 L\u00bd \u5931\u6548\u4ee5\u4fbf\u4ece\u5185\u5b58\u603b\u7ebf\u4ece\u65b0\u8f7d\u5165\u6570\u636e\u3002 \u8bbe\u8ba1\u826f\u597d\u7684\u6570\u636e\u7ed3\u6784\u3001\u6216\u8005\u5229\u7528\u586b\u5145\u5b57\u8282\u6765\u907f\u514d false sharing \u7279\u6027\u5f15\u8d77\u7684\u9ad8\u901f\u7f13\u5b58\u5931\u6548\u95ee\u9898\uff0c\u4ece\u800c\u907f\u514d\u5f71\u54cd\u5230\u7cfb\u7edf\u6027\u80fd\u3002 \u540c\u6837\u5730\uff0c\u907f\u514d\u9ad8\u901f\u7f13\u5b58\u5931\u6548\uff0c\u4e5f\u80fd\u907f\u514d\u5fae\u6307\u4ee4\u7ea7\u522b\u7684\u9501\u5b9a\uff08\u901a\u5e38\u610f\u5473\u7740\u4e3b\u677f\u603b\u7ebf\u9501\uff09\uff0c\u9632\u6b62\u53d6\u5f97\u8fc7\u65f6\u7684\uff08\u810f\u7684\uff09\u6570\u636e\u3002 \u56e0\u4e3a\u7edd\u5927\u591a\u6570CPU\u90fd\u9002\u7528\u4e8e64\u5b57\u8282\u7684 Cache Line\uff0c\u6240\u4ee5\u5185\u5b58\u586b\u5145\u80fd\u591f\u6709\u6548\u5730\u907f\u514d\u6570\u636e\u88ab\u540c\u65f6\u8f7d\u5165\u4e0d\u540c\u7684CPU\u6838\u5fc3\u7684\u9ad8\u901f\u7f13\u5b58\u4e2d\u3002\u8fd9\u91cc\u7684\u610f\u601d\u662f\uff0c\u5047\u8bbe\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e2d\u7684\u4e24\u4e2a\u76f8\u90bb\u7684\u53d8\u91cf V1 \u548c V2 \u88ab\u586b\u5145\u5b57\u8282\u5206\u5f00\u4e86\uff0c\u90a3\u4e48\u6838\u5fc3 A \u5728\u8bbf\u95ee\u524d\u4e00\u4e2a\u53d8\u91cf V1 \u65f6\uff0c\u5c06\u65e0\u6cd5\u201c\u987a\u4fbf\u201d\u5730\u8fde\u540c\u540e\u4e00\u4e2a\u53d8\u91cf V2 \u4e00\u8d77\u52a0\u8f7d\u5230 A \u7684 Cache Line \u4e2d\uff0c\u56e0\u800c\u5176\u5b83\u6838\u5fc3\u5728\u8bbf\u95ee\u540e\u4e00\u4e2a\u53d8\u91cf V2 \u65f6\uff0c\u5c31\u4e0d\u4f1a\u56e0\u4e3a V2 \u5728\u6838\u5fc3 A \u7684 Cache Line \u4e2d\u800c\u5bfc\u81f4 false sharing\u3002 \u5728 Golang \u4e2d\uff0c\u53ef\u4ee5\u8fd9\u6837\u5f97\u77e5 Cache Line \u7684\u5927\u5c0f\uff1a const CacheLinePadSize = unsafe . Sizeof ( cpu . CacheLinePad {}) \u4e5f\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\u4e00\u4e2a\u201c\u6574\u201d\u7684\u586b\u5145\u5757\uff1a type ringBuf struct { _ cpu . CacheLinePad cap uint32 _ cpu . CacheLinePad capMod uint32 } \u6216\u8005\u901a\u8fc7\u8ba1\u7b97\u6765\u586b\u5145\uff1a type ringBuf struct { cap uint32 _ [ CacheLinePadSize - sizeof ( uint32 )] byte } Intel \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u7f13\u5b58\u95f4\u7684\u540c\u6b65\u95ee\u9898\uff0c\u5728 cache \u4e0a\u5b9e\u73b0\u4e86 MESIF \u534f\u8bae \uff0c\u6765\u4fdd\u8bc1\u7f13\u5b58\u7684\u540c\u6b65\uff0c\u5373\uff1a\u5728\u4e00\u5904\u4fee\u6539\u7f13\u5b58\u540e\uff0c\u5176\u5b83\u7f13\u5b58\u7684\u72b6\u6001\u4f1a\u8ddf\u7740\u6539\u53d8\u3002 \u4e00\u81f4\u6027\u539f\u8bed\u5728\u652f\u6301\u5e76\u884c\u7684\u8bed\u8a00\u91cc\u90fd\u6709\u652f\u6301\uff0cgolang \u4e5f\u4e0d\u4f8b\u5916\u3002golang \u5b98\u65b9\u5df2\u7ecf\u63d0\u4f9b\u7ed9\u6211\u4eec\u4e0d\u5c11\u8d44\u6599\u6765\u63cf\u8ff0\u8fd9\u4e2a\u95ee\u9898\uff0c\u9996\u5148\u5c31\u662f github \u4e0a\u7684 LearnConcurrency \uff0c\u91cc\u9762\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u4e00\u81f4\u6027\u539f\u8bed\u7684\u8bbe\u8ba1\u3001\u4f7f\u7528\u4e2d\u7684\u7ec6\u8282\u3002\u5176\u4e2d\u6700\u63a8\u8350\u770b\u7684\u662f\u8fd9\u7bc7 The Go Memory Model \uff0c\u4e0d\u4ec5\u5217\u4e3e\u4e86\u4e0d\u5c11\u4e00\u81f4\u6027\u539f\u8bed\u7684\u6b63\u786e\u6253\u5f00\u65b9\u5f0f\uff0c\u66f4\u662f\u5f15\u5165\u4e86 Happens Before \u8fd9\u4e00\u91cd\u8981\u6982\u5ff5\u3002","title":"false sharing"},{"location":"algor/ringbuf/03.smp/#golang_1","text":"\u7565","title":"Golang \u4e00\u81f4\u6027\u539f\u8bed\u53ca\u5185\u5b58\u6a21\u578b"},{"location":"algor/ringbuf/03.smp/#go","text":"","title":"Go \u548c \u4e71\u5e8f\u6267\u884c"},{"location":"algor/ringbuf/03.smp/#atomic","text":"\u6240\u6709 Store \u5185\u5b58\u7684\u64cd\u4f5c\uff0c\u5b9e\u9645\u4e0a\u90fd\u5e26\u4e86 LOCK \u524d\u7f00\uff0c\u4e5f\u5c31\u662f\u8bf4\u90fd\u6709 Happens Before \u7684\u8bed\u4e49\u3002\u800c golang \u5728\u5206\u914d\u5185\u5b58\u7684\u65f6\u5019\uff0c\u662f\u5b9e\u73b0\u4e86\u5185\u5b58\u5bf9\u9f50\u7684\uff0c\u6240\u4ee5\u5355\u7eaf\u5730 Load \u5185\u5b58\u7684\u64cd\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u64cd\u4f5c\u539f\u5b50\u6027\uff0c\u4f46\u4e0d\u4fdd\u8bc1 Happens Before \u7684\u8bed\u4e49\u3002\u8fd9\u4e5f\u521a\u597d\u89e3\u91ca\u4e86\u4e3a\u4f55\u5728 The Go Memory Model \u53ea\u5b57\u4e0d\u63d0 atomic \u548c Happens Before \u7684\u5173\u7cfb\u3002","title":"atomic \u5305"},{"location":"algor/ringbuf/04.impl/","text":"Golang\u7248\u672c\u73af\u5f62\u961f\u5217\u5b9e\u73b0 \u00b6 https://github.com/hedzr/go-ringbuf \u4e0b\u9762\u5c06\u4f9d\u636e\u524d\u9762\u7684\u80cc\u666f\u77e5\u8bc6\u5b9e\u73b0\u4e00\u4e2a\u65e0\u9501\u7684\u73af\u5f62\u961f\u5217\uff08Circular Queue\uff0cRing Buffer\uff09\uff0c\u5c3d\u53ef\u80fd\u5730\u89e3\u9664\u5404\u79cd\u7ade\u4e89\u72b6\u51b5\u3002 \u57fa\u672c\u5b9a\u4e49 \u00b6 \u9996\u5148\u662f\u961f\u5217\u7684\u5927\u5c0f\uff0c\u591a\u6570\u5df2\u6709\u7684\u73af\u5f62\u961f\u5217\u5747\u63a8\u8350\u4f7f\u7528 2 \u7684\u51a5\u6570\uff08 2^n \uff09\u4e3a\u961f\u5217\u5c3a\u5bf8\uff0c\u5176\u597d\u5904\u5728\u4e8e\u901a\u8fc7\u548c 2^n-1 \u7684 AND \u64cd\u4f5c\u5373\u53ef\u5c06 head / tail \u6307\u9488\u7ed5\u56de\uff0c\u907f\u514d\u4e86 mod \u64cd\u4f5c\u3002\u5728 CPU \u6307\u4ee4\u96c6\u4e2d\uff0c mod \u64cd\u4f5c\u4f9d\u8d56\u4e8e\u4e00\u4e2a IDIV \uff08\u6574\u6570\u9664\u6cd5\uff09\u8fd0\u7b97\uff0c\u8fd9\u901a\u5e38\u662f AND \u64cd\u4f5c\u8017\u65f6\u7684\u6570\u500d\u3002 \u5176\u6b21\u662f ringbuf \u7ed3\u6784\u4f53\u7684\u5bf9\u9f50\uff0c\u5728 Golang \u4e2d\u8fd9\u662f\u81ea\u52a8\u7684\uff0c\u6240\u4ee5\u6ca1\u6709\u4ec0\u4e48\u53ef\u8bf4\u7684\u3002 \u4e3a\u4e86\u89e3\u51b3 ringbuf \u5143\u7d20\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20 rbItem \u7684 CacheLine \u95ee\u9898\uff0c\u6211\u4eec\u5bf9\u5176\u8fdb\u884c\u4e86\u586b\u5145\uff0c\u4f7f\u5f97\u4e00\u4e2a rbItem \u80fd\u591f\u5360\u6ee1\u4e00\u4e2a CacheLine\u3002 type ( Queue interface { Enqueue ( item interface {}) ( err error ) Dequeue () ( item interface {}, err error ) // Cap returns the outer capacity of the ring buffer. Cap () uint32 // Size returns the quantity of items in the ring buffer queue Size () uint32 IsEmpty () ( b bool ) IsFull () ( b bool ) } RingBuffer interface { io . Closer // for logger Queue Put ( item interface {}) ( err error ) Get () ( item interface {}, err error ) // Quantity returns the quantity of items in the ring buffer queue Quantity () uint32 Debug ( enabled bool ) ( lastState bool ) ResetCounters () } ringBuf struct { cap uint32 capModMask uint32 head uint32 tail uint32 putWaits uint64 getWaits uint64 _ [ CacheLinePadSize ] byte data [] rbItem debugMode bool logger * zap . Logger } rbItem struct { readWrite uint64 // 0: writable, 1: readable, 2: write ok, 3: read ok value interface {} // ptr _ [ CacheLinePadSize - 8 - 8 ] byte // _ cpu.CacheLinePad } ) \u81f3\u4e8e Queue \u548c RingBuffer \u662f\u5e93\u4f5c\u8005\u7684\u4f8b\u884c\u64cd\u4f5c\uff0c\u5c31\u4e0d\u8d58\u8ff0\u4e86\u3002 \u5728 rbItem \u4e2d\u589e\u52a0\u4e86 CacheLine \u5bf9\u9f50\u5b57\u6bb5\uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514d\u6bcf\u4e2a producer/consumer \u64cd\u4f5c\u4e00\u4e2a rbItem \u65f6\u5f7c\u6b64\u4e4b\u95f4\u53d1\u751f false sharing \u5e72\u6270\u3002\u56e0\u6b64\uff0c\u591a\u4e2a rbItem \u65e0\u6cd5\u88ab\u540c\u65f6\u8f7d\u5165\u4e00\u4e2a Cache Line \u4e2d\uff0c\u6240\u4ee5\u6570\u636e\u7ade\u4e89\u7684\u95ee\u9898\u4e5f\u540c\u65f6\u88ab\u907f\u514d\u4e86\u3002\u5b9e\u6d4b\u5462\uff0c\u597d\u50cf\u6709\u70b9\u70b9\u6539\u5584\uff0c\u4f46\u4e5f\u6ca1\u6709\u597d\u5230\u4e00\u500d\u7684\u72b6\u6001\uff0c\u4e0d\u8fc7\u5373\u4f7f\u6ca1\u6709\u6027\u80fd\u6539\u5584\uff0c\u4e3a\u4e86 DATA RACE \u4e5f\u5fc5\u987b\u8fdb\u884c\u8fd9\u6837\u7684\u5bf9\u9f50\uff0c\u624d\u80fd\u786e\u4fdd\u5728\u8fd9\u91cc\u4e0d\u5fc5\u5f15\u5165\u4e00\u9897\u9501\u3002 \u5728 ringBuf \u4e2d\u540c\u6837\u4e5f\u6709\u5bf9\u9f50\u5b57\u6bb5\u4ee5\u514d\u64cd\u4f5c head/tail/putWaits/getWaits \u65f6\u5173\u8054\u8f7d\u5165 data \u6307\u9488\uff0c\u4e0d\u8fc7\u6b63\u56e0\u4e3adata\u662f\u6307\u9488\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5bf9\u9f50\u5b57\u6bb5\u7684\u6548\u7528\u901a\u5e38\u4e3a 0\u3002\u4e3a\u4e86\u4ee3\u7801\u53ef\u79fb\u690d\u6027\uff08\u5230 C++11 \u6a21\u7248\u7c7b\uff1f\uff09\uff0c\u6682\u4e14\u4fdd\u7559\u8be5\u5bf9\u9f50\u3002 \u64cd\u4f5c \u00b6 \u6d4b\u8bd5\uff1a\u961f\u5217\u7a7a\uff0c\u961f\u5217\u6ee1 \u00b6 func ( rb * ringBuf ) IsEmpty () ( b bool ) { var tail , head uint32 var quad uint64 quad = atomic . LoadUint64 (( * uint64 )( unsafe . Pointer ( & rb . head ))) head = ( uint32 )( quad & MaxUint32_64 ) tail = ( uint32 )( quad >> 32 ) // var tail, head uint32 // head = atomic.LoadUint32(&rb.head) // tail = atomic.LoadUint32(&rb.tail) b = head == tail return } func ( rb * ringBuf ) IsFull () ( b bool ) { var tail , head uint32 var quad uint64 quad = atomic . LoadUint64 (( * uint64 )( unsafe . Pointer ( & rb . head ))) head = ( uint32 )( quad & MaxUint32_64 ) tail = ( uint32 )( quad >> 32 ) b = (( tail + 1 ) & rb . capModMask ) == head return } \u5173\u4e8e head/tail \u7684\u8f7d\u5165\u4f18\u5316 \u00b6 \u7531\u4e8e\u6211\u4eec\u9650\u5b9a\u4e86 head \u548c tail \u6307\u9488\u4e3a 32 \u4f4d\u6574\u6570\uff0c\u56e0\u6b64\u539f\u5b50\u64cd\u4f5c\u53ef\u4ee5\u4e00\u6b21\u53d6\u5f97\u5b83\u4eec\u800c\u4e0d\u662f\u4e24\u6b21\u3002\u8fd9\u80fd\u591f\u5e26\u6765\u5c0f\u5c0f\u7684\u63d0\u5347\uff0c\u5b9e\u6d4b\u8bc1\u660e\u4e86\u6709\u5176\u5b58\u5728\u7684\u4ef7\u503c\u3002 \u5982\u679c CPU \u67b6\u6784\u4f7f\u7528 Big Endian \u6a21\u5f0f\uff0c\u4e0a\u8ff0\u4ee3\u7801\u9700\u8981\u88ab\u8c03\u6574\u3002 \u5728\u79fb\u690d\u65f6\u624d\u4f1a\u8003\u8651\u9488\u5bf9\u6027\u6539\u5199\u3002 \u8003\u8651\u8fdb\u4e00\u6b65\u4f18\u5316 \uff1a \u5982\u679c\u662f C++/C/ASM\u7684\u8bdd\uff0c\u539f\u5b50\u6307\u4ee4\u7684\u76f8\u5173\u51fd\u6570\u8c03\u7528\u53ef\u4ee5\u53bb\u6389\uff0cquard\uff0ctail\uff0chead\u53ef\u4ee5\u4f7f\u7528\u5bc4\u5b58\u5668\uff0c\u4e5f\u65e0\u9700 AND \u548c SHIFT \u8fd0\u7b97\u3002 binary \u5305\u5bf9\u6b64\u6ca1\u6709\u5e2e\u52a9\u3002 \u8fdb\u4e00\u6b65\u7684\u9488\u5bf9 head/tail \u7684\u4f18\u5316 \u00b6 \u7531\u4e8e put \u64cd\u4f5c\u4f7f\u7528 tail \u548c head\uff0c\u4f46\u4e0d\u4f1a\u4fee\u6539 head\uff08\u76f8\u5e94\u7684 get \u64cd\u4f5c\u4e5f\u7c7b\u4f3c\u4e8e\u6b64\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u6709\u53e6\u4e00\u4e2a\u9009\u62e9\u8fdb\u884c\u6027\u80fd\u63d0\u5347\uff1a \u5206\u79bb head \u548c tail \u7684\u5b58\u50a8\u4f4d\u7f6e\u4fdd\u8bc1\u4e0d\u4f1a\u540c\u65f6\u8f7d\u5165\u5355\u4e00 CacheLine\u3002 \u8fd9\u4e2a\u7b56\u7565\u53ef\u4ee5\u8fd9\u6837\u5b9e\u73b0\uff1a ringBuf struct { cap uint32 capModMask uint32 _ [ CacheLinePadSize - 8 ] byte head uint32 _ [ CacheLinePadSize - 4 ] byte tail uint32 _ [ CacheLinePadSize - 4 ] byte putWaits uint64 _ [ CacheLinePadSize - 8 ] byte getWaits uint64 _ [ CacheLinePadSize - 8 ] byte data [] rbItem debugMode bool logger * zap . Logger } // \u6b64\u65f6\u9700\u8981\u5206\u522b\u53d6\u5f97 head tail\uff1a var tail , head uint32 head = atomic . LoadUint32 ( & rb . head ) tail = atomic . LoadUint32 ( & rb . tail ) \u8fd9\u79cd\u65b9\u6cd5\u5e94\u8be5\u6bd4\u5f53\u524d\u7684\u7b80\u8981\u65b9\u6848\u66f4\u5177\u6709\u4f18\u52bf\u3002\u4f46\u662f\u51fa\u4e8e\u8bd5\u9a8c\u7684\u76ee\u7684\uff0c\u6211\u4eec\u6682\u65f6\u6ca1\u6709\u5e94\u7528\u8be5\u65b9\u6848\uff0c\u800c\u662f\u5c06\u6b64\u4f18\u5316\u63a8\u8fdf\u5230 v1.x \u53d1\u5e03\u65f6\u3002\u76ee\u524d go-ringbuf v0.7.x \u5c06\u91c7\u7528\u524d\u6587\u8ff0\u53ca\u5230\u5355\u6b21\u539f\u5b50\u64cd\u4f5c\u65b9\u6848\u3002 \u5173\u4e8e\u5224\u5b9a\u7b97\u6cd5 \u00b6 \u6211\u4eec\u91c7\u7528\u6807\u51c6\u7684\u73af\u5f62\u961f\u5217\u5b9e\u73b0\u65b9\u6848\uff1a \u4fdd\u7559\u4e00\u4e2a\u5143\u7d20\u7684\u7a7a\u95f4 \u5373\u4e0d\u5141\u8bb8 tail \u8d76\u4e0a head\uff0c\u961f\u5c3e\u8282\u70b9\u548c\u5bf9\u9996\u8282\u70b9\u4e4b\u95f4\u81f3\u5c11\u7559\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u7a7a\u95f4\u3002 \u5982\u679c head == tail\uff0c\u961f\u5217\u7a7a\uff1b \u5982\u679c (tail+1) % M == head\uff0c\u961f\u5217\u6ee1\u3002 Cap \u548c Size \u00b6 Cap() \u8868\u793a\u73af\u5f62\u961f\u5217\u7684\u5bb9\u91cf\uff0c Size() \u53ca\u5176\u540c\u4e49\u8bcd Quantity() \u8fd4\u56de\u7684\u662f\u5f53\u524d\u961f\u5217\u4e2d\u7684\u5143\u7d20\u6570\u91cf\u3002 func ( rb * ringBuf ) Quantity () uint32 { return rb . Size () } func ( rb * ringBuf ) Size () uint32 { var quantity uint32 // head = atomic.LoadUint32(&rb.head) // tail = atomic.LoadUint32(&rb.tail) var tail , head uint32 var quad uint64 quad = atomic . LoadUint64 (( * uint64 )( unsafe . Pointer ( & rb . head ))) head = ( uint32 )( quad & MaxUint32_64 ) tail = ( uint32 )( quad >> 32 ) if tail >= head { quantity = tail - head } else { quantity = rb . capModMask + ( tail - head ) } return quantity } func ( rb * ringBuf ) Cap () uint32 { return rb . cap } Enqueue / Put \u00b6 \u4e00\u4e9b\u65e0\u9501\u65b9\u6848\u5728\u5b9e\u73b0\u4e4b\u540e\u4f1a\u663e\u5f97\u8f83\u4e3a\u7384\u5999\uff0c\u8fd9\u5f53\u7136\u662f\u4f53\u73b0\u4e86\u8bbe\u8ba1\u8005\u7684\u7cbe\u5de7\u601d\u8def\u7684\u3002\u5176\u9ebb\u70e6\u5728\u4e8e\uff0c\u914d\u56fe\u914d\u8bba\u6587\u90fd\u4e0d\u5bb9\u6613\u6539\u5584\u5b83\u4eec\u7684\u53ef\u8bfb\u6027\u3002 Put \u7b97\u6cd5 \u00b6 \u5728\u6211\u4eec\u7684 ringBuf \u4e2d\uff0c\u89e3\u51b3\u65e0\u9501\u4ee5\u53ca\u907f\u8ba9\u95ee\u9898\u91c7\u7528\u4e86\u6bd4\u8f83\u660e\u6670\u800c\u4e14\u7b80\u6d01\u7684\u8def\u5b50\uff0c\u5176\u601d\u8def\u662f\u8fd9\u6837\u7684\uff1a \u6bcf\u4e2a rbItem \u627f\u8f7d\u7740\u4e00\u4e2a\u6807\u5fd7 readWrite \u4ee5\u53ca\u5143\u7d20\u5b9e\u4f53 value \u7533\u8bf7\u961f\u5c3e\u5199\u5165\u6743 \u5f53\u5165\u961f\u5217\u64cd\u4f5c\u65f6\uff0c\u9996\u5148\u671f\u5f85 readWrite == 0\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u961f\u5217\u5c3e\u90e8\u7684 rbItem \u662f\u5e72\u51c0\u7684\uff0c\u5199\u5165\u5c31\u7eea\u7684\uff08\u5373\u7a7a\u95f2\u72b6\u6001\uff09\uff1b \u4e00\u65e6\u539f\u5b50\u64cd\u4f5c\u786e\u8ba4\u5230\u8fd9\u6837\u7684\u961f\u5217\u5c3e\u90e8 rbItem \uff0c\u5219\u5176 readWrite \u6807\u5fd7\u4e5f\u88ab\u66f4\u65b0\u4e3a 2\u3002\u8fd9\u8868\u793a\u7740\u8be5 rbItem \u88ab\u7533\u8bf7\u6210\u529f\u4e86\u3002\u5176\u5b83 producers \u5c06\u65e0\u6cd5\u53d6\u5f97\u8be5 rbItem \u4f5c\u4e3a\u5b83\u4eec\u7684\u5199\u5165\u76ee\u6807\u4e86\u3002 \u73b0\u5728\u662f\u65f6\u5019\u66f4\u65b0 tail \u6307\u9488\u5230\u4e0b\u4e00\u5143\u7d20\u4e86 \u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u66f4\u65b0 value \u6210\u5458\uff08\u591a\u4e2a rbItem \u65e0\u6cd5\u88ab\u540c\u65f6\u8f7d\u5165\u4e00\u4e2a Cache Line \u4e2d\uff09 \u6700\u540e\uff0c\u6211\u4eec\u5c06 readWrite \u6807\u5fd7\u66f4\u65b0\u4e3a 1 \uff0c\u8fd9\u6807\u5fd7\u7740\u5165\u5217\u64cd\u4f5c\u5df2\u7ecf\u5b8c\u6210\uff0c\u8fd9\u4e2a rbItem \u73b0\u5728\u662f\u8bfb\u51fa\u5c31\u7eea\u7684 func ( rb * ringBuf ) Enqueue ( item interface {}) ( err error ) { var tail , head , nt uint32 var holder * rbItem for { var quad uint64 quad = atomic . LoadUint64 (( * uint64 )( unsafe . Pointer ( & rb . head ))) head = ( uint32 )( quad & MaxUint32_64 ) tail = ( uint32 )( quad >> 32 ) // head = atomic.LoadUint32(&rb.head) // tail = atomic.LoadUint32(&rb.tail) nt = ( tail + 1 ) & rb . capModMask isFull := nt == head if isFull { err = ErrQueueFull return } holder = & rb . data [ tail ] if atomic . CompareAndSwapUint64 ( & holder . readWrite , 0 , 2 ) { holder . value = item atomic . CompareAndSwapUint32 ( & rb . tail , tail , nt ) break } time . Sleep ( 1 * time . Nanosecond ) atomic . AddUint64 ( & rb . putWaits , 1 ) } if ! atomic . CompareAndSwapUint64 ( & holder . readWrite , 2 , 1 ) { err = fmt . Errorf ( \"[W] %w, 2=>1, %v\" , ErrRaced , holder . readWrite ) return } return } \u4f8b\u5916\u60c5\u51b5 \u00b6 \u6b65\u9aa42 \u64cd\u4f5c\u5931\u8d25\u65f6\uff0c\u610f\u5473\u7740\u5176\u5b83 producers \u5df2\u7ecf\u62ff\u5230\u4e86\u961f\u5c3e rbItem \u7684\u5199\u5165\u6743\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a 1ns \u7684\u5ef6\u8fdf\u5e76\u518d\u6b21\u81ea\u65cb\uff0c\u4ee5\u6c42\u53d6\u5f97\u65b0\u7684\u961f\u5c3e\u5199\u5165\u6743\u3002 \u6b65\u9aa43 \u7684\u539f\u5b50\u64cd\u4f5c\u53ef\u80fd\u4f1a\u5931\u8d25\u3002 \u8fd9\u4ee3\u8868\u7740\u8fd9\u4e2a\u961f\u5c3e\u5df2\u7ecf\u65e7\u4e86\uff0c\u65b0\u7684\u961f\u5c3e\u5df2\u7ecf\u88ab\u522b\u7684 producers \u63d0\u4ea4\u6210\u529f\u4e86\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u5ffd\u7565 tail \u7684\u66f4\u65b0\u4e0d\u6210\u529f\u7684\u95ee\u9898\u3002 \u6b65\u9aa44 \u5b58\u5728\u5076\u7136\u7684\u53ef\u80fd\u6027\u4f1a\u5931\u8d25\u3002 \u8fd9\u79cd\u53ef\u80fd\u6027\u53d1\u751f\u65f6\uff0c\u4ee3\u8868\u7740\u8fd0\u884c\u73af\u5883\u5df2\u7ecf\u5d29\u584c\u4e86\uff0c\u5c5e\u4e8e\u81f4\u547d\u6027\u9519\u8bef\u3002 \u6682\u65f6\uff0c\u6211\u4e0d\u80fd\u6392\u9664\u65f6\u7b97\u6cd5\u9519\u8bef\u7684\u56e0\u7d20\u5e26\u6765\u7684\u8fd9\u4e2a\u9519\u8bef\uff0c\u4f46\u76ee\u524d\u7ecf\u8fc7\u5927\u91cf\u5de5\u7a0b\u5b9e\u6d4b\u9a8c\u8bc1\u6765\u770b\uff0c\u7b97\u6cd5\u53ef\u80fd\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u4f46\u6ca1\u6709\u7f3a\u9677\u3002 \u7406\u8bba\u4e0a\u7684\u8bc1\u660e\u9700\u8981\u53e6\u5916\u6210\u6587\u4e86\uff0c\u4ee5\u540e\u518d\u8bf4\u4e86\u3002 Dequeue / Get \u00b6 Get\u7b97\u6cd5 \u00b6 \u7c7b\u4f3c\u4e8e Put \u7b97\u6cd5\uff0cGet \u7b97\u6cd5\u64cd\u4f5c head \u6307\u9488\u5e76\u5199\u5165 value \u5b9e\u4f53\uff1a \u6bcf\u4e2a rbItem \u627f\u8f7d\u7740\u4e00\u4e2a\u6807\u5fd7 readWrite \u4ee5\u53ca\u5143\u7d20\u5b9e\u4f53 value \u7533\u8bf7\u961f\u9996\u8bfb\u53d6\u548c\u66f4\u65b0\u6743 \u5f53\u51fa\u961f\u5217\u64cd\u4f5c\u65f6\uff0c\u9996\u5148\u671f\u5f85 readWrite == 1\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u961f\u5217\u5c3e\u90e8\u7684 rbItem \u662f\u5e72\u51c0\u7684\uff0c\u8bfb\u51fa\u5c31\u7eea\u7684\uff1b \u4e00\u65e6\u539f\u5b50\u64cd\u4f5c\u786e\u8ba4\u5230\u8fd9\u6837\u7684\u961f\u5217\u5c3e\u90e8 rbItem \uff0c\u5219\u5176 readWrite \u6807\u5fd7\u4e5f\u88ab\u66f4\u65b0\u4e3a 3\u3002\u8fd9\u8868\u793a\u7740\u8be5 rbItem \u88ab\u7533\u8bf7\u6210\u529f\u4e86\u3002\u5176\u5b83 consumers \u5c06\u65e0\u6cd5\u53d6\u5f97\u8be5 rbItem \u4f5c\u4e3a\u5b83\u4eec\u7684\u8bfb\u51fa\u76ee\u6807\u4e86\u3002 \u73b0\u5728\u662f\u65f6\u5019\u66f4\u65b0 head \u6307\u9488\u5230\u4e0b\u4e00\u5143\u7d20\u4e86 \u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u8bfb\u53d6 value \u6210\u5458\uff08\u591a\u4e2a rbItem \u65e0\u6cd5\u88ab\u540c\u65f6\u8f7d\u5165\u4e00\u4e2a Cache Line \u4e2d\uff09 \u6700\u540e\uff0c\u6211\u4eec\u5c06 readWrite \u6807\u5fd7\u66f4\u65b0\u4e3a 0 \uff0c\u8fd9\u6807\u5fd7\u7740\u51fa\u5217\u64cd\u4f5c\u5df2\u7ecf\u5b8c\u6210\uff0c\u8fd9\u4e2a rbItem \u73b0\u5728\u662f\u7a7a\u95f2\u72b6\u6001\u4e86\u3002 func ( rb * ringBuf ) Dequeue () ( item interface {}, err error ) { var tail , head , nh uint32 var holder * rbItem for { var quad uint64 quad = atomic . LoadUint64 (( * uint64 )( unsafe . Pointer ( & rb . head ))) head = ( uint32 )( quad & MaxUint32_64 ) tail = ( uint32 )( quad >> 32 ) // head = atomic.LoadUint32(&rb.head) // tail = atomic.LoadUint32(&rb.tail) isEmpty := head == tail if isEmpty { err = ErrQueueEmpty return } holder = & rb . data [ head ] if atomic . CompareAndSwapUint64 ( & holder . readWrite , 1 , 3 ) { item = holder . value nh = ( head + 1 ) & rb . capModMask atomic . CompareAndSwapUint32 ( & rb . head , head , nh ) break } time . Sleep ( 1 * time . Nanosecond ) atomic . AddUint64 ( & rb . getWaits , 1 ) } if ! atomic . CompareAndSwapUint64 ( & holder . readWrite , 3 , 0 ) { err = fmt . Errorf ( \"[R] %w, 3=>0, %v\" , ErrRaced , holder . readWrite ) return } if item == nil { err = fmt . Errorf ( \"[ringbuf][GET] cap: %v, qty: %v, head: %v, tail: %v, new head: %v\" , rb . cap , rb . qty ( head , tail ), head , tail , nh ) if ! rb . debugMode { rb . logger . Warn ( \"[ringbuf][GET] \" , zap . Uint32 ( \"cap\" , rb . cap ), zap . Uint32 ( \"qty\" , rb . qty ( head , tail )), zap . Uint32 ( \"tail\" , tail ), zap . Uint32 ( \"head\" , head ), zap . Uint32 ( \"new head\" , nh )) } rb . logger . Fatal ( \"[ringbuf][GET] [ERR] unexpected nil element value FOUND!\" ) } return } \u540c\u6837\u5730\uff0c\u591a\u4e2a consumers \u901a\u8fc7 1ns \u7684\u81ea\u65cb\u6765\u7533\u8bf7\u8bfb\u51fa\u6743\u76f4\u81f3\u6210\u529f\uff0c\u8fd9\u4f1a\u5e26\u6765\u6f5c\u5728\u7684\u963b\u585e\u95ee\u9898\u3002 \u65e2\u7136 ringBuf \u7684\u7528\u9014\u65f6\u9762\u5411\u9ad8\u541e\u5410\u3001\u9ad8\u5e76\u53d1\u573a\u666f\uff0c\u90a3\u4e48\u591a\u4e2a consumers \u5728\u7533\u8bf7\u8bfb\u51fa\u6743\u5931\u8d25\u65f6\u88ab\u963b\u585e\u4e5f\u662f\u8c03\u7528\u8005\u671f\u5f85\u7684\u884c\u4e3a\uff0c\u56e0\u4e3a\u90a3\u4e2a\u6210\u529f\u7684 consumer \u5fc5\u7136\u4f1a\u5728\u6709\u9650\u7684\u6b65\u9aa4\u91cc\uff08\u4e00\u822c\u6765\u8bf4\u53ef\u80fd\u662f 2.691\u00b5s \u8fd9\u4e2a\u7ea7\u522b\uff09\u91ca\u653e\u8fd9\u4e2a\u88ab\u9501\u5b9a\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u5f80\u5f80\u81ea\u65cb 1 \u5230\u6570\u6b21\u5373\u53ef\u62ff\u5230\u4e0b\u4e00\u4e2a\u65b0\u7684\u961f\u9996\u5143\u7d20\u7684\u8bfb\u51fa\u6743\u3001\u6216\u8005\u662f\u8fd4\u56de\u961f\u5217\u4e3a\u7a7a\u9519\u8bef\u7531\u8c03\u7528\u8005\u51b3\u5b9a\u4e0b\u4e00\u6b65\u884c\u4e3a\u3002 \u6ce8\u610f Enqueue \u5728\u76f8\u4f3c\u7684\u6b65\u9aa4\u4e2d\u9762\u5bf9\u7684\u60c5\u51b5\u662f\u7c7b\u4f3c\u7684\uff0c\u56e0\u800c\u4e0d\u518d\u5355\u72ec\u89e3\u6790\u5176\u884c\u4e3a\u3002 \u7531\u4e8e\u81ea\u65cb\u90e8\u5206\u4e00\u5b9a\u4f1a\u5728\u6709\u9650\u6b65\u9aa4\u4e2d\u9000\u51fa\uff08\u6210\u529f\uff0c\u5931\u8d25\uff0c\u7a7a\u961f\u5217\uff09\uff0c\u6240\u4ee5\u8fd9\u90e8\u5206\u7b97\u6cd5\u662f lock free \u7684\u3002 \u5c0f\u7ed3 \u00b6 \u6211\u4eec\u5df2\u7ecf\u89e3\u91ca\u4e86\u5173\u952e\u6027\u7684\u65e0\u9501 Enqueue/Dequeue \u601d\u8def\uff0c\u5177\u4f53\u7684\u5b9e\u73b0\u4ee3\u7801\u5728 https://github.com/hedzr/go-ringbuf \u4e2d\u53ef\u4ee5\u627e\u5230\u3002 \u6027\u80fd \u00b6 MPMC \u00b6 \u6211\u4eec\u5728\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u4f5c\u51fa\u4e86\u5fc5\u8981\u7684\u53d6\u820d\uff0c\u76ee\u524d\u770b\u6765\u7b97\u6cd5\u6b63\u786e\u6027\u662f\u6709\u4fdd\u969c\u7684\u3002\u540c\u65f6\u5b83\u7684\u6027\u80fd\u4e0d\u4fd7\uff1a $ go test ./ringbuf/rb -v -race -run 'TestRingBuf_MPut' === RUN TestRingBuf_MPut TestRingBuf_MPut: rb_test.go:223: Grp: 16 , Times: 1360000 , use: 26 .266041367s, 19 .313\u00b5s/op TestRingBuf_MPut: rb_test.go:224: Put: 1360000 , use: 24 .036637261s, 17 .673\u00b5s/op | retry times: 0 TestRingBuf_MPut: rb_test.go:225: Get: 1360000 , use: 2 .229404106s, 1 .639\u00b5s/op | retry times: 0 --- PASS: TestRingBuf_MPut ( 51 .29s ) === RUN TestRingBuf_MPut TestRingBuf_MPut: rb_test.go:231: Grp: 16 , Times: 1360000 , use: 42 .836537705s, 31 .497\u00b5s/op TestRingBuf_MPut: rb_test.go:232: Put: 1360000 , use: 39 .277276612s, 28 .88\u00b5s/op | retry times: 0 TestRingBuf_MPut: rb_test.go:233: Get: 1360000 , use: 3 .559261093s, 2 .617\u00b5s/op | retry times: 0 --- PASS: TestRingBuf_MPut ( 53 .60s ) \u6211\u4eec\u8fd0\u884c\u591a\u751f\u4ea7\u8005\u591a\u6d88\u8d39\u8005\u7684\u624b\u5de5 benchmark \u6d4b\u8bd5\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0a\u7ed3\u679c\uff0c\u8fd9\u91cc\u7ed9\u51fa\u7684\u7ed3\u679c\u5b9e\u4f8b\u662f\u4e24\u6b21\u8fd0\u884c\u7684\u7ed3\u679c\uff0c\u539f\u56e0\u662f\u5355\u72ec\u7684\u5de5\u4f5c\u7ad9\u6d4b\u8bd5\u7684\u53c2\u8003\u4ef7\u503c\u4e00\u822c\u8bdd\u4e14\u4e0d\u7a33\u5b9a\u3002\u4ece\u7ed3\u679c\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230 put + get \u7684\u64cd\u4f5c\u5e73\u5747\u503c\u5927\u7ea6\u5728 19.313\u00b5s/op .. 31.497\u00b5s/op \u4e4b\u95f4\u3002 \u7531\u4e8e\u6a21\u62df\u4e86\u771f\u5b9e\u573a\u666f\u7684\u6d88\u8d39\u60c5\u51b5\uff0c\u56e0\u6b64\u8986\u76d6\u4e86 Enqueue/Dequeue \u7684\u5404\u4e2a\u5206\u652f\u5c24\u5176\u662f\u505a\u5230\u4e86\u7533\u8bf7\u5199\u5165/\u8bfb\u51fa\u6743\u7ade\u4e89\u72b6\u6001\u7684\u6a21\u62df\uff0c\u56e0\u6b64\u8fd9\u91cc\u7684\u6570\u636e\u6bd4\u8f83\u6709\u53c2\u8003\u4ef7\u503c\u3002 1.639\u00b5s/op \u7684\u51fa\u5217\uff08610M/s\uff09\uff0c17.673\u00b5s/op \u7684\u5165\u5217\uff0857M/s\uff09\u5df2\u7ecf\u662f\u8fbe\u5230\u4e86\u6211\u4eec\u9884\u671f\u7684\u76ee\u6807\u4e86\u3002 \u5bf9\u7167 \u00b6 \u4e3a\u4e86\u6a2a\u5411\u6bd4\u8f83\uff0c\u6211\u4eec\u4ee5\u76f8\u540c\u65b9\u5f0f\u8fd0\u884c\u4e86\u522b\u7684\u4f8b\u5b50\uff0c\u5f97\u5230\u7684\u7ed3\u8bba\u662f ringBuf \u5927\u6982\u5728 9.734\u00b5s/op \u5de6\u53f3\uff0c\u800c\u5bf9\u7167\u8005\u5927\u7ea6\u5728 8.373\u00b5s/op \u5de6\u53f3\u3002 \u4e4b\u6240\u4ee5\u8fd9\u7ec4\u5bf9\u7167\u7ed3\u679c\u548c MPMC \u6709\u6240\u4e0d\u540c\uff0c\u539f\u56e0\u662f\u5bf9\u7167\u7ec4\u91c7\u7528\u5148\u4e00\u6b21\u6027\u5199\u5165\u7136\u540e\u4e00\u6b21\u6027\u8bfb\u51fa\u7684\u65b9\u5f0f\u6765\u8ba1\u7b97 put+get \u65f6\u957f\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u540c\u6837\u7684\u6d4b\u8bd5\u65b9\u5f0f\u53e6\u884c\u5b8c\u6210\u4e86\u5bf9\u7167\u6d4b\u8bd5\u3002 \u5728\u9ad8\u6027\u80fd\u670d\u52a1\u5668\u4e0a\uff0c\u5de5\u4f5c\u6027\u80fd\u6709\u53ef\u80fd\u8fbe\u5230 1~2\u00b5s/op \u7ea7\u522b\uff08\u589e\u52a0\u6838\u5fc3\u3001\u589e\u52a0\u5185\u5b58\uff0c\u9009\u62e9\u9ad8\u603b\u7ebf\u5e26\u5bbd\uff09\uff1a === RUN TestQueuePutGetLong TestQueuePutGetLong: rb_test.go:399: Grp: 64 , Times: 20800000 , use: 2m1.90187948s, 5 .86\u00b5s/op TestQueuePutGetLong: rb_test.go:400: Put: 20800000 , use: 52 .716325629s, 2 .534\u00b5s/op TestQueuePutGetLong: rb_test.go:401: Get: 20800000 , use: 57 .048982796s, 2 .742\u00b5s/op --- PASS: TestQueuePutGetLong ( 121 .90s ) \u8bf4\u660e \u00b6 \u6027\u80fd\u6d4b\u8bd5\u81ea\u5df1\u8dd1\u624d\u80fd\u6bd4\u8f83\uff0c\u56e0\u4e3a\u6211\u61d2\u5f97\u53bb\u627e\u6807\u51c6\u673a\u505a Benchmark\u3002\u4e0a\u9762\u7ed9\u51fa\u7684\u6570\u636e\u662f\u5728 i5-5257U CPU @ 2.70GHz \u7684 MBP \u4e0a\u8dd1\u51fa\u6765\u7684\uff0c\u53ea\u80fd\u8bc1\u660e Server \u7aef\u8868\u73b0\u53ef\u4ee5\u66f4\u597d\uff0c\u4f46\u4e0d\u80fd\u5f53\u4f5c\u72ec\u7acb\u7684\u4f9d\u636e\u3002 \ud83d\udd1a \u00b6 \u74b0\u5f62\u7de9\u885d\u5340 - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66 \u21a9 http://wiki.c2.com/?CircularBuffer \u21a9 https://www.boost.org/doc/libs/1_39_0/libs/circular_buffer/doc/circular_buffer.html \u21a9 \u591a\u6838 CPU\uff0cCPU\u96c6\u7fa4\uff1a\u9884\u53d6\uff0c\u4e71\u5e8f\u6267\u884c\uff0c\u8d85\u6807\u91cf\u6d41\u6c34\u7ebf\uff0c\u5e76\u53d1\u7f16\u7a0b \u21a9 Paul E. McKenney: Memory Barriers: a Hardware View for Software Hackers \u21a9 \u5185\u5b58\u5c4f\u969c (Wikipedia): https://en.wikipedia.org/wiki/Memory_barrier \u21a9 Intel\u00ae 64 and IA-32 Architectures Software Developer\u2019s Manual, https://software.intel.com/en-us/articles/intel-sdm \u21a9 Memory Barriers/Fences, https://mechanical-sympathy.blogspot.jp/2011/07/memory-barriersfences.html \u21a9 Memory Barriers: a Hardware View for Software Hackers, Paul E. McKenney, Linux Technology Center, IBM Beaverton, https://www.researchgate.net/publication/228824849_Memory_Barriers_a_Hardware_View_for_Software_Hackers \u21a9 Intel Sandy Bridge Configuration, http://www.7-cpu.com/cpu/SandyBridge.html \u21a9 Intel\u2019s Haswell CPU Microarchitecture, http://www.realworldtech.com/haswell-cpu/5/ \u21a9 Write Combining, http://mechanical-sympathy.blogspot.com/2011/07/write-combining.html \u21a9 Memory ordering, https://en.wikipedia.org/wiki/Memory_ordering \u21a9 C++\u5185\u5b58\u5c4f\u969c\uff08\u5185\u5b58\u987a\u5e8f\uff09\u603b\u7ed3 \u21a9 Race Condition(\u7ade\u6001\u6761\u4ef6) \u548cMemory Barrier(\u5185\u5b58\u5c4f\u969c) \u21a9 \u53ef\u89c6\u5316Go\u5185\u5b58\u7ba1\u7406| Tony Bai \u21a9 DPHPC: Sequential Consistency - pdf/slider \u21a9 CPU Cache Line\u4f2a\u5171\u4eab\u95ee\u9898\u7684\u603b\u7ed3\u548c\u5206\u6790- 51CTO.COM \u21a9 \u63a2\u7d22Golang \u4e00\u81f4\u6027\u539f\u8bed - \u6e29\u4e60\u6c5f\u6e56 \u21a9 https://golang.org/ref/mem \u21a9 LearnConcurrency : Read Advanced Go Concurrency Primitives , Study The Go Memory Model \u21a9 Golang\u5185\u5b58\u6a21\u578b| apeipo\u7684\u535a\u5ba2 \u21a9 Go\u8bed\u8a00\u5185\u5b58\u6a21\u578b \u21a9 Golang\u5185\u5b58\u6a21\u578b- \u7b80\u4e66 \u21a9 Go\u5e76\u53d1\u7f16\u7a0b\u4e2d\u7684\u90a3\u4e9b\u4e8b \u21a9","title":"Golang \u73af\u5f62\u961f\u5217\u5b9e\u73b0"},{"location":"algor/ringbuf/04.impl/#golang","text":"https://github.com/hedzr/go-ringbuf \u4e0b\u9762\u5c06\u4f9d\u636e\u524d\u9762\u7684\u80cc\u666f\u77e5\u8bc6\u5b9e\u73b0\u4e00\u4e2a\u65e0\u9501\u7684\u73af\u5f62\u961f\u5217\uff08Circular Queue\uff0cRing Buffer\uff09\uff0c\u5c3d\u53ef\u80fd\u5730\u89e3\u9664\u5404\u79cd\u7ade\u4e89\u72b6\u51b5\u3002","title":"Golang\u7248\u672c\u73af\u5f62\u961f\u5217\u5b9e\u73b0"},{"location":"algor/ringbuf/04.impl/#_1","text":"\u9996\u5148\u662f\u961f\u5217\u7684\u5927\u5c0f\uff0c\u591a\u6570\u5df2\u6709\u7684\u73af\u5f62\u961f\u5217\u5747\u63a8\u8350\u4f7f\u7528 2 \u7684\u51a5\u6570\uff08 2^n \uff09\u4e3a\u961f\u5217\u5c3a\u5bf8\uff0c\u5176\u597d\u5904\u5728\u4e8e\u901a\u8fc7\u548c 2^n-1 \u7684 AND \u64cd\u4f5c\u5373\u53ef\u5c06 head / tail \u6307\u9488\u7ed5\u56de\uff0c\u907f\u514d\u4e86 mod \u64cd\u4f5c\u3002\u5728 CPU \u6307\u4ee4\u96c6\u4e2d\uff0c mod \u64cd\u4f5c\u4f9d\u8d56\u4e8e\u4e00\u4e2a IDIV \uff08\u6574\u6570\u9664\u6cd5\uff09\u8fd0\u7b97\uff0c\u8fd9\u901a\u5e38\u662f AND \u64cd\u4f5c\u8017\u65f6\u7684\u6570\u500d\u3002 \u5176\u6b21\u662f ringbuf \u7ed3\u6784\u4f53\u7684\u5bf9\u9f50\uff0c\u5728 Golang \u4e2d\u8fd9\u662f\u81ea\u52a8\u7684\uff0c\u6240\u4ee5\u6ca1\u6709\u4ec0\u4e48\u53ef\u8bf4\u7684\u3002 \u4e3a\u4e86\u89e3\u51b3 ringbuf \u5143\u7d20\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20 rbItem \u7684 CacheLine \u95ee\u9898\uff0c\u6211\u4eec\u5bf9\u5176\u8fdb\u884c\u4e86\u586b\u5145\uff0c\u4f7f\u5f97\u4e00\u4e2a rbItem \u80fd\u591f\u5360\u6ee1\u4e00\u4e2a CacheLine\u3002 type ( Queue interface { Enqueue ( item interface {}) ( err error ) Dequeue () ( item interface {}, err error ) // Cap returns the outer capacity of the ring buffer. Cap () uint32 // Size returns the quantity of items in the ring buffer queue Size () uint32 IsEmpty () ( b bool ) IsFull () ( b bool ) } RingBuffer interface { io . Closer // for logger Queue Put ( item interface {}) ( err error ) Get () ( item interface {}, err error ) // Quantity returns the quantity of items in the ring buffer queue Quantity () uint32 Debug ( enabled bool ) ( lastState bool ) ResetCounters () } ringBuf struct { cap uint32 capModMask uint32 head uint32 tail uint32 putWaits uint64 getWaits uint64 _ [ CacheLinePadSize ] byte data [] rbItem debugMode bool logger * zap . Logger } rbItem struct { readWrite uint64 // 0: writable, 1: readable, 2: write ok, 3: read ok value interface {} // ptr _ [ CacheLinePadSize - 8 - 8 ] byte // _ cpu.CacheLinePad } ) \u81f3\u4e8e Queue \u548c RingBuffer \u662f\u5e93\u4f5c\u8005\u7684\u4f8b\u884c\u64cd\u4f5c\uff0c\u5c31\u4e0d\u8d58\u8ff0\u4e86\u3002 \u5728 rbItem \u4e2d\u589e\u52a0\u4e86 CacheLine \u5bf9\u9f50\u5b57\u6bb5\uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514d\u6bcf\u4e2a producer/consumer \u64cd\u4f5c\u4e00\u4e2a rbItem \u65f6\u5f7c\u6b64\u4e4b\u95f4\u53d1\u751f false sharing \u5e72\u6270\u3002\u56e0\u6b64\uff0c\u591a\u4e2a rbItem \u65e0\u6cd5\u88ab\u540c\u65f6\u8f7d\u5165\u4e00\u4e2a Cache Line \u4e2d\uff0c\u6240\u4ee5\u6570\u636e\u7ade\u4e89\u7684\u95ee\u9898\u4e5f\u540c\u65f6\u88ab\u907f\u514d\u4e86\u3002\u5b9e\u6d4b\u5462\uff0c\u597d\u50cf\u6709\u70b9\u70b9\u6539\u5584\uff0c\u4f46\u4e5f\u6ca1\u6709\u597d\u5230\u4e00\u500d\u7684\u72b6\u6001\uff0c\u4e0d\u8fc7\u5373\u4f7f\u6ca1\u6709\u6027\u80fd\u6539\u5584\uff0c\u4e3a\u4e86 DATA RACE \u4e5f\u5fc5\u987b\u8fdb\u884c\u8fd9\u6837\u7684\u5bf9\u9f50\uff0c\u624d\u80fd\u786e\u4fdd\u5728\u8fd9\u91cc\u4e0d\u5fc5\u5f15\u5165\u4e00\u9897\u9501\u3002 \u5728 ringBuf \u4e2d\u540c\u6837\u4e5f\u6709\u5bf9\u9f50\u5b57\u6bb5\u4ee5\u514d\u64cd\u4f5c head/tail/putWaits/getWaits \u65f6\u5173\u8054\u8f7d\u5165 data \u6307\u9488\uff0c\u4e0d\u8fc7\u6b63\u56e0\u4e3adata\u662f\u6307\u9488\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5bf9\u9f50\u5b57\u6bb5\u7684\u6548\u7528\u901a\u5e38\u4e3a 0\u3002\u4e3a\u4e86\u4ee3\u7801\u53ef\u79fb\u690d\u6027\uff08\u5230 C++11 \u6a21\u7248\u7c7b\uff1f\uff09\uff0c\u6682\u4e14\u4fdd\u7559\u8be5\u5bf9\u9f50\u3002","title":"\u57fa\u672c\u5b9a\u4e49"},{"location":"algor/ringbuf/04.impl/#_2","text":"","title":"\u64cd\u4f5c"},{"location":"algor/ringbuf/04.impl/#_3","text":"func ( rb * ringBuf ) IsEmpty () ( b bool ) { var tail , head uint32 var quad uint64 quad = atomic . LoadUint64 (( * uint64 )( unsafe . Pointer ( & rb . head ))) head = ( uint32 )( quad & MaxUint32_64 ) tail = ( uint32 )( quad >> 32 ) // var tail, head uint32 // head = atomic.LoadUint32(&rb.head) // tail = atomic.LoadUint32(&rb.tail) b = head == tail return } func ( rb * ringBuf ) IsFull () ( b bool ) { var tail , head uint32 var quad uint64 quad = atomic . LoadUint64 (( * uint64 )( unsafe . Pointer ( & rb . head ))) head = ( uint32 )( quad & MaxUint32_64 ) tail = ( uint32 )( quad >> 32 ) b = (( tail + 1 ) & rb . capModMask ) == head return }","title":"\u6d4b\u8bd5\uff1a\u961f\u5217\u7a7a\uff0c\u961f\u5217\u6ee1"},{"location":"algor/ringbuf/04.impl/#headtail","text":"\u7531\u4e8e\u6211\u4eec\u9650\u5b9a\u4e86 head \u548c tail \u6307\u9488\u4e3a 32 \u4f4d\u6574\u6570\uff0c\u56e0\u6b64\u539f\u5b50\u64cd\u4f5c\u53ef\u4ee5\u4e00\u6b21\u53d6\u5f97\u5b83\u4eec\u800c\u4e0d\u662f\u4e24\u6b21\u3002\u8fd9\u80fd\u591f\u5e26\u6765\u5c0f\u5c0f\u7684\u63d0\u5347\uff0c\u5b9e\u6d4b\u8bc1\u660e\u4e86\u6709\u5176\u5b58\u5728\u7684\u4ef7\u503c\u3002 \u5982\u679c CPU \u67b6\u6784\u4f7f\u7528 Big Endian \u6a21\u5f0f\uff0c\u4e0a\u8ff0\u4ee3\u7801\u9700\u8981\u88ab\u8c03\u6574\u3002 \u5728\u79fb\u690d\u65f6\u624d\u4f1a\u8003\u8651\u9488\u5bf9\u6027\u6539\u5199\u3002 \u8003\u8651\u8fdb\u4e00\u6b65\u4f18\u5316 \uff1a \u5982\u679c\u662f C++/C/ASM\u7684\u8bdd\uff0c\u539f\u5b50\u6307\u4ee4\u7684\u76f8\u5173\u51fd\u6570\u8c03\u7528\u53ef\u4ee5\u53bb\u6389\uff0cquard\uff0ctail\uff0chead\u53ef\u4ee5\u4f7f\u7528\u5bc4\u5b58\u5668\uff0c\u4e5f\u65e0\u9700 AND \u548c SHIFT \u8fd0\u7b97\u3002 binary \u5305\u5bf9\u6b64\u6ca1\u6709\u5e2e\u52a9\u3002","title":"\u5173\u4e8e head/tail \u7684\u8f7d\u5165\u4f18\u5316"},{"location":"algor/ringbuf/04.impl/#headtail_1","text":"\u7531\u4e8e put \u64cd\u4f5c\u4f7f\u7528 tail \u548c head\uff0c\u4f46\u4e0d\u4f1a\u4fee\u6539 head\uff08\u76f8\u5e94\u7684 get \u64cd\u4f5c\u4e5f\u7c7b\u4f3c\u4e8e\u6b64\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u6709\u53e6\u4e00\u4e2a\u9009\u62e9\u8fdb\u884c\u6027\u80fd\u63d0\u5347\uff1a \u5206\u79bb head \u548c tail \u7684\u5b58\u50a8\u4f4d\u7f6e\u4fdd\u8bc1\u4e0d\u4f1a\u540c\u65f6\u8f7d\u5165\u5355\u4e00 CacheLine\u3002 \u8fd9\u4e2a\u7b56\u7565\u53ef\u4ee5\u8fd9\u6837\u5b9e\u73b0\uff1a ringBuf struct { cap uint32 capModMask uint32 _ [ CacheLinePadSize - 8 ] byte head uint32 _ [ CacheLinePadSize - 4 ] byte tail uint32 _ [ CacheLinePadSize - 4 ] byte putWaits uint64 _ [ CacheLinePadSize - 8 ] byte getWaits uint64 _ [ CacheLinePadSize - 8 ] byte data [] rbItem debugMode bool logger * zap . Logger } // \u6b64\u65f6\u9700\u8981\u5206\u522b\u53d6\u5f97 head tail\uff1a var tail , head uint32 head = atomic . LoadUint32 ( & rb . head ) tail = atomic . LoadUint32 ( & rb . tail ) \u8fd9\u79cd\u65b9\u6cd5\u5e94\u8be5\u6bd4\u5f53\u524d\u7684\u7b80\u8981\u65b9\u6848\u66f4\u5177\u6709\u4f18\u52bf\u3002\u4f46\u662f\u51fa\u4e8e\u8bd5\u9a8c\u7684\u76ee\u7684\uff0c\u6211\u4eec\u6682\u65f6\u6ca1\u6709\u5e94\u7528\u8be5\u65b9\u6848\uff0c\u800c\u662f\u5c06\u6b64\u4f18\u5316\u63a8\u8fdf\u5230 v1.x \u53d1\u5e03\u65f6\u3002\u76ee\u524d go-ringbuf v0.7.x \u5c06\u91c7\u7528\u524d\u6587\u8ff0\u53ca\u5230\u5355\u6b21\u539f\u5b50\u64cd\u4f5c\u65b9\u6848\u3002","title":"\u8fdb\u4e00\u6b65\u7684\u9488\u5bf9 head/tail \u7684\u4f18\u5316"},{"location":"algor/ringbuf/04.impl/#_4","text":"\u6211\u4eec\u91c7\u7528\u6807\u51c6\u7684\u73af\u5f62\u961f\u5217\u5b9e\u73b0\u65b9\u6848\uff1a \u4fdd\u7559\u4e00\u4e2a\u5143\u7d20\u7684\u7a7a\u95f4 \u5373\u4e0d\u5141\u8bb8 tail \u8d76\u4e0a head\uff0c\u961f\u5c3e\u8282\u70b9\u548c\u5bf9\u9996\u8282\u70b9\u4e4b\u95f4\u81f3\u5c11\u7559\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u7a7a\u95f4\u3002 \u5982\u679c head == tail\uff0c\u961f\u5217\u7a7a\uff1b \u5982\u679c (tail+1) % M == head\uff0c\u961f\u5217\u6ee1\u3002","title":"\u5173\u4e8e\u5224\u5b9a\u7b97\u6cd5"},{"location":"algor/ringbuf/04.impl/#cap-size","text":"Cap() \u8868\u793a\u73af\u5f62\u961f\u5217\u7684\u5bb9\u91cf\uff0c Size() \u53ca\u5176\u540c\u4e49\u8bcd Quantity() \u8fd4\u56de\u7684\u662f\u5f53\u524d\u961f\u5217\u4e2d\u7684\u5143\u7d20\u6570\u91cf\u3002 func ( rb * ringBuf ) Quantity () uint32 { return rb . Size () } func ( rb * ringBuf ) Size () uint32 { var quantity uint32 // head = atomic.LoadUint32(&rb.head) // tail = atomic.LoadUint32(&rb.tail) var tail , head uint32 var quad uint64 quad = atomic . LoadUint64 (( * uint64 )( unsafe . Pointer ( & rb . head ))) head = ( uint32 )( quad & MaxUint32_64 ) tail = ( uint32 )( quad >> 32 ) if tail >= head { quantity = tail - head } else { quantity = rb . capModMask + ( tail - head ) } return quantity } func ( rb * ringBuf ) Cap () uint32 { return rb . cap }","title":"Cap \u548c Size"},{"location":"algor/ringbuf/04.impl/#enqueue-put","text":"\u4e00\u4e9b\u65e0\u9501\u65b9\u6848\u5728\u5b9e\u73b0\u4e4b\u540e\u4f1a\u663e\u5f97\u8f83\u4e3a\u7384\u5999\uff0c\u8fd9\u5f53\u7136\u662f\u4f53\u73b0\u4e86\u8bbe\u8ba1\u8005\u7684\u7cbe\u5de7\u601d\u8def\u7684\u3002\u5176\u9ebb\u70e6\u5728\u4e8e\uff0c\u914d\u56fe\u914d\u8bba\u6587\u90fd\u4e0d\u5bb9\u6613\u6539\u5584\u5b83\u4eec\u7684\u53ef\u8bfb\u6027\u3002","title":"Enqueue / Put"},{"location":"algor/ringbuf/04.impl/#put","text":"\u5728\u6211\u4eec\u7684 ringBuf \u4e2d\uff0c\u89e3\u51b3\u65e0\u9501\u4ee5\u53ca\u907f\u8ba9\u95ee\u9898\u91c7\u7528\u4e86\u6bd4\u8f83\u660e\u6670\u800c\u4e14\u7b80\u6d01\u7684\u8def\u5b50\uff0c\u5176\u601d\u8def\u662f\u8fd9\u6837\u7684\uff1a \u6bcf\u4e2a rbItem \u627f\u8f7d\u7740\u4e00\u4e2a\u6807\u5fd7 readWrite \u4ee5\u53ca\u5143\u7d20\u5b9e\u4f53 value \u7533\u8bf7\u961f\u5c3e\u5199\u5165\u6743 \u5f53\u5165\u961f\u5217\u64cd\u4f5c\u65f6\uff0c\u9996\u5148\u671f\u5f85 readWrite == 0\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u961f\u5217\u5c3e\u90e8\u7684 rbItem \u662f\u5e72\u51c0\u7684\uff0c\u5199\u5165\u5c31\u7eea\u7684\uff08\u5373\u7a7a\u95f2\u72b6\u6001\uff09\uff1b \u4e00\u65e6\u539f\u5b50\u64cd\u4f5c\u786e\u8ba4\u5230\u8fd9\u6837\u7684\u961f\u5217\u5c3e\u90e8 rbItem \uff0c\u5219\u5176 readWrite \u6807\u5fd7\u4e5f\u88ab\u66f4\u65b0\u4e3a 2\u3002\u8fd9\u8868\u793a\u7740\u8be5 rbItem \u88ab\u7533\u8bf7\u6210\u529f\u4e86\u3002\u5176\u5b83 producers \u5c06\u65e0\u6cd5\u53d6\u5f97\u8be5 rbItem \u4f5c\u4e3a\u5b83\u4eec\u7684\u5199\u5165\u76ee\u6807\u4e86\u3002 \u73b0\u5728\u662f\u65f6\u5019\u66f4\u65b0 tail \u6307\u9488\u5230\u4e0b\u4e00\u5143\u7d20\u4e86 \u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u66f4\u65b0 value \u6210\u5458\uff08\u591a\u4e2a rbItem \u65e0\u6cd5\u88ab\u540c\u65f6\u8f7d\u5165\u4e00\u4e2a Cache Line \u4e2d\uff09 \u6700\u540e\uff0c\u6211\u4eec\u5c06 readWrite \u6807\u5fd7\u66f4\u65b0\u4e3a 1 \uff0c\u8fd9\u6807\u5fd7\u7740\u5165\u5217\u64cd\u4f5c\u5df2\u7ecf\u5b8c\u6210\uff0c\u8fd9\u4e2a rbItem \u73b0\u5728\u662f\u8bfb\u51fa\u5c31\u7eea\u7684 func ( rb * ringBuf ) Enqueue ( item interface {}) ( err error ) { var tail , head , nt uint32 var holder * rbItem for { var quad uint64 quad = atomic . LoadUint64 (( * uint64 )( unsafe . Pointer ( & rb . head ))) head = ( uint32 )( quad & MaxUint32_64 ) tail = ( uint32 )( quad >> 32 ) // head = atomic.LoadUint32(&rb.head) // tail = atomic.LoadUint32(&rb.tail) nt = ( tail + 1 ) & rb . capModMask isFull := nt == head if isFull { err = ErrQueueFull return } holder = & rb . data [ tail ] if atomic . CompareAndSwapUint64 ( & holder . readWrite , 0 , 2 ) { holder . value = item atomic . CompareAndSwapUint32 ( & rb . tail , tail , nt ) break } time . Sleep ( 1 * time . Nanosecond ) atomic . AddUint64 ( & rb . putWaits , 1 ) } if ! atomic . CompareAndSwapUint64 ( & holder . readWrite , 2 , 1 ) { err = fmt . Errorf ( \"[W] %w, 2=>1, %v\" , ErrRaced , holder . readWrite ) return } return }","title":"Put \u7b97\u6cd5"},{"location":"algor/ringbuf/04.impl/#_5","text":"\u6b65\u9aa42 \u64cd\u4f5c\u5931\u8d25\u65f6\uff0c\u610f\u5473\u7740\u5176\u5b83 producers \u5df2\u7ecf\u62ff\u5230\u4e86\u961f\u5c3e rbItem \u7684\u5199\u5165\u6743\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a 1ns \u7684\u5ef6\u8fdf\u5e76\u518d\u6b21\u81ea\u65cb\uff0c\u4ee5\u6c42\u53d6\u5f97\u65b0\u7684\u961f\u5c3e\u5199\u5165\u6743\u3002 \u6b65\u9aa43 \u7684\u539f\u5b50\u64cd\u4f5c\u53ef\u80fd\u4f1a\u5931\u8d25\u3002 \u8fd9\u4ee3\u8868\u7740\u8fd9\u4e2a\u961f\u5c3e\u5df2\u7ecf\u65e7\u4e86\uff0c\u65b0\u7684\u961f\u5c3e\u5df2\u7ecf\u88ab\u522b\u7684 producers \u63d0\u4ea4\u6210\u529f\u4e86\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u5ffd\u7565 tail \u7684\u66f4\u65b0\u4e0d\u6210\u529f\u7684\u95ee\u9898\u3002 \u6b65\u9aa44 \u5b58\u5728\u5076\u7136\u7684\u53ef\u80fd\u6027\u4f1a\u5931\u8d25\u3002 \u8fd9\u79cd\u53ef\u80fd\u6027\u53d1\u751f\u65f6\uff0c\u4ee3\u8868\u7740\u8fd0\u884c\u73af\u5883\u5df2\u7ecf\u5d29\u584c\u4e86\uff0c\u5c5e\u4e8e\u81f4\u547d\u6027\u9519\u8bef\u3002 \u6682\u65f6\uff0c\u6211\u4e0d\u80fd\u6392\u9664\u65f6\u7b97\u6cd5\u9519\u8bef\u7684\u56e0\u7d20\u5e26\u6765\u7684\u8fd9\u4e2a\u9519\u8bef\uff0c\u4f46\u76ee\u524d\u7ecf\u8fc7\u5927\u91cf\u5de5\u7a0b\u5b9e\u6d4b\u9a8c\u8bc1\u6765\u770b\uff0c\u7b97\u6cd5\u53ef\u80fd\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u4f46\u6ca1\u6709\u7f3a\u9677\u3002 \u7406\u8bba\u4e0a\u7684\u8bc1\u660e\u9700\u8981\u53e6\u5916\u6210\u6587\u4e86\uff0c\u4ee5\u540e\u518d\u8bf4\u4e86\u3002","title":"\u4f8b\u5916\u60c5\u51b5"},{"location":"algor/ringbuf/04.impl/#dequeue-get","text":"","title":"Dequeue / Get"},{"location":"algor/ringbuf/04.impl/#get","text":"\u7c7b\u4f3c\u4e8e Put \u7b97\u6cd5\uff0cGet \u7b97\u6cd5\u64cd\u4f5c head \u6307\u9488\u5e76\u5199\u5165 value \u5b9e\u4f53\uff1a \u6bcf\u4e2a rbItem \u627f\u8f7d\u7740\u4e00\u4e2a\u6807\u5fd7 readWrite \u4ee5\u53ca\u5143\u7d20\u5b9e\u4f53 value \u7533\u8bf7\u961f\u9996\u8bfb\u53d6\u548c\u66f4\u65b0\u6743 \u5f53\u51fa\u961f\u5217\u64cd\u4f5c\u65f6\uff0c\u9996\u5148\u671f\u5f85 readWrite == 1\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u961f\u5217\u5c3e\u90e8\u7684 rbItem \u662f\u5e72\u51c0\u7684\uff0c\u8bfb\u51fa\u5c31\u7eea\u7684\uff1b \u4e00\u65e6\u539f\u5b50\u64cd\u4f5c\u786e\u8ba4\u5230\u8fd9\u6837\u7684\u961f\u5217\u5c3e\u90e8 rbItem \uff0c\u5219\u5176 readWrite \u6807\u5fd7\u4e5f\u88ab\u66f4\u65b0\u4e3a 3\u3002\u8fd9\u8868\u793a\u7740\u8be5 rbItem \u88ab\u7533\u8bf7\u6210\u529f\u4e86\u3002\u5176\u5b83 consumers \u5c06\u65e0\u6cd5\u53d6\u5f97\u8be5 rbItem \u4f5c\u4e3a\u5b83\u4eec\u7684\u8bfb\u51fa\u76ee\u6807\u4e86\u3002 \u73b0\u5728\u662f\u65f6\u5019\u66f4\u65b0 head \u6307\u9488\u5230\u4e0b\u4e00\u5143\u7d20\u4e86 \u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u8bfb\u53d6 value \u6210\u5458\uff08\u591a\u4e2a rbItem \u65e0\u6cd5\u88ab\u540c\u65f6\u8f7d\u5165\u4e00\u4e2a Cache Line \u4e2d\uff09 \u6700\u540e\uff0c\u6211\u4eec\u5c06 readWrite \u6807\u5fd7\u66f4\u65b0\u4e3a 0 \uff0c\u8fd9\u6807\u5fd7\u7740\u51fa\u5217\u64cd\u4f5c\u5df2\u7ecf\u5b8c\u6210\uff0c\u8fd9\u4e2a rbItem \u73b0\u5728\u662f\u7a7a\u95f2\u72b6\u6001\u4e86\u3002 func ( rb * ringBuf ) Dequeue () ( item interface {}, err error ) { var tail , head , nh uint32 var holder * rbItem for { var quad uint64 quad = atomic . LoadUint64 (( * uint64 )( unsafe . Pointer ( & rb . head ))) head = ( uint32 )( quad & MaxUint32_64 ) tail = ( uint32 )( quad >> 32 ) // head = atomic.LoadUint32(&rb.head) // tail = atomic.LoadUint32(&rb.tail) isEmpty := head == tail if isEmpty { err = ErrQueueEmpty return } holder = & rb . data [ head ] if atomic . CompareAndSwapUint64 ( & holder . readWrite , 1 , 3 ) { item = holder . value nh = ( head + 1 ) & rb . capModMask atomic . CompareAndSwapUint32 ( & rb . head , head , nh ) break } time . Sleep ( 1 * time . Nanosecond ) atomic . AddUint64 ( & rb . getWaits , 1 ) } if ! atomic . CompareAndSwapUint64 ( & holder . readWrite , 3 , 0 ) { err = fmt . Errorf ( \"[R] %w, 3=>0, %v\" , ErrRaced , holder . readWrite ) return } if item == nil { err = fmt . Errorf ( \"[ringbuf][GET] cap: %v, qty: %v, head: %v, tail: %v, new head: %v\" , rb . cap , rb . qty ( head , tail ), head , tail , nh ) if ! rb . debugMode { rb . logger . Warn ( \"[ringbuf][GET] \" , zap . Uint32 ( \"cap\" , rb . cap ), zap . Uint32 ( \"qty\" , rb . qty ( head , tail )), zap . Uint32 ( \"tail\" , tail ), zap . Uint32 ( \"head\" , head ), zap . Uint32 ( \"new head\" , nh )) } rb . logger . Fatal ( \"[ringbuf][GET] [ERR] unexpected nil element value FOUND!\" ) } return } \u540c\u6837\u5730\uff0c\u591a\u4e2a consumers \u901a\u8fc7 1ns \u7684\u81ea\u65cb\u6765\u7533\u8bf7\u8bfb\u51fa\u6743\u76f4\u81f3\u6210\u529f\uff0c\u8fd9\u4f1a\u5e26\u6765\u6f5c\u5728\u7684\u963b\u585e\u95ee\u9898\u3002 \u65e2\u7136 ringBuf \u7684\u7528\u9014\u65f6\u9762\u5411\u9ad8\u541e\u5410\u3001\u9ad8\u5e76\u53d1\u573a\u666f\uff0c\u90a3\u4e48\u591a\u4e2a consumers \u5728\u7533\u8bf7\u8bfb\u51fa\u6743\u5931\u8d25\u65f6\u88ab\u963b\u585e\u4e5f\u662f\u8c03\u7528\u8005\u671f\u5f85\u7684\u884c\u4e3a\uff0c\u56e0\u4e3a\u90a3\u4e2a\u6210\u529f\u7684 consumer \u5fc5\u7136\u4f1a\u5728\u6709\u9650\u7684\u6b65\u9aa4\u91cc\uff08\u4e00\u822c\u6765\u8bf4\u53ef\u80fd\u662f 2.691\u00b5s \u8fd9\u4e2a\u7ea7\u522b\uff09\u91ca\u653e\u8fd9\u4e2a\u88ab\u9501\u5b9a\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u5f80\u5f80\u81ea\u65cb 1 \u5230\u6570\u6b21\u5373\u53ef\u62ff\u5230\u4e0b\u4e00\u4e2a\u65b0\u7684\u961f\u9996\u5143\u7d20\u7684\u8bfb\u51fa\u6743\u3001\u6216\u8005\u662f\u8fd4\u56de\u961f\u5217\u4e3a\u7a7a\u9519\u8bef\u7531\u8c03\u7528\u8005\u51b3\u5b9a\u4e0b\u4e00\u6b65\u884c\u4e3a\u3002 \u6ce8\u610f Enqueue \u5728\u76f8\u4f3c\u7684\u6b65\u9aa4\u4e2d\u9762\u5bf9\u7684\u60c5\u51b5\u662f\u7c7b\u4f3c\u7684\uff0c\u56e0\u800c\u4e0d\u518d\u5355\u72ec\u89e3\u6790\u5176\u884c\u4e3a\u3002 \u7531\u4e8e\u81ea\u65cb\u90e8\u5206\u4e00\u5b9a\u4f1a\u5728\u6709\u9650\u6b65\u9aa4\u4e2d\u9000\u51fa\uff08\u6210\u529f\uff0c\u5931\u8d25\uff0c\u7a7a\u961f\u5217\uff09\uff0c\u6240\u4ee5\u8fd9\u90e8\u5206\u7b97\u6cd5\u662f lock free \u7684\u3002","title":"Get\u7b97\u6cd5"},{"location":"algor/ringbuf/04.impl/#_6","text":"\u6211\u4eec\u5df2\u7ecf\u89e3\u91ca\u4e86\u5173\u952e\u6027\u7684\u65e0\u9501 Enqueue/Dequeue \u601d\u8def\uff0c\u5177\u4f53\u7684\u5b9e\u73b0\u4ee3\u7801\u5728 https://github.com/hedzr/go-ringbuf \u4e2d\u53ef\u4ee5\u627e\u5230\u3002","title":"\u5c0f\u7ed3"},{"location":"algor/ringbuf/04.impl/#_7","text":"","title":"\u6027\u80fd"},{"location":"algor/ringbuf/04.impl/#mpmc","text":"\u6211\u4eec\u5728\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u4f5c\u51fa\u4e86\u5fc5\u8981\u7684\u53d6\u820d\uff0c\u76ee\u524d\u770b\u6765\u7b97\u6cd5\u6b63\u786e\u6027\u662f\u6709\u4fdd\u969c\u7684\u3002\u540c\u65f6\u5b83\u7684\u6027\u80fd\u4e0d\u4fd7\uff1a $ go test ./ringbuf/rb -v -race -run 'TestRingBuf_MPut' === RUN TestRingBuf_MPut TestRingBuf_MPut: rb_test.go:223: Grp: 16 , Times: 1360000 , use: 26 .266041367s, 19 .313\u00b5s/op TestRingBuf_MPut: rb_test.go:224: Put: 1360000 , use: 24 .036637261s, 17 .673\u00b5s/op | retry times: 0 TestRingBuf_MPut: rb_test.go:225: Get: 1360000 , use: 2 .229404106s, 1 .639\u00b5s/op | retry times: 0 --- PASS: TestRingBuf_MPut ( 51 .29s ) === RUN TestRingBuf_MPut TestRingBuf_MPut: rb_test.go:231: Grp: 16 , Times: 1360000 , use: 42 .836537705s, 31 .497\u00b5s/op TestRingBuf_MPut: rb_test.go:232: Put: 1360000 , use: 39 .277276612s, 28 .88\u00b5s/op | retry times: 0 TestRingBuf_MPut: rb_test.go:233: Get: 1360000 , use: 3 .559261093s, 2 .617\u00b5s/op | retry times: 0 --- PASS: TestRingBuf_MPut ( 53 .60s ) \u6211\u4eec\u8fd0\u884c\u591a\u751f\u4ea7\u8005\u591a\u6d88\u8d39\u8005\u7684\u624b\u5de5 benchmark \u6d4b\u8bd5\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0a\u7ed3\u679c\uff0c\u8fd9\u91cc\u7ed9\u51fa\u7684\u7ed3\u679c\u5b9e\u4f8b\u662f\u4e24\u6b21\u8fd0\u884c\u7684\u7ed3\u679c\uff0c\u539f\u56e0\u662f\u5355\u72ec\u7684\u5de5\u4f5c\u7ad9\u6d4b\u8bd5\u7684\u53c2\u8003\u4ef7\u503c\u4e00\u822c\u8bdd\u4e14\u4e0d\u7a33\u5b9a\u3002\u4ece\u7ed3\u679c\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230 put + get \u7684\u64cd\u4f5c\u5e73\u5747\u503c\u5927\u7ea6\u5728 19.313\u00b5s/op .. 31.497\u00b5s/op \u4e4b\u95f4\u3002 \u7531\u4e8e\u6a21\u62df\u4e86\u771f\u5b9e\u573a\u666f\u7684\u6d88\u8d39\u60c5\u51b5\uff0c\u56e0\u6b64\u8986\u76d6\u4e86 Enqueue/Dequeue \u7684\u5404\u4e2a\u5206\u652f\u5c24\u5176\u662f\u505a\u5230\u4e86\u7533\u8bf7\u5199\u5165/\u8bfb\u51fa\u6743\u7ade\u4e89\u72b6\u6001\u7684\u6a21\u62df\uff0c\u56e0\u6b64\u8fd9\u91cc\u7684\u6570\u636e\u6bd4\u8f83\u6709\u53c2\u8003\u4ef7\u503c\u3002 1.639\u00b5s/op \u7684\u51fa\u5217\uff08610M/s\uff09\uff0c17.673\u00b5s/op \u7684\u5165\u5217\uff0857M/s\uff09\u5df2\u7ecf\u662f\u8fbe\u5230\u4e86\u6211\u4eec\u9884\u671f\u7684\u76ee\u6807\u4e86\u3002","title":"MPMC"},{"location":"algor/ringbuf/04.impl/#_8","text":"\u4e3a\u4e86\u6a2a\u5411\u6bd4\u8f83\uff0c\u6211\u4eec\u4ee5\u76f8\u540c\u65b9\u5f0f\u8fd0\u884c\u4e86\u522b\u7684\u4f8b\u5b50\uff0c\u5f97\u5230\u7684\u7ed3\u8bba\u662f ringBuf \u5927\u6982\u5728 9.734\u00b5s/op \u5de6\u53f3\uff0c\u800c\u5bf9\u7167\u8005\u5927\u7ea6\u5728 8.373\u00b5s/op \u5de6\u53f3\u3002 \u4e4b\u6240\u4ee5\u8fd9\u7ec4\u5bf9\u7167\u7ed3\u679c\u548c MPMC \u6709\u6240\u4e0d\u540c\uff0c\u539f\u56e0\u662f\u5bf9\u7167\u7ec4\u91c7\u7528\u5148\u4e00\u6b21\u6027\u5199\u5165\u7136\u540e\u4e00\u6b21\u6027\u8bfb\u51fa\u7684\u65b9\u5f0f\u6765\u8ba1\u7b97 put+get \u65f6\u957f\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u540c\u6837\u7684\u6d4b\u8bd5\u65b9\u5f0f\u53e6\u884c\u5b8c\u6210\u4e86\u5bf9\u7167\u6d4b\u8bd5\u3002 \u5728\u9ad8\u6027\u80fd\u670d\u52a1\u5668\u4e0a\uff0c\u5de5\u4f5c\u6027\u80fd\u6709\u53ef\u80fd\u8fbe\u5230 1~2\u00b5s/op \u7ea7\u522b\uff08\u589e\u52a0\u6838\u5fc3\u3001\u589e\u52a0\u5185\u5b58\uff0c\u9009\u62e9\u9ad8\u603b\u7ebf\u5e26\u5bbd\uff09\uff1a === RUN TestQueuePutGetLong TestQueuePutGetLong: rb_test.go:399: Grp: 64 , Times: 20800000 , use: 2m1.90187948s, 5 .86\u00b5s/op TestQueuePutGetLong: rb_test.go:400: Put: 20800000 , use: 52 .716325629s, 2 .534\u00b5s/op TestQueuePutGetLong: rb_test.go:401: Get: 20800000 , use: 57 .048982796s, 2 .742\u00b5s/op --- PASS: TestQueuePutGetLong ( 121 .90s )","title":"\u5bf9\u7167"},{"location":"algor/ringbuf/04.impl/#_9","text":"\u6027\u80fd\u6d4b\u8bd5\u81ea\u5df1\u8dd1\u624d\u80fd\u6bd4\u8f83\uff0c\u56e0\u4e3a\u6211\u61d2\u5f97\u53bb\u627e\u6807\u51c6\u673a\u505a Benchmark\u3002\u4e0a\u9762\u7ed9\u51fa\u7684\u6570\u636e\u662f\u5728 i5-5257U CPU @ 2.70GHz \u7684 MBP \u4e0a\u8dd1\u51fa\u6765\u7684\uff0c\u53ea\u80fd\u8bc1\u660e Server \u7aef\u8868\u73b0\u53ef\u4ee5\u66f4\u597d\uff0c\u4f46\u4e0d\u80fd\u5f53\u4f5c\u72ec\u7acb\u7684\u4f9d\u636e\u3002","title":"\u8bf4\u660e"},{"location":"algor/ringbuf/04.impl/#_10","text":"\u74b0\u5f62\u7de9\u885d\u5340 - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66 \u21a9 http://wiki.c2.com/?CircularBuffer \u21a9 https://www.boost.org/doc/libs/1_39_0/libs/circular_buffer/doc/circular_buffer.html \u21a9 \u591a\u6838 CPU\uff0cCPU\u96c6\u7fa4\uff1a\u9884\u53d6\uff0c\u4e71\u5e8f\u6267\u884c\uff0c\u8d85\u6807\u91cf\u6d41\u6c34\u7ebf\uff0c\u5e76\u53d1\u7f16\u7a0b \u21a9 Paul E. McKenney: Memory Barriers: a Hardware View for Software Hackers \u21a9 \u5185\u5b58\u5c4f\u969c (Wikipedia): https://en.wikipedia.org/wiki/Memory_barrier \u21a9 Intel\u00ae 64 and IA-32 Architectures Software Developer\u2019s Manual, https://software.intel.com/en-us/articles/intel-sdm \u21a9 Memory Barriers/Fences, https://mechanical-sympathy.blogspot.jp/2011/07/memory-barriersfences.html \u21a9 Memory Barriers: a Hardware View for Software Hackers, Paul E. McKenney, Linux Technology Center, IBM Beaverton, https://www.researchgate.net/publication/228824849_Memory_Barriers_a_Hardware_View_for_Software_Hackers \u21a9 Intel Sandy Bridge Configuration, http://www.7-cpu.com/cpu/SandyBridge.html \u21a9 Intel\u2019s Haswell CPU Microarchitecture, http://www.realworldtech.com/haswell-cpu/5/ \u21a9 Write Combining, http://mechanical-sympathy.blogspot.com/2011/07/write-combining.html \u21a9 Memory ordering, https://en.wikipedia.org/wiki/Memory_ordering \u21a9 C++\u5185\u5b58\u5c4f\u969c\uff08\u5185\u5b58\u987a\u5e8f\uff09\u603b\u7ed3 \u21a9 Race Condition(\u7ade\u6001\u6761\u4ef6) \u548cMemory Barrier(\u5185\u5b58\u5c4f\u969c) \u21a9 \u53ef\u89c6\u5316Go\u5185\u5b58\u7ba1\u7406| Tony Bai \u21a9 DPHPC: Sequential Consistency - pdf/slider \u21a9 CPU Cache Line\u4f2a\u5171\u4eab\u95ee\u9898\u7684\u603b\u7ed3\u548c\u5206\u6790- 51CTO.COM \u21a9 \u63a2\u7d22Golang \u4e00\u81f4\u6027\u539f\u8bed - \u6e29\u4e60\u6c5f\u6e56 \u21a9 https://golang.org/ref/mem \u21a9 LearnConcurrency : Read Advanced Go Concurrency Primitives , Study The Go Memory Model \u21a9 Golang\u5185\u5b58\u6a21\u578b| apeipo\u7684\u535a\u5ba2 \u21a9 Go\u8bed\u8a00\u5185\u5b58\u6a21\u578b \u21a9 Golang\u5185\u5b58\u6a21\u578b- \u7b80\u4e66 \u21a9 Go\u5e76\u53d1\u7f16\u7a0b\u4e2d\u7684\u90a3\u4e9b\u4e8b \u21a9","title":"\ud83d\udd1a"},{"location":"dp/","text":"","title":"Index"},{"location":"search/","text":"","title":"Index"},{"location":"string/","text":"","title":"Index"},{"location":"tests/","text":"","title":"Index"},{"location":"tests/test1/","text":"markdown-test-page/test-page.md at master \u00b7 fullpipe/markdown-test-page \u00b7 GitHub <meta name=\"twitter:image:src\" content=\"https://avatars3.githubusercontent.com/u/929659?s=400&amp;v=4\" /><meta name=\"twitter:site\" content=\"@github\" /><meta name=\"twitter:card\" content=\"summary\" /><meta name=\"twitter:title\" content=\"fullpipe/markdown-test-page\" /><meta name=\"twitter:description\" content=\"All markdown elements in context. Contribute to fullpipe/markdown-test-page development by creating an account on GitHub.\" /> <meta property=\"og:image\" content=\"https://avatars3.githubusercontent.com/u/929659?s=400&amp;v=4\" /><meta property=\"og:site_name\" content=\"GitHub\" /><meta property=\"og:type\" content=\"object\" /><meta property=\"og:title\" content=\"fullpipe/markdown-test-page\" /><meta property=\"og:url\" content=\"https://github.com/fullpipe/markdown-test-page\" /><meta property=\"og:description\" content=\"All markdown elements in context. Contribute to fullpipe/markdown-test-page development by creating an account on GitHub.\" /> <meta name=\"google-site-verification\" content=\"KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU\"> <meta name=\"google-analytics\" content=\"UA-3769691-2\"> <meta name=\"hostname\" content=\"github.com\"> <meta name=\"user-login\" content=\"\"> <meta name=\"expected-hostname\" content=\"github.com\"> <meta name=\"enabled-features\" content=\"MARKETPLACE_SOCIAL_PROOF_CUSTOMERS,MARKETPLACE_TRENDING_SOCIAL_PROOF,MARKETPLACE_RECOMMENDATIONS,MARKETPLACE_PENDING_INSTALLATIONS\"> <link href=\"https://github.com/fullpipe/markdown-test-page/commits/master.atom\" rel=\"alternate\" title=\"Recent Commits to markdown-test-page:master\" type=\"application/atom+xml\"> <link rel=\"canonical\" href=\"https://github.com/fullpipe/markdown-test-page/blob/master/test-page.md\" data-pjax-transient> <div class=\"position-relative js-header-wrapper \"> <a href=\"#start-of-content\" class=\"px-2 py-4 bg-blue text-white show-on-focus js-skip-to-content\">Skip to content</a> <span class=\"Progress progress-pjax-loader position-fixed width-full js-pjax-loader-bar\"> <span class=\"progress-pjax-loader-bar top-0 left-0\" style=\"width: 0%;\"></span> </span> <header class=\"Header-old header-logged-out js-details-container Details position-relative f4 py-2\" role=\"banner\"> <div class=\"d-lg-none css-truncate css-truncate-target width-fit p-2\"> <svg class=\"octicon octicon-repo\" viewBox=\"0 0 12 16\" version=\"1.1\" width=\"12\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9H3V8h1v1zm0-3H3v1h1V6zm0-2H3v1h1V4zm0-2H3v1h1V2zm8-1v12c0 .55-.45 1-1 1H6v2l-1.5-1.5L3 16v-2H1c-.55 0-1-.45-1-1V1c0-.55.45-1 1-1h10c.55 0 1 .45 1 1zm-1 10H1v2h2v-1h3v1h5v-2zm0-10H2v9h9V1z\"></path></svg> <a class=\"Header-link\" href=\"/fullpipe\">fullpipe</a> / <a class=\"Header-link\" href=\"/fullpipe/markdown-test-page\">markdown-test-page</a> </div> <div class=\"d-flex flex-items-center\"> <a href=\"/join?source=header-repo\" class=\"d-inline-block d-lg-none f5 text-white no-underline border border-gray-dark rounded-2 px-2 py-1 mr-3 mr-sm-5\" data-hydro-click=\"{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/fullpipe/markdown-test-page/blob/master/test-page.md&quot;,&quot;user_id&quot;:null}}\" data-hydro-click-hmac=\"52edac3cff00745e6ddb0302acc223cd316486e639becb6952d0ddb7f353cc1f\" data-ga-click=\"(Logged out) Header, clicked Sign up, text:sign-up\"> Sign&nbsp;up </a> <button class=\"btn-link d-lg-none mt-1 js-details-target\" type=\"button\" aria-label=\"Toggle navigation\" aria-expanded=\"false\"> <svg height=\"24\" class=\"octicon octicon-three-bars text-white\" viewBox=\"0 0 12 16\" version=\"1.1\" width=\"18\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M11.41 9H.59C0 9 0 8.59 0 8c0-.59 0-1 .59-1H11.4c.59 0 .59.41.59 1 0 .59 0 1-.59 1h.01zm0-4H.59C0 5 0 4.59 0 4c0-.59 0-1 .59-1H11.4c.59 0 .59.41.59 1 0 .59 0 1-.59 1h.01zM.59 11H11.4c.59 0 .59.41.59 1 0 .59 0 1-.59 1H.59C0 13 0 12.59 0 12c0-.59 0-1 .59-1z\"></path></svg> </button> </div> </div> <div class=\"HeaderMenu HeaderMenu--logged-out position-fixed top-0 right-0 bottom-0 height-fit position-lg-relative d-lg-flex flex-justify-between flex-items-center flex-auto\"> <div class=\"d-flex d-lg-none flex-justify-end border-bottom bg-gray-light p-3\"> <button class=\"btn-link js-details-target\" type=\"button\" aria-label=\"Toggle navigation\" aria-expanded=\"false\"> <svg height=\"24\" class=\"octicon octicon-x text-gray\" viewBox=\"0 0 12 16\" version=\"1.1\" width=\"18\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48L7.48 8z\"></path></svg> </button> </div> <nav class=\"mt-0 px-3 px-lg-0 mb-5 mb-lg-0\" aria-label=\"Global\"> <ul class=\"d-lg-flex list-style-none\"> <li class=\"d-block d-lg-flex flex-lg-nowrap flex-lg-items-center border-bottom border-lg-bottom-0 mr-0 mr-lg-3 edge-item-fix position-relative flex-wrap flex-justify-between d-flex flex-items-center \"> <details class=\"HeaderMenu-details details-overlay details-reset width-full\"> <summary class=\"HeaderMenu-summary HeaderMenu-link px-0 py-3 border-0 no-wrap d-block d-lg-inline-block\"> Why GitHub? <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 14 8\" xml:space=\"preserve\" fill=\"none\" class=\"icon-chevon-down-mktg position-absolute position-lg-relative\"> <path d=\"M1,1l6.2,6L13,1\"></path> </svg> </summary> <div class=\"dropdown-menu flex-auto rounded-1 bg-white px-0 mt-0 pb-4 p-lg-4 position-relative position-lg-absolute left-0 left-lg-n4\"> <a href=\"/features\" class=\"py-2 lh-condensed-ultra d-block link-gray-dark no-underline h5 Bump-link--hover\" data-ga-click=\"(Logged out) Header, go to Features\">Features <span class=\"Bump-link-symbol float-right text-normal text-gray-light\">&rarr;</span></a> <ul class=\"list-style-none f5 pb-3\"> <li class=\"edge-item-fix\"><a href=\"/features/code-review/\" class=\"py-2 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to Code review\">Code review</a></li> <li class=\"edge-item-fix\"><a href=\"/features/project-management/\" class=\"py-2 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to Project management\">Project management</a></li> <li class=\"edge-item-fix\"><a href=\"/features/integrations\" class=\"py-2 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to Integrations\">Integrations</a></li> <li class=\"edge-item-fix\"><a href=\"/features/actions\" class=\"py-2 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to Actions\">Actions</a></li> <li class=\"edge-item-fix\"><a href=\"/features/packages\" class=\"py-2 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to GitHub Packages\">Packages</a></li> <li class=\"edge-item-fix\"><a href=\"/features/security\" class=\"py-2 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to Security\">Security</a></li> <li class=\"edge-item-fix\"><a href=\"/features#team-management\" class=\"py-2 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to Team management\">Team management</a></li> <li class=\"edge-item-fix\"><a href=\"/features#hosting\" class=\"py-2 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to Code hosting\">Hosting</a></li> </ul> <ul class=\"list-style-none mb-0 border-lg-top pt-lg-3\"> <li class=\"edge-item-fix\"><a href=\"/customer-stories\" class=\"py-2 lh-condensed-ultra d-block no-underline link-gray-dark no-underline h5 Bump-link--hover\" data-ga-click=\"(Logged out) Header, go to Customer stories\">Customer stories <span class=\"Bump-link-symbol float-right text-normal text-gray-light\">&rarr;</span></a></li> <li class=\"edge-item-fix\"><a href=\"/security\" class=\"py-2 lh-condensed-ultra d-block no-underline link-gray-dark no-underline h5 Bump-link--hover\" data-ga-click=\"(Logged out) Header, go to Security\">Security <span class=\"Bump-link-symbol float-right text-normal text-gray-light\">&rarr;</span></a></li> </ul> </div> </details> </li> <li class=\"border-bottom border-lg-bottom-0 mr-0 mr-lg-3\"> <a href=\"/team\" class=\"HeaderMenu-link no-underline py-3 d-block d-lg-inline-block\" data-ga-click=\"(Logged out) Header, go to Team\">Team</a> </li> <li class=\"border-bottom border-lg-bottom-0 mr-0 mr-lg-3\"> <a href=\"/enterprise\" class=\"HeaderMenu-link no-underline py-3 d-block d-lg-inline-block\" data-ga-click=\"(Logged out) Header, go to Enterprise\">Enterprise</a> </li> <li class=\"d-block d-lg-flex flex-lg-nowrap flex-lg-items-center border-bottom border-lg-bottom-0 mr-0 mr-lg-3 edge-item-fix position-relative flex-wrap flex-justify-between d-flex flex-items-center \"> <details class=\"HeaderMenu-details details-overlay details-reset width-full\"> <summary class=\"HeaderMenu-summary HeaderMenu-link px-0 py-3 border-0 no-wrap d-block d-lg-inline-block\"> Explore <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 14 8\" xml:space=\"preserve\" fill=\"none\" class=\"icon-chevon-down-mktg position-absolute position-lg-relative\"> <path d=\"M1,1l6.2,6L13,1\"></path> </svg> </summary> <div class=\"dropdown-menu flex-auto rounded-1 bg-white px-0 pt-2 pb-0 mt-0 pb-4 p-lg-4 position-relative position-lg-absolute left-0 left-lg-n4\"> <ul class=\"list-style-none mb-3\"> <li class=\"edge-item-fix\"><a href=\"/explore\" class=\"py-2 lh-condensed-ultra d-block link-gray-dark no-underline h5 Bump-link--hover\" data-ga-click=\"(Logged out) Header, go to Explore\">Explore GitHub <span class=\"Bump-link-symbol float-right text-normal text-gray-light\">&rarr;</span></a></li> </ul> <h4 class=\"text-gray-light text-normal text-mono f5 mb-2 border-lg-top pt-lg-3\">Learn &amp; contribute</h4> <ul class=\"list-style-none mb-3\"> <li class=\"edge-item-fix\"><a href=\"/topics\" class=\"py-2 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to Topics\">Topics</a></li> <li class=\"edge-item-fix\"><a href=\"/collections\" class=\"py-2 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to Collections\">Collections</a></li> <li class=\"edge-item-fix\"><a href=\"/trending\" class=\"py-2 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to Trending\">Trending</a></li> <li class=\"edge-item-fix\"><a href=\"https://lab.github.com/\" class=\"py-2 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to Learning lab\">Learning Lab</a></li> <li class=\"edge-item-fix\"><a href=\"https://opensource.guide\" class=\"py-2 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to Open source guides\">Open source guides</a></li> </ul> <h4 class=\"text-gray-light text-normal text-mono f5 mb-2 border-lg-top pt-lg-3\">Connect with others</h4> <ul class=\"list-style-none mb-0\"> <li class=\"edge-item-fix\"><a href=\"https://github.com/events\" class=\"py-2 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to Events\">Events</a></li> <li class=\"edge-item-fix\"><a href=\"https://github.community\" class=\"py-2 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to Community forum\">Community forum</a></li> <li class=\"edge-item-fix\"><a href=\"https://education.github.com\" class=\"py-2 pb-0 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to GitHub Education\">GitHub Education</a></li> </ul> </div> </details> </li> <li class=\"border-bottom border-lg-bottom-0 mr-0 mr-lg-3\"> <a href=\"/marketplace\" class=\"HeaderMenu-link no-underline py-3 d-block d-lg-inline-block\" data-ga-click=\"(Logged out) Header, go to Marketplace\">Marketplace</a> </li> <li class=\"d-block d-lg-flex flex-lg-nowrap flex-lg-items-center border-bottom border-lg-bottom-0 mr-0 mr-lg-3 edge-item-fix position-relative flex-wrap flex-justify-between d-flex flex-items-center \"> <details class=\"HeaderMenu-details details-overlay details-reset width-full\"> <summary class=\"HeaderMenu-summary HeaderMenu-link px-0 py-3 border-0 no-wrap d-block d-lg-inline-block\"> Pricing <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 14 8\" xml:space=\"preserve\" fill=\"none\" class=\"icon-chevon-down-mktg position-absolute position-lg-relative\"> <path d=\"M1,1l6.2,6L13,1\"></path> </svg> </summary> <div class=\"dropdown-menu flex-auto rounded-1 bg-white px-0 pt-2 pb-4 mt-0 p-lg-4 position-relative position-lg-absolute left-0 left-lg-n4\"> <a href=\"/pricing\" class=\"pb-2 lh-condensed-ultra d-block link-gray-dark no-underline h5 Bump-link--hover\" data-ga-click=\"(Logged out) Header, go to Pricing\">Plans <span class=\"Bump-link-symbol float-right text-normal text-gray-light\">&rarr;</span></a> <ul class=\"list-style-none mb-3\"> <li class=\"edge-item-fix\"><a href=\"/pricing#feature-comparison\" class=\"py-2 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to Compare plans\">Compare plans</a></li> <li class=\"edge-item-fix\"><a href=\"https://enterprise.github.com/contact\" class=\"py-2 lh-condensed-ultra d-block link-gray no-underline f5\" data-ga-click=\"(Logged out) Header, go to Contact Sales\">Contact Sales</a></li> </ul> <ul class=\"list-style-none mb-0 border-lg-top pt-lg-3\"> <li class=\"edge-item-fix\"><a href=\"/nonprofit\" class=\"py-2 lh-condensed-ultra d-block no-underline link-gray-dark no-underline h5 Bump-link--hover\" data-ga-click=\"(Logged out) Header, go to Nonprofits\">Nonprofit <span class=\"Bump-link-symbol float-right text-normal text-gray-light\">&rarr;</span></a></li> <li class=\"edge-item-fix\"><a href=\"https://education.github.com\" class=\"py-2 pb-0 lh-condensed-ultra d-block no-underline link-gray-dark no-underline h5 Bump-link--hover\" data-ga-click=\"(Logged out) Header, go to Education\">Education <span class=\"Bump-link-symbol float-right text-normal text-gray-light\">&rarr;</span></a></li> </ul> </div> </details> </li> </ul> </nav> <div class=\"d-lg-flex flex-items-center px-3 px-lg-0 text-center text-lg-left\"> <div class=\"d-lg-flex mb-3 mb-lg-0\"> <div class=\"header-search flex-self-stretch flex-lg-self-auto mr-0 mr-lg-3 mb-3 mb-lg-0 scoped-search site-scoped-search js-site-search position-relative js-jump-to\" role=\"combobox\" aria-owns=\"jump-to-results\" aria-label=\"Search or jump to\" aria-haspopup=\"listbox\" aria-expanded=\"false\" <input type=\"text\" class=\"form-control input-sm header-search-input jump-to-field js-jump-to-field js-site-search-focus js-site-search-field is-clearable\" data-hotkey=\"s,/\" name=\"q\" value=\"\" placeholder=\"Search\" data-unscoped-placeholder=\"Search GitHub\" data-scoped-placeholder=\"Search\" autocapitalize=\"off\" aria-autocomplete=\"list\" aria-controls=\"jump-to-results\" aria-label=\"Search\" data-jump-to-suggestions-path=\"/_graphql/GetSuggestedNavigationDestinations\" spellcheck=\"false\" autocomplete=\"off\" <input type=\"hidden\" data-csrf=\"true\" class=\"js-data-jump-to-suggestions-path-csrf\" value=\"4CoI/7ZzUn+9r8EtFIyze6+v3jT2vdv++6UH6IjSCnJqN9SUXOlOaT3/gv2b5E0qvxob/VhggF20DMa+Ohkxew==\" /> <input type=\"hidden\" class=\"js-site-search-type-field\" name=\"type\" > <img src=\"https://github.githubassets.com/images/search-key-slash.svg\" alt=\"\" class=\"mr-2 header-search-key-slash\"> <div class=\"Box position-absolute overflow-hidden d-none jump-to-suggestions js-jump-to-suggestions-container\"> In this repository All GitHub \u21b5 Jump to \u21b5 No suggested jump to results In this repository All GitHub \u21b5 Jump to \u21b5 In this repository All GitHub \u21b5 Jump to \u21b5 </div> </label> </div> <a href=\"/login?return_to=%2Ffullpipe%2Fmarkdown-test-page%2Fblob%2Fmaster%2Ftest-page.md\" class=\"HeaderMenu-link no-underline mr-3\" data-hydro-click=\"{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/fullpipe/markdown-test-page/blob/master/test-page.md&quot;,&quot;user_id&quot;:null}}\" data-hydro-click-hmac=\"9bcaec88ba6fd53c82f52f51ada179fdaa9d2cfecbc409746614582dd832d4d8\" data-ga-click=\"(Logged out) Header, clicked Sign in, text:sign-in\"> Sign&nbsp;in </a> <a href=\"/join?source=header-repo&amp;source_repo=fullpipe%2Fmarkdown-test-page\" class=\"HeaderMenu-link d-inline-block no-underline border border-gray-dark rounded-1 px-2 py-1\" data-hydro-click=\"{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/fullpipe/markdown-test-page/blob/master/test-page.md&quot;,&quot;user_id&quot;:null}}\" data-hydro-click-hmac=\"9bcaec88ba6fd53c82f52f51ada179fdaa9d2cfecbc409746614582dd832d4d8\" data-ga-click=\"(Logged out) Header, clicked Sign up, text:sign-up\"> Sign&nbsp;up </a> </div> </div> </div> <div id=\"js-flash-container\"> <div class=\"js-flash-template-message\"></div> <div class=\"d-flex container-lg mb-4 p-responsive d-none d-lg-flex\"> <div class=\"flex-auto min-width-0 width-fit mr-3\"> <h1 class=\"public d-flex flex-wrap flex-items-center break-word float-none \"> fullpipe / markdown-test-page </div> <ul class=\"pagehead-actions flex-shrink-0 \" > Watch 1 Star 14 Fork 44 </div> Code Issues 0 Pull requests 0 Actions Projects 0 Security Insights <span itemscope itemtype=\"http://schema.org/ListItem\" itemprop=\"itemListElement\"> <a class=\"js-selected-navigation-item selected reponav-item\" itemprop=\"url\" aria-current=\"page\" data-selected-links=\"repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages /fullpipe/markdown-test-page\" href=\"/fullpipe/markdown-test-page\"> <span itemprop=\"name\">Code</span> <meta itemprop=\"position\" content=\"1\"> <span itemscope itemtype=\"http://schema.org/ListItem\" itemprop=\"itemListElement\"> <a itemprop=\"url\" class=\"js-selected-navigation-item reponav-item\" data-selected-links=\"repo_issues repo_labels repo_milestones /fullpipe/markdown-test-page/issues\" href=\"/fullpipe/markdown-test-page/issues\"> <span itemprop=\"name\">Issues</span> <span class=\"Counter\">0</span> <meta itemprop=\"position\" content=\"2\"> <span itemscope itemtype=\"http://schema.org/ListItem\" itemprop=\"itemListElement\"> <a itemprop=\"url\" class=\"js-selected-navigation-item reponav-item\" data-selected-links=\"repo_pulls checks /fullpipe/markdown-test-page/pulls\" href=\"/fullpipe/markdown-test-page/pulls\"> <span itemprop=\"name\">Pull requests</span> <span class=\"Counter\">0</span> <meta itemprop=\"position\" content=\"4\"> <span itemscope itemtype=\"http://schema.org/ListItem\" itemprop=\"itemListElement\"> <a itemprop=\"url\" class=\"js-selected-navigation-item reponav-item\" data-selected-links=\"repo_projects new_repo_project repo_project /fullpipe/markdown-test-page/projects\" href=\"/fullpipe/markdown-test-page/projects\"> <span itemprop=\"name\">Projects</span> <span class=\"Counter\">0</span> <meta itemprop=\"position\" content=\"5\"> <span itemscope itemtype=\"http://schema.org/ListItem\" itemprop=\"itemListElement\"> <a itemprop=\"url\" class=\"js-selected-navigation-item reponav-item\" data-selected-links=\"repo_actions /fullpipe/markdown-test-page/actions\" href=\"/fullpipe/markdown-test-page/actions\"> <span itemprop=\"name\">Actions</span> <meta itemprop=\"position\" content=\"6\"> <a itemprop=\"url\" class=\"js-selected-navigation-item reponav-item\" data-selected-links=\"security overview alerts policy token_scanning code_scanning /fullpipe/markdown-test-page/security\" href=\"/fullpipe/markdown-test-page/security\"> <span itemprop=\"name\">Security</span> <span class=\"Counter js-security-deferred-tab-count\" hidden></span> <meta itemprop=\"position\" content=\"8\"> Pulse Permalink Dismiss Join GitHub today GitHub is home to over 40 million developers working together to host and review code, manage projects, and build software together. Sign up Branch: master Find file Copy path markdown-test-page / test-page.md Find file Copy path fullpipe Manny Pacquiao 5dc8403 Jul 13, 2019 1 contributor Users who have contributed to this file 171 lines (105 sloc) 12.9 KB Raw Blame History Markdown Test Page Headings Paragraphs Blockquotes Lists Horizontal rule Table Code Inline elements Headings Heading one Sint sit cillum pariatur eiusmod nulla pariatur ipsum. Sit laborum anim qui mollit tempor pariatur nisi minim dolor. Aliquip et adipisicing sit sit fugiat commodo id sunt. Nostrud enim ad commodo incididunt cupidatat in ullamco ullamco Lorem cupidatat velit enim et Lorem. Ut laborum cillum laboris fugiat culpa sint irure do reprehenderit culpa occaecat. Exercitation esse mollit tempor magna aliqua in occaecat aliquip veniam reprehenderit nisi dolor in laboris dolore velit. Heading two Aute officia nulla deserunt do deserunt cillum velit magna. Officia veniam culpa anim minim dolore labore pariatur voluptate id ad est duis quis velit dolor pariatur enim. Incididunt enim excepteur do veniam consequat culpa do voluptate dolor fugiat ad adipisicing sit. Labore officia est adipisicing dolore proident eiusmod exercitation deserunt ullamco anim do occaecat velit. Elit dolor consectetur proident sunt aliquip est do tempor quis aliqua culpa aute. Duis in tempor exercitation pariatur et adipisicing mollit irure tempor ut enim esse commodo laboris proident. Do excepteur laborum anim esse aliquip eu sit id Lorem incididunt elit irure ea nulla dolor et. Nulla amet fugiat qui minim deserunt enim eu cupidatat aute officia do velit ea reprehenderit. Heading three Voluptate cupidatat cillum elit quis ipsum eu voluptate fugiat consectetur enim. Quis ut voluptate culpa ex anim aute consectetur dolore proident voluptate exercitation eiusmod. Esse in do anim magna minim culpa sint. Adipisicing ipsum consectetur proident ullamco magna sit amet aliqua aute fugiat laborum exercitation duis et. Heading four Commodo fugiat aliqua minim quis pariatur mollit id tempor. Non occaecat minim esse enim aliqua adipisicing nostrud duis consequat eu adipisicing qui. Minim aliquip sit excepteur ipsum consequat laborum pariatur excepteur. Veniam fugiat et amet ad elit anim laborum duis mollit occaecat et et ipsum et reprehenderit. Occaecat aliquip dolore adipisicing sint labore occaecat officia fugiat. Quis adipisicing exercitation exercitation eu amet est laboris sunt nostrud ipsum reprehenderit ullamco. Enim sint ut consectetur id anim aute voluptate exercitation mollit dolore magna magna est Lorem. Ut adipisicing adipisicing aliqua ullamco voluptate labore nisi tempor esse magna incididunt. Heading five Veniam enim esse amet veniam deserunt laboris amet enim consequat. Minim nostrud deserunt cillum consectetur commodo eu enim nostrud ullamco occaecat excepteur. Aliquip et ut est commodo enim dolor amet sint excepteur. Amet ad laboris laborum deserunt sint sunt aliqua commodo ex duis deserunt enim est ex labore ut. Duis incididunt velit adipisicing non incididunt adipisicing adipisicing. Ad irure duis nisi tempor eu dolor fugiat magna et consequat tempor eu ex dolore. Mollit esse nisi qui culpa ut nisi ex proident culpa cupidatat cillum culpa occaecat anim. Ut officia sit ea nisi ea excepteur nostrud ipsum et nulla. Heading six Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. [Top] Paragraphs Incididunt ex adipisicing ea ullamco consectetur in voluptate proident fugiat tempor deserunt reprehenderit ullamco id dolore laborum. Do laboris laboris minim incididunt qui consectetur exercitation adipisicing dolore et magna consequat magna anim sunt. Officia fugiat Lorem sunt pariatur incididunt Lorem reprehenderit proident irure. Dolore ipsum aliqua mollit ad officia fugiat sit eu aliquip cupidatat ipsum duis laborum laborum fugiat esse. Voluptate anim ex dolore deserunt ea ex eiusmod irure. Occaecat excepteur aliqua exercitation aliquip dolor esse eu eu. Officia dolore laborum aute incididunt commodo nisi velit est est elit et dolore elit exercitation. Enim aliquip magna id ipsum aliquip consectetur ad nulla quis. Incididunt pariatur dolor consectetur cillum enim velit cupidatat laborum quis ex. Officia irure in non voluptate adipisicing sit amet tempor duis dolore deserunt enim ut. Reprehenderit incididunt in ad anim et deserunt deserunt Lorem laborum quis. Enim aute anim labore proident laboris voluptate elit excepteur in. Ex labore nulla velit officia ullamco Lorem Lorem id do. Dolore ullamco ipsum magna dolor pariatur voluptate ipsum id occaecat ipsum. Dolore tempor quis duis commodo quis quis enim. [Top] Blockquotes Ad nisi laborum aute cupidatat magna deserunt eu id laboris id. Aliquip nulla cupidatat sint ex Lorem mollit laborum dolor amet est ut esse aute. Nostrud ex consequat id incididunt proident ipsum minim duis aliqua ut ex et ad quis. Laborum sint esse cillum anim nulla cillum consectetur aliqua sit. Nisi excepteur cillum labore amet excepteur commodo enim occaecat consequat ipsum proident exercitation duis id in. Ipsum et cupidatat mollit exercitation enim duis sunt irure aliqua reprehenderit mollit. Pariatur Lorem pariatur laboris do culpa do elit irure. Eiusmod amet nulla voluptate velit culpa et aliqua ad reprehenderit sit ut. Labore ea magna Lorem consequat aliquip consectetur cillum duis dolore. Et veniam dolor qui incididunt minim amet laboris sit. Dolore ad esse commodo et dolore amet est velit ut nisi ea. Excepteur ea nulla commodo dolore anim dolore adipisicing eiusmod labore id enim esse quis mollit deserunt est. Minim ea culpa voluptate nostrud commodo proident in duis aliquip minim. Qui est sit et reprehenderit aute est esse enim aliqua id aliquip ea anim. Pariatur sint reprehenderit mollit velit voluptate enim consectetur sint enim. Quis exercitation proident elit non id qui culpa dolore esse aliquip consequat. Ipsum excepteur cupidatat sunt minim ad eiusmod tempor sit. Deserunt excepteur adipisicing culpa pariatur cillum laboris ullamco nisi fugiat cillum officia. In cupidatat nulla aliquip tempor ad Lorem Lorem quis voluptate officia consectetur pariatur ex in est duis. Mollit id esse est elit exercitation voluptate nostrud nisi laborum magna dolore dolore tempor in est consectetur. Adipisicing voluptate ipsum culpa voluptate id aute laboris labore esse fugiat veniam ullamco occaecat do ut. Tempor et esse reprehenderit veniam proident ipsum irure sit ullamco et labore ea excepteur nulla labore ut. Ex aute minim quis tempor in eu id id irure ea nostrud dolor esse. [Top] Lists Ordered List Longan Lychee Excepteur ad cupidatat do elit laborum amet cillum reprehenderit consequat quis. Deserunt officia esse aliquip consectetur duis ut labore laborum commodo aliquip aliquip velit pariatur dolore. Marionberry Melon Cantaloupe Honeydew Watermelon Miracle fruit Mulberry Unordered List Olive Orange Blood orange Clementine Papaya Ut aute ipsum occaecat nisi culpa Lorem id occaecat cupidatat id id magna laboris ad duis. Fugiat cillum dolore veniam nostrud proident sint consectetur eiusmod irure adipisicing. Passionfruit [Top] Horizontal rule In dolore velit aliquip labore mollit minim tempor veniam eu veniam ad in sint aliquip mollit mollit. Ex occaecat non deserunt elit laborum sunt tempor sint consequat culpa culpa qui sit. Irure ad commodo eu voluptate mollit cillum cupidatat veniam proident amet minim reprehenderit. In laboris eiusmod reprehenderit aliquip sit proident occaecat. Non sit labore anim elit veniam Lorem minim commodo eiusmod irure do minim nisi. Dolor amet cillum excepteur consequat sint non sint. [Top] Table Duis sunt ut pariatur reprehenderit mollit mollit magna dolore in pariatur nulla commodo sit dolor ad fugiat. Laboris amet ea occaecat duis eu enim exercitation deserunt ea laborum occaecat reprehenderit. Et incididunt dolor commodo consequat mollit nisi proident non pariatur in et incididunt id. Eu ut et Lorem ea ex magna minim ipsum ipsum do. Table Heading 1 Table Heading 2 Center align Right align Table Heading 5 Item 1 Item 2 Item 3 Item 4 Item 5 Item 1 Item 2 Item 3 Item 4 Item 5 Item 1 Item 2 Item 3 Item 4 Item 5 Item 1 Item 2 Item 3 Item 4 Item 5 Item 1 Item 2 Item 3 Item 4 Item 5 Minim id consequat adipisicing cupidatat laborum culpa veniam non consectetur et duis pariatur reprehenderit eu ex consectetur. Sunt nisi qui eiusmod ut cillum laborum Lorem officia aliquip laboris ullamco nostrud laboris non irure laboris. Cillum dolore labore Lorem deserunt mollit voluptate esse incididunt ex dolor. [Top] Code Inline code Ad amet irure est magna id mollit Lorem in do duis enim. Excepteur velit nisi magna ea pariatur pariatur ullamco fugiat deserunt sint non sint. Duis duis est code in text velit velit aute culpa ex quis pariatur pariatur laborum aute pariatur duis tempor sunt ad. Irure magna voluptate dolore consectetur consectetur irure esse. Anim magna <strong>in culpa qui officia</strong> dolor eiusmod esse amet aute cupidatat aliqua do id voluptate cupidatat reprehenderit amet labore deserunt. Highlighted Et fugiat ad nisi amet magna labore do cillum fugiat occaecat cillum Lorem proident. In sint dolor ullamco ad do adipisicing amet id excepteur Lorem aliquip sit irure veniam laborum duis cillum. Aliqua occaecat minim cillum deserunt magna sunt laboris do do irure ea nostrud consequat ut voluptate ex. package main import ( \"fmt\" \"net/http\" ) func handler ( w http. ResponseWriter , r * http. Request ) { fmt . Fprintf ( w , \"Hi there, I love %s!\" , r . URL . Path [ 1 :]) } func main () { http . HandleFunc ( \"/\" , handler ) http . ListenAndServe ( \":8080\" , nil ) } Ex amet id ex aliquip id do laborum excepteur exercitation elit sint commodo occaecat nostrud est. Nostrud pariatur esse veniam laborum non sint magna sit laboris minim in id. Aliqua pariatur pariatur excepteur adipisicing irure culpa consequat commodo et ex id ad. [Top] Inline elements Sint ea anim ipsum ad commodo cupidatat do exercitation incididunt et minim ad labore sunt. Minim deserunt labore laboris velit nulla incididunt ipsum nulla. Ullamco ad laborum ea qui et anim in laboris exercitation tempor sit officia laborum reprehenderit culpa velit quis. Consequat commodo reprehenderit duis irure esse esse exercitation minim enim Lorem dolore duis irure. Nisi Lorem reprehenderit ea amet excepteur dolor excepteur magna labore proident voluptate ipsum. Reprehenderit ex esse deserunt aliqua ea officia mollit Lorem nulla magna enim. Et ad ipsum labore enim ipsum cupidatat consequat . Commodo non ea cupidatat magna deserunt dolore ipsum velit nulla elit veniam nulla eiusmod proident officia. Proident sit veniam in est proident officia adipisicing ea tempor cillum non cillum velit deserunt. Voluptate laborum incididunt sit consectetur Lorem irure incididunt voluptate nostrud. Commodo ut eiusmod tempor cupidatat esse enim minim ex anim consequat. Mollit sint culpa qui laboris quis consectetur ad sint esse. Amet anim anim minim ullamco et duis non irure. Sit tempor adipisicing ea laboris culpa ex duis sint anim aute reprehenderit id eu ea. Aute excepteur proident Lorem minim adipisicing nostrud mollit ad ut voluptate do nulla esse occaecat aliqua sint anim. Incididunt in culpa cupidatat mollit cillum qui proident sit. In cillum aliquip incididunt voluptate magna amet cupidatat cillum pariatur sint aliqua est enim anim voluptate . Magna aliquip proident incididunt id duis pariatur eiusmod incididunt commodo culpa dolore sit. Culpa do nostrud elit ad exercitation anim pariatur non minim nisi adipisicing sunt officia . Do deserunt magna mollit Lorem commodo ipsum do cupidatat mollit enim ut elit veniam ea voluptate. Reprehenderit non eu quis in ad elit esse qui aute id incididunt dolore cillum. Esse laboris consequat dolor anim exercitation tempor aliqua deserunt velit magna laboris. Culpa culpa minim duis amet mollit do quis amet commodo nulla irure. Go </main> \u00a9 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can\u2019t perform that action at this time. <script crossorigin=\"anonymous\" async=\"async\" integrity=\"sha512-WcQmT2vhcClFVOaaAJV/M+HqsJ2Gq/myvl6F3gCVBxykazXTs+i5fvxncSXwyG1CSfcrqmLFw/R/bmFYzprX2A==\" type=\"application/javascript\" id=\"js-conditional-compat\" data-src=\"https://github.githubassets.com/assets/compat-bootstrap-59c4264f.js\"></script> <script crossorigin=\"anonymous\" integrity=\"sha512-GJ+rI3xS8ODYKKEFc+HfawMZf5+hyokJaDIrfJyxTm69Gaxw/2nUP8ZYS7hoLGgn+6ZO9augKURQ+xj+yYykUg==\" type=\"application/javascript\" src=\"https://github.githubassets.com/assets/environment-bootstrap-189fab23.js\"></script> <script crossorigin=\"anonymous\" async=\"async\" integrity=\"sha512-JfA9c00QqdFAVbQaARMl2BJ+QwABPJ247GKHsBbdm7xq2P00Z6cmwPG7cFFXV0SVHPlKz8EqPiJeZDOZZTRFww==\" type=\"application/javascript\" src=\"https://github.githubassets.com/assets/vendor-25f03d73.js\"></script> <script crossorigin=\"anonymous\" async=\"async\" integrity=\"sha512-eWd2P+dR32x2wrP6wRHabQGmKVm9UQkNvyrnD8Kh/HavXqs3y0vULsz5exwjQOygebBXfSTrbaKHp0CA081JqQ==\" type=\"application/javascript\" src=\"https://github.githubassets.com/assets/frameworks-7967763f.js\"></script> <script crossorigin=\"anonymous\" async=\"async\" integrity=\"sha512-KtYRLblHP1RWI1DQ9p2s9lAGhwXDcxQlzrxpMrapLPy1GQKfbFL7hscNsKVspcvdTmcyFy3jzDjY7fEtz+vLSQ==\" type=\"application/javascript\" src=\"https://github.githubassets.com/assets/github-bootstrap-2ad6112d.js\"></script> You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session.","title":"Test1"},{"location":"tests/test2/","text":"Advertisement :) pica - high quality and fast image resize in browser. babelfish - developer friendly i18n with plurals support and easy syntax. You will like those projects! h1 Heading 8-) \u00b6 h2 Heading \u00b6 h3 Heading \u00b6 h4 Heading \u00b6 h5 Heading \u00b6 h6 Heading \u00b6 Horizontal Rules \u00b6 Typographic replacements \u00b6 Enable typographer option to see result. \u00a9 (C) \u00ae (R) \u2122 (TM) (p) (P) +- test.. test... test..... test?..... test!.... !!!!!! ???? ,, -- --- \"Smartypants, double quotes\" and 'single quotes' Emphasis \u00b6 This is bold text This is bold text This is italic text This is italic text Strikethrough Blockquotes \u00b6 Blockquotes can also be nested... ...by using additional greater-than signs right next to each other... ...or with spaces between arrows. Lists \u00b6 Unordered Create a list by starting a line with + , - , or * Sub-lists are made by indenting 2 spaces: Marker character change forces new list start: Ac tristique libero volutpat at Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Very easy! Ordered Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa You can use sequential numbers... ...or keep all the numbers as 1. Start numbering with offset: foo bar Code \u00b6 Inline code Indented code // Some comments line 1 of code line 2 of code line 3 of code Block code \"fences\" Sample text here... Syntax highlighting var foo = function ( bar ) { return bar ++ ; }; console . log ( foo ( 5 )); Tables \u00b6 Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Right aligned columns Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Links \u00b6 link text link with title Autoconverted link https://github.com/nodeca/pica (enable linkify to see) Images \u00b6 Like links, Images also have a footnote style syntax With a reference later in the document defining the URL location: Plugins \u00b6 The killer feature of markdown-it is very effective support of syntax plugins . Emojies \u00b6 Classic markup: :crush: :tear: Shortcuts (emoticons): :-) :-( 8-) ;) see how to change output with twemoji. Subscript / Superscript \u00b6 19 th H 2 O \\ \u00b6 ++Inserted text++ \\ \u00b6 Marked text Footnotes \u00b6 Footnote 1 link 1 . Footnote 2 link 2 . Inline footnote^[Text of inline footnote] definition. Duplicated footnote reference 2 . Definition lists \u00b6 Term 1 Definition 1 with lazy continuation. Term 2 with inline markup Definition 2 { some code, part of Definition 2 } Third paragraph of definition 2. Compact style: Term 1 ~ Definition 1 Term 2 ~ Definition 2a ~ Definition 2b Abbreviations \u00b6 This is HTML abbreviation example. It converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on. *[HTML]: Hyper Text Markup Language Custom containers \u00b6 ::: warning here be dragons ::: Footnote can have markup and multiple paragraphs. \u21a9 Footnote text. \u21a9 \u21a9","title":"Test2"},{"location":"tests/test2/#h1-heading-8-","text":"","title":"h1 Heading 8-)"},{"location":"tests/test2/#h2-heading","text":"","title":"h2 Heading"},{"location":"tests/test2/#h3-heading","text":"","title":"h3 Heading"},{"location":"tests/test2/#h4-heading","text":"","title":"h4 Heading"},{"location":"tests/test2/#h5-heading","text":"","title":"h5 Heading"},{"location":"tests/test2/#h6-heading","text":"","title":"h6 Heading"},{"location":"tests/test2/#horizontal-rules","text":"","title":"Horizontal Rules"},{"location":"tests/test2/#typographic-replacements","text":"Enable typographer option to see result. \u00a9 (C) \u00ae (R) \u2122 (TM) (p) (P) +- test.. test... test..... test?..... test!.... !!!!!! ???? ,, -- --- \"Smartypants, double quotes\" and 'single quotes'","title":"Typographic replacements"},{"location":"tests/test2/#emphasis","text":"This is bold text This is bold text This is italic text This is italic text Strikethrough","title":"Emphasis"},{"location":"tests/test2/#blockquotes","text":"Blockquotes can also be nested... ...by using additional greater-than signs right next to each other... ...or with spaces between arrows.","title":"Blockquotes"},{"location":"tests/test2/#lists","text":"Unordered Create a list by starting a line with + , - , or * Sub-lists are made by indenting 2 spaces: Marker character change forces new list start: Ac tristique libero volutpat at Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Very easy! Ordered Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa You can use sequential numbers... ...or keep all the numbers as 1. Start numbering with offset: foo bar","title":"Lists"},{"location":"tests/test2/#code","text":"Inline code Indented code // Some comments line 1 of code line 2 of code line 3 of code Block code \"fences\" Sample text here... Syntax highlighting var foo = function ( bar ) { return bar ++ ; }; console . log ( foo ( 5 ));","title":"Code"},{"location":"tests/test2/#tables","text":"Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Right aligned columns Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files.","title":"Tables"},{"location":"tests/test2/#links","text":"link text link with title Autoconverted link https://github.com/nodeca/pica (enable linkify to see)","title":"Links"},{"location":"tests/test2/#images","text":"Like links, Images also have a footnote style syntax With a reference later in the document defining the URL location:","title":"Images"},{"location":"tests/test2/#plugins","text":"The killer feature of markdown-it is very effective support of syntax plugins .","title":"Plugins"},{"location":"tests/test2/#emojies","text":"Classic markup: :crush: :tear: Shortcuts (emoticons): :-) :-( 8-) ;) see how to change output with twemoji.","title":"Emojies"},{"location":"tests/test2/#subscript-superscript","text":"19 th H 2 O","title":"Subscript / Superscript"},{"location":"tests/test2/#_1","text":"++Inserted text++","title":"\\"},{"location":"tests/test2/#_2","text":"Marked text","title":"\\"},{"location":"tests/test2/#footnotes","text":"Footnote 1 link 1 . Footnote 2 link 2 . Inline footnote^[Text of inline footnote] definition. Duplicated footnote reference 2 .","title":"Footnotes"},{"location":"tests/test2/#definition-lists","text":"Term 1 Definition 1 with lazy continuation. Term 2 with inline markup Definition 2 { some code, part of Definition 2 } Third paragraph of definition 2. Compact style: Term 1 ~ Definition 1 Term 2 ~ Definition 2a ~ Definition 2b","title":"Definition lists"},{"location":"tests/test2/#abbreviations","text":"This is HTML abbreviation example. It converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on. *[HTML]: Hyper Text Markup Language","title":"Abbreviations"},{"location":"tests/test2/#custom-containers","text":"::: warning here be dragons ::: Footnote can have markup and multiple paragraphs. \u21a9 Footnote text. \u21a9 \u21a9","title":"Custom containers"},{"location":"tests/test1/","text":"","title":"Index"}]}